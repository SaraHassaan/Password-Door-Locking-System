/*
 * password.c
 *
 *  Created on: ??þ/??þ/????
 *      Author: Sara
 */
#include"password.h"
#include"uart.h"

/*check if the password that you received from user is the same password that stored before in EEPROM
 * arguments of this function 1-pointer called recv ..> it points to the received array from MC1 this array contain
 * the password that entered by user
 * 2-pointer called eeprom ..> it points to the array that is read from EEPROM that contains the true password
 */
uint8 check_pass(uint8*recv,uint8*eeprom)
{
	uint8 flag=1;
	uint8 i=0;
	while(*recv != '\0')/*when pointer points to null that mean its the end of received array and go out from this loop*/
	{
		/*here we compare between the value inside two arrays (received and eeprom)
		 * if the first value in received array not equal to the first value of eeprom array
		 * that mean the password that written by user not right so make flag =0
		 * if the received array is identical to the real password at eeprom flag is still = 1
		 */
		if(*recv != *eeprom)
		{
			flag=0;
		}
		else
		{

		}
		recv++;/*to get the addresses of next locations in array to be able to access the all values inside array*/
		eeprom++;
        i++;
	}
	if(flag==1)/*send 'T' to MC1 as tell it that password is true*/
	{
		send_byte('T');
	}
	else if(flag==0)/*send 'F' to MC1 to tell it password is wrong*/
	{
		send_byte('F');
    }
	return flag;
}

/*its read the true password from EEPROM
 * arguments: 1-address : is the location of the real password in EEPROM
 * 2-pass: is the pointer of empty array that will be full with the real password after reading from eeprom
 */
void read_password(uint16 address,uint8 *pass)
{

	read_eeprom(address,pass);
	_delay_ms(10);
	while(*pass != '\0')/*when you read a null from eeprom that mean its the end of the password*/
	{
		address++;
		pass++;
		read_eeprom(address,pass);
		_delay_ms(10);
	}


}

/*store the password at EEPROM
 * arguments :1- address that you want to store password in it
 * 2-pass points to the array that is full of char of password that will be stored
 */
void write_pass(uint16 address,uint8 *pass)
{
	while(*pass!='\0')
	{
		write_eeprom(address,*pass);/*address is the memory location that you want to write at it ..0x10 is the data that will be written in 0x0311..its the password of the door*/
		_delay_ms(10);
		address++; /*to get the next address to save the password in it*/
		pass++;    /*to make the pointer point to the next location in array of password*/
	}
	write_eeprom(address,*pass);/*to write null at last of string*/
	_delay_ms(10);

}

/*its executed only one time in code
 * its received array from MC1 , this array is the password that user want to use it to open door
 */
uint8 password_first_time()
{

	uint8 check;
	uint8 str_recv[16];
	uint8 read_eeprom[16];
	recv_byte=receive_byte();
	while(recv_byte!=0x11);/*if you receive it , you can receive the string from MC1*/
	receive_string(str_recv);/*receive the password from user*/
	write_pass(0x0001,str_recv);/*store the password at address 0x0001 in EEPROM*/
	recv_byte=receive_byte();
	while(recv_byte!=0x11);/*if you receive it , you can receive the string from another mc*/
	receive_string(str_recv);/*receive the password (retype password) from user again*/
	read_password(0x0001,read_eeprom);/*read the first password that written by user at first time from EEPROM*/
	send_byte(0x11);
	check=check_pass(str_recv,read_eeprom);/*check if the first password is identical to the retype password*/
	return check;
}

/*its used when user want to change the current password
 * firstly , MC2 receive the current password from user and check if its identical to the real password
 * secondly, if the password that written by user is true ,MC2 will receive the new password and retype of new password
 * then store it in EEPROM at address 0x0001
 */
void change_password_mc2()
{
	uint8 check;
	uint8 str_recv[16];/*this array that will receive the characters that are sent from MC1*/
	uint8 str_read_eeprom[16];/*this array will be contain the real password that stored at EEPROM*/
	recv_byte=receive_byte();
	while(recv_byte!=0x01);/*if you receive it (to be ready to recv string ), you can receive the string from MC1*/
	receive_string(str_recv); /*receive a string(current password that written by user) from MC1*/
	/*this function read the password that stored at address 0x0001..and store it in array str_read_eeprom*/
	read_password(0x0001,str_read_eeprom);
	recv_byte=receive_byte();
	while(recv_byte!=0x11);
	check=check_pass(str_recv,str_read_eeprom); /*check if user write the right password*/
	if(check==1) /*if the current password that written by user now is right */
	{

		recv_byte=receive_byte();
	    while(recv_byte!=0x11);/*wait untill MC1 is be ready*/
		receive_string(str_recv);/*receive the new password from user*/
		/*store a new password into EEPROM at address 0x0311*/
		write_pass(0x0311,str_recv);
		_delay_ms(10);
		/*receive again (retype password)the new password to check if its identical to the previous password in previous step */
		recv_byte=receive_byte();
		while(recv_byte!=0x11);
		receive_string(str_recv);
		/*read the new password that written at first time that stored at 0x0311*/
		read_password(0x0311,str_read_eeprom);
		recv_byte=receive_byte();
		while(recv_byte!=0x11);
		/*check if the confirm of the new password is right or not and send the result to another mc*/
		check=check_pass(str_recv,str_read_eeprom);
		/*write the new password into eeprom at address 0x0001*/
		if(check==1)
		{
			write_pass(0x0001,str_read_eeprom);
		}
	}
}

uint8 Open_Door_Mc2()
{
	uint8 check;
	uint8 str_recv[16];/*this receive the characters that are sent from another mc*/
	uint8 str_read_eeprom[16];
	recv_byte=receive_byte();
	while(recv_byte!=0x12);/*if you receive it (to be ready to recv string ), you can receive the string from another mc*/
	receive_string(str_recv); /*receive a string(password that written by user) from another mc*/
	/*this function read the password that stored at address 0x0001..and locate it in array str_read_eeprom*/
	read_password(0x0001,str_read_eeprom);
	recv_byte=receive_byte();
	while(recv_byte!=0x13);
	check=check_pass(str_recv,str_read_eeprom); /*check if user enter the right password*/
	//send('f');

	return check;

}

