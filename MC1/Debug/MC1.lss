
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  00002bb0  00002c44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800144  00800144  00002d28  2**0
                  ALLOC
  3 .stab         0000288c  00000000  00000000  00002d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b69  00000000  00000000  000055b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000611d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000625d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000063cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008016  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a86b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e4       	ldi	r26, 0x44	; 68
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 34       	cpi	r26, 0x49	; 73
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 16 13 	call	0x262c	; 0x262c <main>
      8a:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e3       	ldi	r26, 0x3B	; 59
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e3       	ldi	r24, 0x3B	; 59
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <change_password>:
uint8 try=0;
uint8 Tick;
uint8 flag_o;
/*this function responsible for change password*/
void change_password()
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c2 57       	subi	r28, 0x72	; 114
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61

	/*its array contain 16 element each element is 8 bits ..
	 * store keys that are pressed through keypad in this array
	 */
	uint8 str_written[16];
	Clear_Lcd();
     b60:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
	/*ask user to enter old password */
    Row_Col_string(0, 0 , "enter old pass");
     b64:	20 e6       	ldi	r18, 0x60	; 96
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	a9 01       	movw	r20, r18
     b6e:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
    /*key_pressed ..>store pressed keys on array str_written*/
	key_pressed(str_written);
     b72:	ce 01       	movw	r24, r28
     b74:	8d 59       	subi	r24, 0x9D	; 157
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <key_pressed>
	send_byte(0x01);/*send it to MC2 to be sure there is synchronization between 2 MC*/
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
	/*you send the password (old password)that is written(using keypad) to MC2 to check it
	 * check if the password that is written now is exactly like to the password is stored at eeprom
	 * */
	send_string(str_written);
     b82:	ce 01       	movw	r24, r28
     b84:	8d 59       	subi	r24, 0x9D	; 157
     b86:	9f 4f       	sbci	r25, 0xFF	; 255
     b88:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <send_string>
    Clear_Lcd();
     b8c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
    send_byte(0x11);
     b90:	81 e1       	ldi	r24, 0x11	; 17
     b92:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
     b96:	fe 01       	movw	r30, r28
     b98:	e1 5a       	subi	r30, 0xA1	; 161
     b9a:	ff 4f       	sbci	r31, 0xFF	; 255
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a8 e4       	ldi	r26, 0x48	; 72
     ba2:	b3 e4       	ldi	r27, 0x43	; 67
     ba4:	80 83       	st	Z, r24
     ba6:	91 83       	std	Z+1, r25	; 0x01
     ba8:	a2 83       	std	Z+2, r26	; 0x02
     baa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bac:	8e 01       	movw	r16, r28
     bae:	05 5a       	subi	r16, 0xA5	; 165
     bb0:	1f 4f       	sbci	r17, 0xFF	; 255
     bb2:	fe 01       	movw	r30, r28
     bb4:	e1 5a       	subi	r30, 0xA1	; 161
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	60 81       	ld	r22, Z
     bba:	71 81       	ldd	r23, Z+1	; 0x01
     bbc:	82 81       	ldd	r24, Z+2	; 0x02
     bbe:	93 81       	ldd	r25, Z+3	; 0x03
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	4a e7       	ldi	r20, 0x7A	; 122
     bc6:	53 e4       	ldi	r21, 0x43	; 67
     bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bcc:	dc 01       	movw	r26, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	f8 01       	movw	r30, r16
     bd2:	80 83       	st	Z, r24
     bd4:	91 83       	std	Z+1, r25	; 0x01
     bd6:	a2 83       	std	Z+2, r26	; 0x02
     bd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bda:	fe 01       	movw	r30, r28
     bdc:	e5 5a       	subi	r30, 0xA5	; 165
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	60 81       	ld	r22, Z
     be2:	71 81       	ldd	r23, Z+1	; 0x01
     be4:	82 81       	ldd	r24, Z+2	; 0x02
     be6:	93 81       	ldd	r25, Z+3	; 0x03
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 e8       	ldi	r20, 0x80	; 128
     bee:	5f e3       	ldi	r21, 0x3F	; 63
     bf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bf4:	88 23       	and	r24, r24
     bf6:	44 f4       	brge	.+16     	; 0xc08 <change_password+0xc2>
		__ticks = 1;
     bf8:	fe 01       	movw	r30, r28
     bfa:	e7 5a       	subi	r30, 0xA7	; 167
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	91 83       	std	Z+1, r25	; 0x01
     c04:	80 83       	st	Z, r24
     c06:	64 c0       	rjmp	.+200    	; 0xcd0 <change_password+0x18a>
	else if (__tmp > 65535)
     c08:	fe 01       	movw	r30, r28
     c0a:	e5 5a       	subi	r30, 0xA5	; 165
     c0c:	ff 4f       	sbci	r31, 0xFF	; 255
     c0e:	60 81       	ld	r22, Z
     c10:	71 81       	ldd	r23, Z+1	; 0x01
     c12:	82 81       	ldd	r24, Z+2	; 0x02
     c14:	93 81       	ldd	r25, Z+3	; 0x03
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	3f ef       	ldi	r19, 0xFF	; 255
     c1a:	4f e7       	ldi	r20, 0x7F	; 127
     c1c:	57 e4       	ldi	r21, 0x47	; 71
     c1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c22:	18 16       	cp	r1, r24
     c24:	0c f0       	brlt	.+2      	; 0xc28 <change_password+0xe2>
     c26:	43 c0       	rjmp	.+134    	; 0xcae <change_password+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c28:	fe 01       	movw	r30, r28
     c2a:	e1 5a       	subi	r30, 0xA1	; 161
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	60 81       	ld	r22, Z
     c30:	71 81       	ldd	r23, Z+1	; 0x01
     c32:	82 81       	ldd	r24, Z+2	; 0x02
     c34:	93 81       	ldd	r25, Z+3	; 0x03
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e2       	ldi	r20, 0x20	; 32
     c3c:	51 e4       	ldi	r21, 0x41	; 65
     c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	8e 01       	movw	r16, r28
     c48:	07 5a       	subi	r16, 0xA7	; 167
     c4a:	1f 4f       	sbci	r17, 0xFF	; 255
     c4c:	bc 01       	movw	r22, r24
     c4e:	cd 01       	movw	r24, r26
     c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	f8 01       	movw	r30, r16
     c5a:	91 83       	std	Z+1, r25	; 0x01
     c5c:	80 83       	st	Z, r24
     c5e:	1f c0       	rjmp	.+62     	; 0xc9e <change_password+0x158>
     c60:	fe 01       	movw	r30, r28
     c62:	e9 5a       	subi	r30, 0xA9	; 169
     c64:	ff 4f       	sbci	r31, 0xFF	; 255
     c66:	89 e1       	ldi	r24, 0x19	; 25
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	91 83       	std	Z+1, r25	; 0x01
     c6c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c6e:	fe 01       	movw	r30, r28
     c70:	e9 5a       	subi	r30, 0xA9	; 169
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <change_password+0x132>
     c7c:	fe 01       	movw	r30, r28
     c7e:	e9 5a       	subi	r30, 0xA9	; 169
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	91 83       	std	Z+1, r25	; 0x01
     c84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c86:	de 01       	movw	r26, r28
     c88:	a7 5a       	subi	r26, 0xA7	; 167
     c8a:	bf 4f       	sbci	r27, 0xFF	; 255
     c8c:	fe 01       	movw	r30, r28
     c8e:	e7 5a       	subi	r30, 0xA7	; 167
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	11 96       	adiw	r26, 0x01	; 1
     c9a:	9c 93       	st	X, r25
     c9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c9e:	fe 01       	movw	r30, r28
     ca0:	e7 5a       	subi	r30, 0xA7	; 167
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	d1 f6       	brne	.-76     	; 0xc60 <change_password+0x11a>
     cac:	28 c0       	rjmp	.+80     	; 0xcfe <change_password+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cae:	8e 01       	movw	r16, r28
     cb0:	07 5a       	subi	r16, 0xA7	; 167
     cb2:	1f 4f       	sbci	r17, 0xFF	; 255
     cb4:	fe 01       	movw	r30, r28
     cb6:	e5 5a       	subi	r30, 0xA5	; 165
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	60 81       	ld	r22, Z
     cbc:	71 81       	ldd	r23, Z+1	; 0x01
     cbe:	82 81       	ldd	r24, Z+2	; 0x02
     cc0:	93 81       	ldd	r25, Z+3	; 0x03
     cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	f8 01       	movw	r30, r16
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	80 83       	st	Z, r24
     cd0:	de 01       	movw	r26, r28
     cd2:	ab 5a       	subi	r26, 0xAB	; 171
     cd4:	bf 4f       	sbci	r27, 0xFF	; 255
     cd6:	fe 01       	movw	r30, r28
     cd8:	e7 5a       	subi	r30, 0xA7	; 167
     cda:	ff 4f       	sbci	r31, 0xFF	; 255
     cdc:	80 81       	ld	r24, Z
     cde:	91 81       	ldd	r25, Z+1	; 0x01
     ce0:	11 96       	adiw	r26, 0x01	; 1
     ce2:	9c 93       	st	X, r25
     ce4:	8e 93       	st	-X, r24
     ce6:	fe 01       	movw	r30, r28
     ce8:	eb 5a       	subi	r30, 0xAB	; 171
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	80 81       	ld	r24, Z
     cee:	91 81       	ldd	r25, Z+1	; 0x01
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <change_password+0x1aa>
     cf4:	fe 01       	movw	r30, r28
     cf6:	eb 5a       	subi	r30, 0xAB	; 171
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	91 83       	std	Z+1, r25	; 0x01
     cfc:	80 83       	st	Z, r24
     * correct variable is equal to the char that is transmitted by MC2
     */
    /*when MC2 process on the password that written by user
     * MC2 send char if its correct password or not ..F is false password ..T its true
     */
    if(correct=='F')
     cfe:	80 91 47 01 	lds	r24, 0x0147
     d02:	86 34       	cpi	r24, 0x46	; 70
     d04:	09 f0       	breq	.+2      	; 0xd08 <change_password+0x1c2>
     d06:	bc c0       	rjmp	.+376    	; 0xe80 <change_password+0x33a>
	{
		Row_Col_string(0, 0 , "false password");
     d08:	2f e6       	ldi	r18, 0x6F	; 111
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	a9 01       	movw	r20, r18
     d12:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
     d16:	fe 01       	movw	r30, r28
     d18:	ef 5a       	subi	r30, 0xAF	; 175
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	aa e7       	ldi	r26, 0x7A	; 122
     d22:	b4 e4       	ldi	r27, 0x44	; 68
     d24:	80 83       	st	Z, r24
     d26:	91 83       	std	Z+1, r25	; 0x01
     d28:	a2 83       	std	Z+2, r26	; 0x02
     d2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d2c:	8e 01       	movw	r16, r28
     d2e:	03 5b       	subi	r16, 0xB3	; 179
     d30:	1f 4f       	sbci	r17, 0xFF	; 255
     d32:	fe 01       	movw	r30, r28
     d34:	ef 5a       	subi	r30, 0xAF	; 175
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	82 81       	ldd	r24, Z+2	; 0x02
     d3e:	93 81       	ldd	r25, Z+3	; 0x03
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	4a e7       	ldi	r20, 0x7A	; 122
     d46:	53 e4       	ldi	r21, 0x43	; 67
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	f8 01       	movw	r30, r16
     d52:	80 83       	st	Z, r24
     d54:	91 83       	std	Z+1, r25	; 0x01
     d56:	a2 83       	std	Z+2, r26	; 0x02
     d58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d5a:	fe 01       	movw	r30, r28
     d5c:	e3 5b       	subi	r30, 0xB3	; 179
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	60 81       	ld	r22, Z
     d62:	71 81       	ldd	r23, Z+1	; 0x01
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e8       	ldi	r20, 0x80	; 128
     d6e:	5f e3       	ldi	r21, 0x3F	; 63
     d70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d74:	88 23       	and	r24, r24
     d76:	44 f4       	brge	.+16     	; 0xd88 <change_password+0x242>
		__ticks = 1;
     d78:	fe 01       	movw	r30, r28
     d7a:	e5 5b       	subi	r30, 0xB5	; 181
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	91 83       	std	Z+1, r25	; 0x01
     d84:	80 83       	st	Z, r24
     d86:	64 c0       	rjmp	.+200    	; 0xe50 <change_password+0x30a>
	else if (__tmp > 65535)
     d88:	fe 01       	movw	r30, r28
     d8a:	e3 5b       	subi	r30, 0xB3	; 179
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	60 81       	ld	r22, Z
     d90:	71 81       	ldd	r23, Z+1	; 0x01
     d92:	82 81       	ldd	r24, Z+2	; 0x02
     d94:	93 81       	ldd	r25, Z+3	; 0x03
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	3f ef       	ldi	r19, 0xFF	; 255
     d9a:	4f e7       	ldi	r20, 0x7F	; 127
     d9c:	57 e4       	ldi	r21, 0x47	; 71
     d9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da2:	18 16       	cp	r1, r24
     da4:	0c f0       	brlt	.+2      	; 0xda8 <change_password+0x262>
     da6:	43 c0       	rjmp	.+134    	; 0xe2e <change_password+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da8:	fe 01       	movw	r30, r28
     daa:	ef 5a       	subi	r30, 0xAF	; 175
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	60 81       	ld	r22, Z
     db0:	71 81       	ldd	r23, Z+1	; 0x01
     db2:	82 81       	ldd	r24, Z+2	; 0x02
     db4:	93 81       	ldd	r25, Z+3	; 0x03
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e2       	ldi	r20, 0x20	; 32
     dbc:	51 e4       	ldi	r21, 0x41	; 65
     dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	8e 01       	movw	r16, r28
     dc8:	05 5b       	subi	r16, 0xB5	; 181
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
     dcc:	bc 01       	movw	r22, r24
     dce:	cd 01       	movw	r24, r26
     dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	f8 01       	movw	r30, r16
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
     dde:	1f c0       	rjmp	.+62     	; 0xe1e <change_password+0x2d8>
     de0:	fe 01       	movw	r30, r28
     de2:	e7 5b       	subi	r30, 0xB7	; 183
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	89 e1       	ldi	r24, 0x19	; 25
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	91 83       	std	Z+1, r25	; 0x01
     dec:	80 83       	st	Z, r24
     dee:	fe 01       	movw	r30, r28
     df0:	e7 5b       	subi	r30, 0xB7	; 183
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <change_password+0x2b2>
     dfc:	fe 01       	movw	r30, r28
     dfe:	e7 5b       	subi	r30, 0xB7	; 183
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e06:	de 01       	movw	r26, r28
     e08:	a5 5b       	subi	r26, 0xB5	; 181
     e0a:	bf 4f       	sbci	r27, 0xFF	; 255
     e0c:	fe 01       	movw	r30, r28
     e0e:	e5 5b       	subi	r30, 0xB5	; 181
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	11 96       	adiw	r26, 0x01	; 1
     e1a:	9c 93       	st	X, r25
     e1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1e:	fe 01       	movw	r30, r28
     e20:	e5 5b       	subi	r30, 0xB5	; 181
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	80 81       	ld	r24, Z
     e26:	91 81       	ldd	r25, Z+1	; 0x01
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	d1 f6       	brne	.-76     	; 0xde0 <change_password+0x29a>
     e2c:	c9 c2       	rjmp	.+1426   	; 0x13c0 <change_password+0x87a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e2e:	8e 01       	movw	r16, r28
     e30:	05 5b       	subi	r16, 0xB5	; 181
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
     e34:	fe 01       	movw	r30, r28
     e36:	e3 5b       	subi	r30, 0xB3	; 179
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	60 81       	ld	r22, Z
     e3c:	71 81       	ldd	r23, Z+1	; 0x01
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	93 81       	ldd	r25, Z+3	; 0x03
     e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	f8 01       	movw	r30, r16
     e4c:	91 83       	std	Z+1, r25	; 0x01
     e4e:	80 83       	st	Z, r24
     e50:	de 01       	movw	r26, r28
     e52:	a9 5b       	subi	r26, 0xB9	; 185
     e54:	bf 4f       	sbci	r27, 0xFF	; 255
     e56:	fe 01       	movw	r30, r28
     e58:	e5 5b       	subi	r30, 0xB5	; 181
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	80 81       	ld	r24, Z
     e5e:	91 81       	ldd	r25, Z+1	; 0x01
     e60:	11 96       	adiw	r26, 0x01	; 1
     e62:	9c 93       	st	X, r25
     e64:	8e 93       	st	-X, r24
     e66:	fe 01       	movw	r30, r28
     e68:	e9 5b       	subi	r30, 0xB9	; 185
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	80 81       	ld	r24, Z
     e6e:	91 81       	ldd	r25, Z+1	; 0x01
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	f1 f7       	brne	.-4      	; 0xe70 <change_password+0x32a>
     e74:	fe 01       	movw	r30, r28
     e76:	e9 5b       	subi	r30, 0xB9	; 185
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	80 83       	st	Z, r24
     e7e:	a0 c2       	rjmp	.+1344   	; 0x13c0 <change_password+0x87a>
		_delay_ms(1000);
		//correct=0;
    }
    /*if user write the right old password , system will ask him to enter the new password and enter it again to confirm it*/
	else if(correct=='T')
     e80:	80 91 47 01 	lds	r24, 0x0147
     e84:	84 35       	cpi	r24, 0x54	; 84
     e86:	09 f0       	breq	.+2      	; 0xe8a <change_password+0x344>
     e88:	9b c2       	rjmp	.+1334   	; 0x13c0 <change_password+0x87a>
	{
	    Row_Col_string(0, 0 , "enter new pass");
     e8a:	2e e7       	ldi	r18, 0x7E	; 126
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	a9 01       	movw	r20, r18
     e94:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
	    key_pressed(str_written);
     e98:	ce 01       	movw	r24, r28
     e9a:	8d 59       	subi	r24, 0x9D	; 157
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <key_pressed>
		send_byte(0x11);/*send it to MC2 to be sure there is synchronization between 2 mc*/
     ea2:	81 e1       	ldi	r24, 0x11	; 17
     ea4:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
		send_string(str_written);/*you send the new password that is written(using keypad) to MC2 */
     ea8:	ce 01       	movw	r24, r28
     eaa:	8d 59       	subi	r24, 0x9D	; 157
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <send_string>
     eb2:	fe 01       	movw	r30, r28
     eb4:	ed 5b       	subi	r30, 0xBD	; 189
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	a8 ec       	ldi	r26, 0xC8	; 200
     ebe:	b2 e4       	ldi	r27, 0x42	; 66
     ec0:	80 83       	st	Z, r24
     ec2:	91 83       	std	Z+1, r25	; 0x01
     ec4:	a2 83       	std	Z+2, r26	; 0x02
     ec6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec8:	8e 01       	movw	r16, r28
     eca:	01 5c       	subi	r16, 0xC1	; 193
     ecc:	1f 4f       	sbci	r17, 0xFF	; 255
     ece:	fe 01       	movw	r30, r28
     ed0:	ed 5b       	subi	r30, 0xBD	; 189
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	60 81       	ld	r22, Z
     ed6:	71 81       	ldd	r23, Z+1	; 0x01
     ed8:	82 81       	ldd	r24, Z+2	; 0x02
     eda:	93 81       	ldd	r25, Z+3	; 0x03
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	4a e7       	ldi	r20, 0x7A	; 122
     ee2:	53 e4       	ldi	r21, 0x43	; 67
     ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	f8 01       	movw	r30, r16
     eee:	80 83       	st	Z, r24
     ef0:	91 83       	std	Z+1, r25	; 0x01
     ef2:	a2 83       	std	Z+2, r26	; 0x02
     ef4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ef6:	fe 01       	movw	r30, r28
     ef8:	ff 96       	adiw	r30, 0x3f	; 63
     efa:	60 81       	ld	r22, Z
     efc:	71 81       	ldd	r23, Z+1	; 0x01
     efe:	82 81       	ldd	r24, Z+2	; 0x02
     f00:	93 81       	ldd	r25, Z+3	; 0x03
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e8       	ldi	r20, 0x80	; 128
     f08:	5f e3       	ldi	r21, 0x3F	; 63
     f0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f0e:	88 23       	and	r24, r24
     f10:	2c f4       	brge	.+10     	; 0xf1c <change_password+0x3d6>
		__ticks = 1;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9e af       	std	Y+62, r25	; 0x3e
     f18:	8d af       	std	Y+61, r24	; 0x3d
     f1a:	46 c0       	rjmp	.+140    	; 0xfa8 <change_password+0x462>
	else if (__tmp > 65535)
     f1c:	fe 01       	movw	r30, r28
     f1e:	ff 96       	adiw	r30, 0x3f	; 63
     f20:	60 81       	ld	r22, Z
     f22:	71 81       	ldd	r23, Z+1	; 0x01
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	93 81       	ldd	r25, Z+3	; 0x03
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	3f ef       	ldi	r19, 0xFF	; 255
     f2c:	4f e7       	ldi	r20, 0x7F	; 127
     f2e:	57 e4       	ldi	r21, 0x47	; 71
     f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f34:	18 16       	cp	r1, r24
     f36:	64 f5       	brge	.+88     	; 0xf90 <change_password+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f38:	fe 01       	movw	r30, r28
     f3a:	ed 5b       	subi	r30, 0xBD	; 189
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	60 81       	ld	r22, Z
     f40:	71 81       	ldd	r23, Z+1	; 0x01
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e2       	ldi	r20, 0x20	; 32
     f4c:	51 e4       	ldi	r21, 0x41	; 65
     f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	bc 01       	movw	r22, r24
     f58:	cd 01       	movw	r24, r26
     f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	9e af       	std	Y+62, r25	; 0x3e
     f64:	8d af       	std	Y+61, r24	; 0x3d
     f66:	0f c0       	rjmp	.+30     	; 0xf86 <change_password+0x440>
     f68:	89 e1       	ldi	r24, 0x19	; 25
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	9c af       	std	Y+60, r25	; 0x3c
     f6e:	8b af       	std	Y+59, r24	; 0x3b
     f70:	8b ad       	ldd	r24, Y+59	; 0x3b
     f72:	9c ad       	ldd	r25, Y+60	; 0x3c
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	f1 f7       	brne	.-4      	; 0xf74 <change_password+0x42e>
     f78:	9c af       	std	Y+60, r25	; 0x3c
     f7a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f7e:	9e ad       	ldd	r25, Y+62	; 0x3e
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	9e af       	std	Y+62, r25	; 0x3e
     f84:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f86:	8d ad       	ldd	r24, Y+61	; 0x3d
     f88:	9e ad       	ldd	r25, Y+62	; 0x3e
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	69 f7       	brne	.-38     	; 0xf68 <change_password+0x422>
     f8e:	16 c0       	rjmp	.+44     	; 0xfbc <change_password+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f90:	fe 01       	movw	r30, r28
     f92:	ff 96       	adiw	r30, 0x3f	; 63
     f94:	60 81       	ld	r22, Z
     f96:	71 81       	ldd	r23, Z+1	; 0x01
     f98:	82 81       	ldd	r24, Z+2	; 0x02
     f9a:	93 81       	ldd	r25, Z+3	; 0x03
     f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9e af       	std	Y+62, r25	; 0x3e
     fa6:	8d af       	std	Y+61, r24	; 0x3d
     fa8:	8d ad       	ldd	r24, Y+61	; 0x3d
     faa:	9e ad       	ldd	r25, Y+62	; 0x3e
     fac:	9a af       	std	Y+58, r25	; 0x3a
     fae:	89 af       	std	Y+57, r24	; 0x39
     fb0:	89 ad       	ldd	r24, Y+57	; 0x39
     fb2:	9a ad       	ldd	r25, Y+58	; 0x3a
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <change_password+0x46e>
     fb8:	9a af       	std	Y+58, r25	; 0x3a
     fba:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(100);
		Clear_Lcd();
     fbc:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
		Row_Col_string(0, 0 , "re-enter newpass");
     fc0:	2d e8       	ldi	r18, 0x8D	; 141
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
	    key_pressed(str_written);
     fce:	ce 01       	movw	r24, r28
     fd0:	8d 59       	subi	r24, 0x9D	; 157
     fd2:	9f 4f       	sbci	r25, 0xFF	; 255
     fd4:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <key_pressed>
		send_byte(0x02);/*send it to another mc to be sure there is synchronization between 2 mc*/
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
		send_string(str_written);/*send the re-enter password to MC2 to assure that its identical to the first new password */
     fde:	ce 01       	movw	r24, r28
     fe0:	8d 59       	subi	r24, 0x9D	; 157
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <send_string>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a8 ec       	ldi	r26, 0xC8	; 200
     fee:	b2 e4       	ldi	r27, 0x42	; 66
     ff0:	8d ab       	std	Y+53, r24	; 0x35
     ff2:	9e ab       	std	Y+54, r25	; 0x36
     ff4:	af ab       	std	Y+55, r26	; 0x37
     ff6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff8:	6d a9       	ldd	r22, Y+53	; 0x35
     ffa:	7e a9       	ldd	r23, Y+54	; 0x36
     ffc:	8f a9       	ldd	r24, Y+55	; 0x37
     ffe:	98 ad       	ldd	r25, Y+56	; 0x38
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	4a e7       	ldi	r20, 0x7A	; 122
    1006:	53 e4       	ldi	r21, 0x43	; 67
    1008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	89 ab       	std	Y+49, r24	; 0x31
    1012:	9a ab       	std	Y+50, r25	; 0x32
    1014:	ab ab       	std	Y+51, r26	; 0x33
    1016:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1018:	69 a9       	ldd	r22, Y+49	; 0x31
    101a:	7a a9       	ldd	r23, Y+50	; 0x32
    101c:	8b a9       	ldd	r24, Y+51	; 0x33
    101e:	9c a9       	ldd	r25, Y+52	; 0x34
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e8       	ldi	r20, 0x80	; 128
    1026:	5f e3       	ldi	r21, 0x3F	; 63
    1028:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    102c:	88 23       	and	r24, r24
    102e:	2c f4       	brge	.+10     	; 0x103a <change_password+0x4f4>
		__ticks = 1;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	98 ab       	std	Y+48, r25	; 0x30
    1036:	8f a7       	std	Y+47, r24	; 0x2f
    1038:	3f c0       	rjmp	.+126    	; 0x10b8 <change_password+0x572>
	else if (__tmp > 65535)
    103a:	69 a9       	ldd	r22, Y+49	; 0x31
    103c:	7a a9       	ldd	r23, Y+50	; 0x32
    103e:	8b a9       	ldd	r24, Y+51	; 0x33
    1040:	9c a9       	ldd	r25, Y+52	; 0x34
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	3f ef       	ldi	r19, 0xFF	; 255
    1046:	4f e7       	ldi	r20, 0x7F	; 127
    1048:	57 e4       	ldi	r21, 0x47	; 71
    104a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    104e:	18 16       	cp	r1, r24
    1050:	4c f5       	brge	.+82     	; 0x10a4 <change_password+0x55e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1052:	6d a9       	ldd	r22, Y+53	; 0x35
    1054:	7e a9       	ldd	r23, Y+54	; 0x36
    1056:	8f a9       	ldd	r24, Y+55	; 0x37
    1058:	98 ad       	ldd	r25, Y+56	; 0x38
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e2       	ldi	r20, 0x20	; 32
    1060:	51 e4       	ldi	r21, 0x41	; 65
    1062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	bc 01       	movw	r22, r24
    106c:	cd 01       	movw	r24, r26
    106e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	98 ab       	std	Y+48, r25	; 0x30
    1078:	8f a7       	std	Y+47, r24	; 0x2f
    107a:	0f c0       	rjmp	.+30     	; 0x109a <change_password+0x554>
    107c:	89 e1       	ldi	r24, 0x19	; 25
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	9e a7       	std	Y+46, r25	; 0x2e
    1082:	8d a7       	std	Y+45, r24	; 0x2d
    1084:	8d a5       	ldd	r24, Y+45	; 0x2d
    1086:	9e a5       	ldd	r25, Y+46	; 0x2e
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <change_password+0x542>
    108c:	9e a7       	std	Y+46, r25	; 0x2e
    108e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1090:	8f a5       	ldd	r24, Y+47	; 0x2f
    1092:	98 a9       	ldd	r25, Y+48	; 0x30
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	98 ab       	std	Y+48, r25	; 0x30
    1098:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109a:	8f a5       	ldd	r24, Y+47	; 0x2f
    109c:	98 a9       	ldd	r25, Y+48	; 0x30
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	69 f7       	brne	.-38     	; 0x107c <change_password+0x536>
    10a2:	14 c0       	rjmp	.+40     	; 0x10cc <change_password+0x586>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a4:	69 a9       	ldd	r22, Y+49	; 0x31
    10a6:	7a a9       	ldd	r23, Y+50	; 0x32
    10a8:	8b a9       	ldd	r24, Y+51	; 0x33
    10aa:	9c a9       	ldd	r25, Y+52	; 0x34
    10ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	98 ab       	std	Y+48, r25	; 0x30
    10b6:	8f a7       	std	Y+47, r24	; 0x2f
    10b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ba:	98 a9       	ldd	r25, Y+48	; 0x30
    10bc:	9c a7       	std	Y+44, r25	; 0x2c
    10be:	8b a7       	std	Y+43, r24	; 0x2b
    10c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    10c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <change_password+0x57e>
    10c8:	9c a7       	std	Y+44, r25	; 0x2c
    10ca:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		Clear_Lcd();
    10cc:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
		correct=0;
    10d0:	10 92 47 01 	sts	0x0147, r1
		send_byte(0x11);
    10d4:	81 e1       	ldi	r24, 0x11	; 17
    10d6:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a8 e4       	ldi	r26, 0x48	; 72
    10e0:	b3 e4       	ldi	r27, 0x43	; 67
    10e2:	8f a3       	std	Y+39, r24	; 0x27
    10e4:	98 a7       	std	Y+40, r25	; 0x28
    10e6:	a9 a7       	std	Y+41, r26	; 0x29
    10e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ea:	6f a1       	ldd	r22, Y+39	; 0x27
    10ec:	78 a5       	ldd	r23, Y+40	; 0x28
    10ee:	89 a5       	ldd	r24, Y+41	; 0x29
    10f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	4a e7       	ldi	r20, 0x7A	; 122
    10f8:	53 e4       	ldi	r21, 0x43	; 67
    10fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	8b a3       	std	Y+35, r24	; 0x23
    1104:	9c a3       	std	Y+36, r25	; 0x24
    1106:	ad a3       	std	Y+37, r26	; 0x25
    1108:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    110a:	6b a1       	ldd	r22, Y+35	; 0x23
    110c:	7c a1       	ldd	r23, Y+36	; 0x24
    110e:	8d a1       	ldd	r24, Y+37	; 0x25
    1110:	9e a1       	ldd	r25, Y+38	; 0x26
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e8       	ldi	r20, 0x80	; 128
    1118:	5f e3       	ldi	r21, 0x3F	; 63
    111a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    111e:	88 23       	and	r24, r24
    1120:	2c f4       	brge	.+10     	; 0x112c <change_password+0x5e6>
		__ticks = 1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9a a3       	std	Y+34, r25	; 0x22
    1128:	89 a3       	std	Y+33, r24	; 0x21
    112a:	3f c0       	rjmp	.+126    	; 0x11aa <change_password+0x664>
	else if (__tmp > 65535)
    112c:	6b a1       	ldd	r22, Y+35	; 0x23
    112e:	7c a1       	ldd	r23, Y+36	; 0x24
    1130:	8d a1       	ldd	r24, Y+37	; 0x25
    1132:	9e a1       	ldd	r25, Y+38	; 0x26
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	4f e7       	ldi	r20, 0x7F	; 127
    113a:	57 e4       	ldi	r21, 0x47	; 71
    113c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1140:	18 16       	cp	r1, r24
    1142:	4c f5       	brge	.+82     	; 0x1196 <change_password+0x650>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1144:	6f a1       	ldd	r22, Y+39	; 0x27
    1146:	78 a5       	ldd	r23, Y+40	; 0x28
    1148:	89 a5       	ldd	r24, Y+41	; 0x29
    114a:	9a a5       	ldd	r25, Y+42	; 0x2a
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e2       	ldi	r20, 0x20	; 32
    1152:	51 e4       	ldi	r21, 0x41	; 65
    1154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	9a a3       	std	Y+34, r25	; 0x22
    116a:	89 a3       	std	Y+33, r24	; 0x21
    116c:	0f c0       	rjmp	.+30     	; 0x118c <change_password+0x646>
    116e:	89 e1       	ldi	r24, 0x19	; 25
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	98 a3       	std	Y+32, r25	; 0x20
    1174:	8f 8f       	std	Y+31, r24	; 0x1f
    1176:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1178:	98 a1       	ldd	r25, Y+32	; 0x20
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <change_password+0x634>
    117e:	98 a3       	std	Y+32, r25	; 0x20
    1180:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1182:	89 a1       	ldd	r24, Y+33	; 0x21
    1184:	9a a1       	ldd	r25, Y+34	; 0x22
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	9a a3       	std	Y+34, r25	; 0x22
    118a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118c:	89 a1       	ldd	r24, Y+33	; 0x21
    118e:	9a a1       	ldd	r25, Y+34	; 0x22
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	69 f7       	brne	.-38     	; 0x116e <change_password+0x628>
    1194:	14 c0       	rjmp	.+40     	; 0x11be <change_password+0x678>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1196:	6b a1       	ldd	r22, Y+35	; 0x23
    1198:	7c a1       	ldd	r23, Y+36	; 0x24
    119a:	8d a1       	ldd	r24, Y+37	; 0x25
    119c:	9e a1       	ldd	r25, Y+38	; 0x26
    119e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	9a a3       	std	Y+34, r25	; 0x22
    11a8:	89 a3       	std	Y+33, r24	; 0x21
    11aa:	89 a1       	ldd	r24, Y+33	; 0x21
    11ac:	9a a1       	ldd	r25, Y+34	; 0x22
    11ae:	9e 8f       	std	Y+30, r25	; 0x1e
    11b0:	8d 8f       	std	Y+29, r24	; 0x1d
    11b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <change_password+0x670>
    11ba:	9e 8f       	std	Y+30, r25	; 0x1e
    11bc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(200);
		/*if the first new password is identical to the retype password
		 * system will tell you that password is changed. if they not identical
		 * system will ask you to repeat this operation again
		 */
        if(correct=='T')
    11be:	80 91 47 01 	lds	r24, 0x0147
    11c2:	84 35       	cpi	r24, 0x54	; 84
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <change_password+0x682>
    11c6:	7c c0       	rjmp	.+248    	; 0x12c0 <change_password+0x77a>
        {
        	Clear_Lcd();
    11c8:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
        	Row_Col_string(0, 0 , "pass is changed");
    11cc:	2e e9       	ldi	r18, 0x9E	; 158
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	a9 01       	movw	r20, r18
    11d6:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	aa e7       	ldi	r26, 0x7A	; 122
    11e0:	b4 e4       	ldi	r27, 0x44	; 68
    11e2:	89 8f       	std	Y+25, r24	; 0x19
    11e4:	9a 8f       	std	Y+26, r25	; 0x1a
    11e6:	ab 8f       	std	Y+27, r26	; 0x1b
    11e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ea:	69 8d       	ldd	r22, Y+25	; 0x19
    11ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	4a e7       	ldi	r20, 0x7A	; 122
    11f8:	53 e4       	ldi	r21, 0x43	; 67
    11fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	8d 8b       	std	Y+21, r24	; 0x15
    1204:	9e 8b       	std	Y+22, r25	; 0x16
    1206:	af 8b       	std	Y+23, r26	; 0x17
    1208:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    120a:	6d 89       	ldd	r22, Y+21	; 0x15
    120c:	7e 89       	ldd	r23, Y+22	; 0x16
    120e:	8f 89       	ldd	r24, Y+23	; 0x17
    1210:	98 8d       	ldd	r25, Y+24	; 0x18
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e8       	ldi	r20, 0x80	; 128
    1218:	5f e3       	ldi	r21, 0x3F	; 63
    121a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    121e:	88 23       	and	r24, r24
    1220:	2c f4       	brge	.+10     	; 0x122c <change_password+0x6e6>
		__ticks = 1;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	9c 8b       	std	Y+20, r25	; 0x14
    1228:	8b 8b       	std	Y+19, r24	; 0x13
    122a:	3f c0       	rjmp	.+126    	; 0x12aa <change_password+0x764>
	else if (__tmp > 65535)
    122c:	6d 89       	ldd	r22, Y+21	; 0x15
    122e:	7e 89       	ldd	r23, Y+22	; 0x16
    1230:	8f 89       	ldd	r24, Y+23	; 0x17
    1232:	98 8d       	ldd	r25, Y+24	; 0x18
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	3f ef       	ldi	r19, 0xFF	; 255
    1238:	4f e7       	ldi	r20, 0x7F	; 127
    123a:	57 e4       	ldi	r21, 0x47	; 71
    123c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1240:	18 16       	cp	r1, r24
    1242:	4c f5       	brge	.+82     	; 0x1296 <change_password+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1244:	69 8d       	ldd	r22, Y+25	; 0x19
    1246:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1248:	8b 8d       	ldd	r24, Y+27	; 0x1b
    124a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e2       	ldi	r20, 0x20	; 32
    1252:	51 e4       	ldi	r21, 0x41	; 65
    1254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	bc 01       	movw	r22, r24
    125e:	cd 01       	movw	r24, r26
    1260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	9c 8b       	std	Y+20, r25	; 0x14
    126a:	8b 8b       	std	Y+19, r24	; 0x13
    126c:	0f c0       	rjmp	.+30     	; 0x128c <change_password+0x746>
    126e:	89 e1       	ldi	r24, 0x19	; 25
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	9a 8b       	std	Y+18, r25	; 0x12
    1274:	89 8b       	std	Y+17, r24	; 0x11
    1276:	89 89       	ldd	r24, Y+17	; 0x11
    1278:	9a 89       	ldd	r25, Y+18	; 0x12
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <change_password+0x734>
    127e:	9a 8b       	std	Y+18, r25	; 0x12
    1280:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1282:	8b 89       	ldd	r24, Y+19	; 0x13
    1284:	9c 89       	ldd	r25, Y+20	; 0x14
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	9c 8b       	std	Y+20, r25	; 0x14
    128a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128c:	8b 89       	ldd	r24, Y+19	; 0x13
    128e:	9c 89       	ldd	r25, Y+20	; 0x14
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	69 f7       	brne	.-38     	; 0x126e <change_password+0x728>
    1294:	95 c0       	rjmp	.+298    	; 0x13c0 <change_password+0x87a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1296:	6d 89       	ldd	r22, Y+21	; 0x15
    1298:	7e 89       	ldd	r23, Y+22	; 0x16
    129a:	8f 89       	ldd	r24, Y+23	; 0x17
    129c:	98 8d       	ldd	r25, Y+24	; 0x18
    129e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	9c 8b       	std	Y+20, r25	; 0x14
    12a8:	8b 8b       	std	Y+19, r24	; 0x13
    12aa:	8b 89       	ldd	r24, Y+19	; 0x13
    12ac:	9c 89       	ldd	r25, Y+20	; 0x14
    12ae:	98 8b       	std	Y+16, r25	; 0x10
    12b0:	8f 87       	std	Y+15, r24	; 0x0f
    12b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b4:	98 89       	ldd	r25, Y+16	; 0x10
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <change_password+0x770>
    12ba:	98 8b       	std	Y+16, r25	; 0x10
    12bc:	8f 87       	std	Y+15, r24	; 0x0f
    12be:	80 c0       	rjmp	.+256    	; 0x13c0 <change_password+0x87a>
        	_delay_ms(1000);
        }
        else if(correct =='F')
    12c0:	80 91 47 01 	lds	r24, 0x0147
    12c4:	86 34       	cpi	r24, 0x46	; 70
    12c6:	09 f0       	breq	.+2      	; 0x12ca <change_password+0x784>
    12c8:	7b c0       	rjmp	.+246    	; 0x13c0 <change_password+0x87a>
        {
        	Clear_Lcd();
    12ca:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
        	Row_Col_string(0, 0 , "repeat again");
    12ce:	2e ea       	ldi	r18, 0xAE	; 174
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	a9 01       	movw	r20, r18
    12d8:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	aa e7       	ldi	r26, 0x7A	; 122
    12e2:	b4 e4       	ldi	r27, 0x44	; 68
    12e4:	8b 87       	std	Y+11, r24	; 0x0b
    12e6:	9c 87       	std	Y+12, r25	; 0x0c
    12e8:	ad 87       	std	Y+13, r26	; 0x0d
    12ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	4a e7       	ldi	r20, 0x7A	; 122
    12fa:	53 e4       	ldi	r21, 0x43	; 67
    12fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	8f 83       	std	Y+7, r24	; 0x07
    1306:	98 87       	std	Y+8, r25	; 0x08
    1308:	a9 87       	std	Y+9, r26	; 0x09
    130a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    130c:	6f 81       	ldd	r22, Y+7	; 0x07
    130e:	78 85       	ldd	r23, Y+8	; 0x08
    1310:	89 85       	ldd	r24, Y+9	; 0x09
    1312:	9a 85       	ldd	r25, Y+10	; 0x0a
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e8       	ldi	r20, 0x80	; 128
    131a:	5f e3       	ldi	r21, 0x3F	; 63
    131c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1320:	88 23       	and	r24, r24
    1322:	2c f4       	brge	.+10     	; 0x132e <change_password+0x7e8>
		__ticks = 1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
    132c:	3f c0       	rjmp	.+126    	; 0x13ac <change_password+0x866>
	else if (__tmp > 65535)
    132e:	6f 81       	ldd	r22, Y+7	; 0x07
    1330:	78 85       	ldd	r23, Y+8	; 0x08
    1332:	89 85       	ldd	r24, Y+9	; 0x09
    1334:	9a 85       	ldd	r25, Y+10	; 0x0a
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	3f ef       	ldi	r19, 0xFF	; 255
    133a:	4f e7       	ldi	r20, 0x7F	; 127
    133c:	57 e4       	ldi	r21, 0x47	; 71
    133e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1342:	18 16       	cp	r1, r24
    1344:	4c f5       	brge	.+82     	; 0x1398 <change_password+0x852>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1346:	6b 85       	ldd	r22, Y+11	; 0x0b
    1348:	7c 85       	ldd	r23, Y+12	; 0x0c
    134a:	8d 85       	ldd	r24, Y+13	; 0x0d
    134c:	9e 85       	ldd	r25, Y+14	; 0x0e
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e2       	ldi	r20, 0x20	; 32
    1354:	51 e4       	ldi	r21, 0x41	; 65
    1356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9e 83       	std	Y+6, r25	; 0x06
    136c:	8d 83       	std	Y+5, r24	; 0x05
    136e:	0f c0       	rjmp	.+30     	; 0x138e <change_password+0x848>
    1370:	89 e1       	ldi	r24, 0x19	; 25
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	9c 83       	std	Y+4, r25	; 0x04
    1376:	8b 83       	std	Y+3, r24	; 0x03
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <change_password+0x836>
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	9e 83       	std	Y+6, r25	; 0x06
    138c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138e:	8d 81       	ldd	r24, Y+5	; 0x05
    1390:	9e 81       	ldd	r25, Y+6	; 0x06
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	69 f7       	brne	.-38     	; 0x1370 <change_password+0x82a>
    1396:	14 c0       	rjmp	.+40     	; 0x13c0 <change_password+0x87a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1398:	6f 81       	ldd	r22, Y+7	; 0x07
    139a:	78 85       	ldd	r23, Y+8	; 0x08
    139c:	89 85       	ldd	r24, Y+9	; 0x09
    139e:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	9e 83       	std	Y+6, r25	; 0x06
    13aa:	8d 83       	std	Y+5, r24	; 0x05
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
    13ae:	9e 81       	ldd	r25, Y+6	; 0x06
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	9a 81       	ldd	r25, Y+2	; 0x02
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <change_password+0x872>
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
        	_delay_ms(1000);
        }

	}

}
    13c0:	ce 58       	subi	r28, 0x8E	; 142
    13c2:	df 4f       	sbci	r29, 0xFF	; 255
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	08 95       	ret

000013d8 <Open_Door>:
 * but if user enter wrong password MC2 will send F then message"false password" will be showed on lcd for 1 sec
 * if user try 2 times to enter wrong password ,message "System Locked" showed on lcd and system will enter in infinite loop
 */

void Open_Door()
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	ea 97       	sbiw	r28, 0x3a	; 58
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61

	uint8 str_written[16];
	Clear_Lcd();
    13ec:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
	Row_Col_string(0, 0 , "Enter Password");
    13f0:	2b eb       	ldi	r18, 0xBB	; 187
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	a9 01       	movw	r20, r18
    13fa:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
	key_pressed(str_written);
    13fe:	ce 01       	movw	r24, r28
    1400:	8b 96       	adiw	r24, 0x2b	; 43
    1402:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <key_pressed>
	send_byte(0x12);/*send it to another mc to be sure there is synchronization between 2 mc*/
    1406:	82 e1       	ldi	r24, 0x12	; 18
    1408:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
	send_string(str_written);/*you send the password (old password)that is written(using keypad) to another mc to check it*/
    140c:	ce 01       	movw	r24, r28
    140e:	8b 96       	adiw	r24, 0x2b	; 43
    1410:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <send_string>
	Clear_Lcd();
    1414:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
	send_byte(0x13);
    1418:	83 e1       	ldi	r24, 0x13	; 19
    141a:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	a8 e4       	ldi	r26, 0x48	; 72
    1424:	b3 e4       	ldi	r27, 0x43	; 67
    1426:	8f a3       	std	Y+39, r24	; 0x27
    1428:	98 a7       	std	Y+40, r25	; 0x28
    142a:	a9 a7       	std	Y+41, r26	; 0x29
    142c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142e:	6f a1       	ldd	r22, Y+39	; 0x27
    1430:	78 a5       	ldd	r23, Y+40	; 0x28
    1432:	89 a5       	ldd	r24, Y+41	; 0x29
    1434:	9a a5       	ldd	r25, Y+42	; 0x2a
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	4a e7       	ldi	r20, 0x7A	; 122
    143c:	53 e4       	ldi	r21, 0x43	; 67
    143e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	8b a3       	std	Y+35, r24	; 0x23
    1448:	9c a3       	std	Y+36, r25	; 0x24
    144a:	ad a3       	std	Y+37, r26	; 0x25
    144c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    144e:	6b a1       	ldd	r22, Y+35	; 0x23
    1450:	7c a1       	ldd	r23, Y+36	; 0x24
    1452:	8d a1       	ldd	r24, Y+37	; 0x25
    1454:	9e a1       	ldd	r25, Y+38	; 0x26
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e8       	ldi	r20, 0x80	; 128
    145c:	5f e3       	ldi	r21, 0x3F	; 63
    145e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1462:	88 23       	and	r24, r24
    1464:	2c f4       	brge	.+10     	; 0x1470 <Open_Door+0x98>
		__ticks = 1;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9a a3       	std	Y+34, r25	; 0x22
    146c:	89 a3       	std	Y+33, r24	; 0x21
    146e:	3f c0       	rjmp	.+126    	; 0x14ee <Open_Door+0x116>
	else if (__tmp > 65535)
    1470:	6b a1       	ldd	r22, Y+35	; 0x23
    1472:	7c a1       	ldd	r23, Y+36	; 0x24
    1474:	8d a1       	ldd	r24, Y+37	; 0x25
    1476:	9e a1       	ldd	r25, Y+38	; 0x26
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	3f ef       	ldi	r19, 0xFF	; 255
    147c:	4f e7       	ldi	r20, 0x7F	; 127
    147e:	57 e4       	ldi	r21, 0x47	; 71
    1480:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1484:	18 16       	cp	r1, r24
    1486:	4c f5       	brge	.+82     	; 0x14da <Open_Door+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1488:	6f a1       	ldd	r22, Y+39	; 0x27
    148a:	78 a5       	ldd	r23, Y+40	; 0x28
    148c:	89 a5       	ldd	r24, Y+41	; 0x29
    148e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e2       	ldi	r20, 0x20	; 32
    1496:	51 e4       	ldi	r21, 0x41	; 65
    1498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	9a a3       	std	Y+34, r25	; 0x22
    14ae:	89 a3       	std	Y+33, r24	; 0x21
    14b0:	0f c0       	rjmp	.+30     	; 0x14d0 <Open_Door+0xf8>
    14b2:	89 e1       	ldi	r24, 0x19	; 25
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	98 a3       	std	Y+32, r25	; 0x20
    14b8:	8f 8f       	std	Y+31, r24	; 0x1f
    14ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14bc:	98 a1       	ldd	r25, Y+32	; 0x20
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <Open_Door+0xe6>
    14c2:	98 a3       	std	Y+32, r25	; 0x20
    14c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c6:	89 a1       	ldd	r24, Y+33	; 0x21
    14c8:	9a a1       	ldd	r25, Y+34	; 0x22
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	9a a3       	std	Y+34, r25	; 0x22
    14ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d0:	89 a1       	ldd	r24, Y+33	; 0x21
    14d2:	9a a1       	ldd	r25, Y+34	; 0x22
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	69 f7       	brne	.-38     	; 0x14b2 <Open_Door+0xda>
    14d8:	14 c0       	rjmp	.+40     	; 0x1502 <Open_Door+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14da:	6b a1       	ldd	r22, Y+35	; 0x23
    14dc:	7c a1       	ldd	r23, Y+36	; 0x24
    14de:	8d a1       	ldd	r24, Y+37	; 0x25
    14e0:	9e a1       	ldd	r25, Y+38	; 0x26
    14e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	9a a3       	std	Y+34, r25	; 0x22
    14ec:	89 a3       	std	Y+33, r24	; 0x21
    14ee:	89 a1       	ldd	r24, Y+33	; 0x21
    14f0:	9a a1       	ldd	r25, Y+34	; 0x22
    14f2:	9e 8f       	std	Y+30, r25	; 0x1e
    14f4:	8d 8f       	std	Y+29, r24	; 0x1d
    14f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <Open_Door+0x122>
    14fe:	9e 8f       	std	Y+30, r25	; 0x1e
    1500:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);/*wait MC2 To process on the written password ..this mc will receive data in correct var */
	send_byte(0x14);/*MC is ready to complete the next instructions*/
    1502:	84 e1       	ldi	r24, 0x14	; 20
    1504:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
	//_delay_ms(200);/*new inst*/
	if(correct=='F')/*the received char from MC2 will be put in correct variable ..here correct is F so its false password*/
    1508:	80 91 47 01 	lds	r24, 0x0147
    150c:	86 34       	cpi	r24, 0x46	; 70
    150e:	09 f0       	breq	.+2      	; 0x1512 <Open_Door+0x13a>
    1510:	13 c1       	rjmp	.+550    	; 0x1738 <Open_Door+0x360>
	{
		while(correct!='x');/*wait until MC2 is be ready*/
    1512:	80 91 47 01 	lds	r24, 0x0147
    1516:	88 37       	cpi	r24, 0x78	; 120
    1518:	e1 f7       	brne	.-8      	; 0x1512 <Open_Door+0x13a>
        try++; /*increment try by 1 when user enter wrong password*/
    151a:	80 91 44 01 	lds	r24, 0x0144
    151e:	8f 5f       	subi	r24, 0xFF	; 255
    1520:	80 93 44 01 	sts	0x0144, r24
        if(try<2) /*when try less than 2 .."false password" showed*/
    1524:	80 91 44 01 	lds	r24, 0x0144
    1528:	82 30       	cpi	r24, 0x02	; 2
    152a:	08 f0       	brcs	.+2      	; 0x152e <Open_Door+0x156>
    152c:	79 c0       	rjmp	.+242    	; 0x1620 <Open_Door+0x248>
        {
    	    Row_Col_string(0, 0 , "False Password");
    152e:	2a ec       	ldi	r18, 0xCA	; 202
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	a9 01       	movw	r20, r18
    1538:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	aa e7       	ldi	r26, 0x7A	; 122
    1542:	b4 e4       	ldi	r27, 0x44	; 68
    1544:	89 8f       	std	Y+25, r24	; 0x19
    1546:	9a 8f       	std	Y+26, r25	; 0x1a
    1548:	ab 8f       	std	Y+27, r26	; 0x1b
    154a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154c:	69 8d       	ldd	r22, Y+25	; 0x19
    154e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1550:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1552:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	4a e7       	ldi	r20, 0x7A	; 122
    155a:	53 e4       	ldi	r21, 0x43	; 67
    155c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	8d 8b       	std	Y+21, r24	; 0x15
    1566:	9e 8b       	std	Y+22, r25	; 0x16
    1568:	af 8b       	std	Y+23, r26	; 0x17
    156a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    156c:	6d 89       	ldd	r22, Y+21	; 0x15
    156e:	7e 89       	ldd	r23, Y+22	; 0x16
    1570:	8f 89       	ldd	r24, Y+23	; 0x17
    1572:	98 8d       	ldd	r25, Y+24	; 0x18
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e8       	ldi	r20, 0x80	; 128
    157a:	5f e3       	ldi	r21, 0x3F	; 63
    157c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1580:	88 23       	and	r24, r24
    1582:	2c f4       	brge	.+10     	; 0x158e <Open_Door+0x1b6>
		__ticks = 1;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	9c 8b       	std	Y+20, r25	; 0x14
    158a:	8b 8b       	std	Y+19, r24	; 0x13
    158c:	3f c0       	rjmp	.+126    	; 0x160c <Open_Door+0x234>
	else if (__tmp > 65535)
    158e:	6d 89       	ldd	r22, Y+21	; 0x15
    1590:	7e 89       	ldd	r23, Y+22	; 0x16
    1592:	8f 89       	ldd	r24, Y+23	; 0x17
    1594:	98 8d       	ldd	r25, Y+24	; 0x18
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	3f ef       	ldi	r19, 0xFF	; 255
    159a:	4f e7       	ldi	r20, 0x7F	; 127
    159c:	57 e4       	ldi	r21, 0x47	; 71
    159e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a2:	18 16       	cp	r1, r24
    15a4:	4c f5       	brge	.+82     	; 0x15f8 <Open_Door+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a6:	69 8d       	ldd	r22, Y+25	; 0x19
    15a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	40 e2       	ldi	r20, 0x20	; 32
    15b4:	51 e4       	ldi	r21, 0x41	; 65
    15b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	bc 01       	movw	r22, r24
    15c0:	cd 01       	movw	r24, r26
    15c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	9c 8b       	std	Y+20, r25	; 0x14
    15cc:	8b 8b       	std	Y+19, r24	; 0x13
    15ce:	0f c0       	rjmp	.+30     	; 0x15ee <Open_Door+0x216>
    15d0:	89 e1       	ldi	r24, 0x19	; 25
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9a 8b       	std	Y+18, r25	; 0x12
    15d6:	89 8b       	std	Y+17, r24	; 0x11
    15d8:	89 89       	ldd	r24, Y+17	; 0x11
    15da:	9a 89       	ldd	r25, Y+18	; 0x12
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	f1 f7       	brne	.-4      	; 0x15dc <Open_Door+0x204>
    15e0:	9a 8b       	std	Y+18, r25	; 0x12
    15e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e4:	8b 89       	ldd	r24, Y+19	; 0x13
    15e6:	9c 89       	ldd	r25, Y+20	; 0x14
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	9c 8b       	std	Y+20, r25	; 0x14
    15ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ee:	8b 89       	ldd	r24, Y+19	; 0x13
    15f0:	9c 89       	ldd	r25, Y+20	; 0x14
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	69 f7       	brne	.-38     	; 0x15d0 <Open_Door+0x1f8>
    15f6:	14 c0       	rjmp	.+40     	; 0x1620 <Open_Door+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f8:	6d 89       	ldd	r22, Y+21	; 0x15
    15fa:	7e 89       	ldd	r23, Y+22	; 0x16
    15fc:	8f 89       	ldd	r24, Y+23	; 0x17
    15fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9c 8b       	std	Y+20, r25	; 0x14
    160a:	8b 8b       	std	Y+19, r24	; 0x13
    160c:	8b 89       	ldd	r24, Y+19	; 0x13
    160e:	9c 89       	ldd	r25, Y+20	; 0x14
    1610:	98 8b       	std	Y+16, r25	; 0x10
    1612:	8f 87       	std	Y+15, r24	; 0x0f
    1614:	8f 85       	ldd	r24, Y+15	; 0x0f
    1616:	98 89       	ldd	r25, Y+16	; 0x10
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	f1 f7       	brne	.-4      	; 0x1618 <Open_Door+0x240>
    161c:	98 8b       	std	Y+16, r25	; 0x10
    161e:	8f 87       	std	Y+15, r24	; 0x0f
    	    _delay_ms(1000);
        }
	    if(try==2)/*when user try enter wrong password 2 time try =2 ..then "system locked " showed for 1 min on lcd*/
    1620:	80 91 44 01 	lds	r24, 0x0144
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	09 f0       	breq	.+2      	; 0x162a <Open_Door+0x252>
    1628:	aa c0       	rjmp	.+340    	; 0x177e <Open_Door+0x3a6>
	    {
		    try=0; /*put try = 0 */
    162a:	10 92 44 01 	sts	0x0144, r1
		    Clear_Lcd();
    162e:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
		    send_byte(0x10);/*send that to MC2 to make synchronization together*/
    1632:	80 e1       	ldi	r24, 0x10	; 16
    1634:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
		    while(correct !='A');/*when A is received that mean alarm will be worked and show msg*/
    1638:	80 91 47 01 	lds	r24, 0x0147
    163c:	81 34       	cpi	r24, 0x41	; 65
    163e:	e1 f7       	brne	.-8      	; 0x1638 <Open_Door+0x260>
		    Row_Col_string(0, 0 , "System Locked");
    1640:	29 ed       	ldi	r18, 0xD9	; 217
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	a9 01       	movw	r20, r18
    164a:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e6       	ldi	r25, 0x60	; 96
    1652:	aa e6       	ldi	r26, 0x6A	; 106
    1654:	b7 e4       	ldi	r27, 0x47	; 71
    1656:	8b 87       	std	Y+11, r24	; 0x0b
    1658:	9c 87       	std	Y+12, r25	; 0x0c
    165a:	ad 87       	std	Y+13, r26	; 0x0d
    165c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1660:	7c 85       	ldd	r23, Y+12	; 0x0c
    1662:	8d 85       	ldd	r24, Y+13	; 0x0d
    1664:	9e 85       	ldd	r25, Y+14	; 0x0e
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	4a e7       	ldi	r20, 0x7A	; 122
    166c:	53 e4       	ldi	r21, 0x43	; 67
    166e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	8f 83       	std	Y+7, r24	; 0x07
    1678:	98 87       	std	Y+8, r25	; 0x08
    167a:	a9 87       	std	Y+9, r26	; 0x09
    167c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    167e:	6f 81       	ldd	r22, Y+7	; 0x07
    1680:	78 85       	ldd	r23, Y+8	; 0x08
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e8       	ldi	r20, 0x80	; 128
    168c:	5f e3       	ldi	r21, 0x3F	; 63
    168e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1692:	88 23       	and	r24, r24
    1694:	2c f4       	brge	.+10     	; 0x16a0 <Open_Door+0x2c8>
		__ticks = 1;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	9e 83       	std	Y+6, r25	; 0x06
    169c:	8d 83       	std	Y+5, r24	; 0x05
    169e:	3f c0       	rjmp	.+126    	; 0x171e <Open_Door+0x346>
	else if (__tmp > 65535)
    16a0:	6f 81       	ldd	r22, Y+7	; 0x07
    16a2:	78 85       	ldd	r23, Y+8	; 0x08
    16a4:	89 85       	ldd	r24, Y+9	; 0x09
    16a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	3f ef       	ldi	r19, 0xFF	; 255
    16ac:	4f e7       	ldi	r20, 0x7F	; 127
    16ae:	57 e4       	ldi	r21, 0x47	; 71
    16b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b4:	18 16       	cp	r1, r24
    16b6:	4c f5       	brge	.+82     	; 0x170a <Open_Door+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    16bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16be:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e2       	ldi	r20, 0x20	; 32
    16c6:	51 e4       	ldi	r21, 0x41	; 65
    16c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	9e 83       	std	Y+6, r25	; 0x06
    16de:	8d 83       	std	Y+5, r24	; 0x05
    16e0:	0f c0       	rjmp	.+30     	; 0x1700 <Open_Door+0x328>
    16e2:	89 e1       	ldi	r24, 0x19	; 25
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	9c 83       	std	Y+4, r25	; 0x04
    16e8:	8b 83       	std	Y+3, r24	; 0x03
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	9c 81       	ldd	r25, Y+4	; 0x04
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <Open_Door+0x316>
    16f2:	9c 83       	std	Y+4, r25	; 0x04
    16f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	9e 81       	ldd	r25, Y+6	; 0x06
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	9e 81       	ldd	r25, Y+6	; 0x06
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	69 f7       	brne	.-38     	; 0x16e2 <Open_Door+0x30a>
    1708:	14 c0       	rjmp	.+40     	; 0x1732 <Open_Door+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170a:	6f 81       	ldd	r22, Y+7	; 0x07
    170c:	78 85       	ldd	r23, Y+8	; 0x08
    170e:	89 85       	ldd	r24, Y+9	; 0x09
    1710:	9a 85       	ldd	r25, Y+10	; 0x0a
    1712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	9e 83       	std	Y+6, r25	; 0x06
    171c:	8d 83       	std	Y+5, r24	; 0x05
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	9a 83       	std	Y+2, r25	; 0x02
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	9a 81       	ldd	r25, Y+2	; 0x02
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	f1 f7       	brne	.-4      	; 0x172a <Open_Door+0x352>
    172e:	9a 83       	std	Y+2, r25	; 0x02
    1730:	89 83       	std	Y+1, r24	; 0x01
		    _delay_ms(60000);
		    Clear_Lcd();
    1732:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
    1736:	23 c0       	rjmp	.+70     	; 0x177e <Open_Door+0x3a6>
		    //while(1);
	    }


	}
	else if(correct =='T')
    1738:	80 91 47 01 	lds	r24, 0x0147
    173c:	84 35       	cpi	r24, 0x54	; 84
    173e:	f9 f4       	brne	.+62     	; 0x177e <Open_Door+0x3a6>
	{
		try=0; /*put try = 0 here because if user  write a password wrong at first time */
    1740:	10 92 44 01 	sts	0x0144, r1
		send_byte(0x10);/*send it to another mc to be sure there is synchronization between the two Micro Controllers */
    1744:	80 e1       	ldi	r24, 0x10	; 16
    1746:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
		while(correct!='o');/*wait until o is received that mean door will be opened*/
    174a:	80 91 47 01 	lds	r24, 0x0147
    174e:	8f 36       	cpi	r24, 0x6F	; 111
    1750:	e1 f7       	brne	.-8      	; 0x174a <Open_Door+0x372>
		Row_Col_string(0, 0 , "Door Opened");
    1752:	27 ee       	ldi	r18, 0xE7	; 231
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	a9 01       	movw	r20, r18
    175c:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
		while(correct!='c');
    1760:	80 91 47 01 	lds	r24, 0x0147
    1764:	83 36       	cpi	r24, 0x63	; 99
    1766:	e1 f7       	brne	.-8      	; 0x1760 <Open_Door+0x388>
		Row_Col_string(0, 0 , "Door Closed");
    1768:	23 ef       	ldi	r18, 0xF3	; 243
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	a9 01       	movw	r20, r18
    1772:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
		while(correct!='s');
    1776:	80 91 47 01 	lds	r24, 0x0147
    177a:	83 37       	cpi	r24, 0x73	; 115
    177c:	e1 f7       	brne	.-8      	; 0x1776 <Open_Door+0x39e>



	}

}
    177e:	ea 96       	adiw	r28, 0x3a	; 58
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <password_first_time>:

/*its executed one time in that system(ask user to make password of door) ..it send the new password to MC2
 * to store it in EEPROM
 */
uint8 password_first_time()
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	6e 97       	sbiw	r28, 0x1e	; 30
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
	uint8 str_written[16];
	Row_Col_string(0, 0 , "enter new pass");
    17a4:	2e e7       	ldi	r18, 0x7E	; 126
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	a9 01       	movw	r20, r18
    17ae:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
	key_pressed(str_written);
    17b2:	ce 01       	movw	r24, r28
    17b4:	0f 96       	adiw	r24, 0x0f	; 15
    17b6:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <key_pressed>
	send_byte(0x11);/*send it to another mc to be sure there is synchronization between 2 mc*/
    17ba:	81 e1       	ldi	r24, 0x11	; 17
    17bc:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
	send_string(str_written);/*you send the password that is written(using keypad) to another mc to check it*/
    17c0:	ce 01       	movw	r24, r28
    17c2:	0f 96       	adiw	r24, 0x0f	; 15
    17c4:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <send_string>
	Clear_Lcd();
    17c8:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
	Row_Col_string(0, 0 , "re-enter pass");
    17cc:	2f ef       	ldi	r18, 0xFF	; 255
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	a9 01       	movw	r20, r18
    17d6:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
    key_pressed(str_written);
    17da:	ce 01       	movw	r24, r28
    17dc:	0f 96       	adiw	r24, 0x0f	; 15
    17de:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <key_pressed>
	send_byte(0x11);/*send it to another mc to be sure there is synchronization between 2 mc*/
    17e2:	81 e1       	ldi	r24, 0x11	; 17
    17e4:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
	send_string(str_written);/*you send the password that is written(using keypad) to another mc to check it*/
    17e8:	ce 01       	movw	r24, r28
    17ea:	0f 96       	adiw	r24, 0x0f	; 15
    17ec:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <send_string>
	send_byte(0x15);
    17f0:	85 e1       	ldi	r24, 0x15	; 21
    17f2:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
	Clear_Lcd();
    17f6:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a6 e9       	ldi	r26, 0x96	; 150
    1800:	b3 e4       	ldi	r27, 0x43	; 67
    1802:	8b 87       	std	Y+11, r24	; 0x0b
    1804:	9c 87       	std	Y+12, r25	; 0x0c
    1806:	ad 87       	std	Y+13, r26	; 0x0d
    1808:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180a:	6b 85       	ldd	r22, Y+11	; 0x0b
    180c:	7c 85       	ldd	r23, Y+12	; 0x0c
    180e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1810:	9e 85       	ldd	r25, Y+14	; 0x0e
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	4a e7       	ldi	r20, 0x7A	; 122
    1818:	53 e4       	ldi	r21, 0x43	; 67
    181a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	8f 83       	std	Y+7, r24	; 0x07
    1824:	98 87       	std	Y+8, r25	; 0x08
    1826:	a9 87       	std	Y+9, r26	; 0x09
    1828:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    182a:	6f 81       	ldd	r22, Y+7	; 0x07
    182c:	78 85       	ldd	r23, Y+8	; 0x08
    182e:	89 85       	ldd	r24, Y+9	; 0x09
    1830:	9a 85       	ldd	r25, Y+10	; 0x0a
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e8       	ldi	r20, 0x80	; 128
    1838:	5f e3       	ldi	r21, 0x3F	; 63
    183a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183e:	88 23       	and	r24, r24
    1840:	2c f4       	brge	.+10     	; 0x184c <password_first_time+0xbc>
		__ticks = 1;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	9e 83       	std	Y+6, r25	; 0x06
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	3f c0       	rjmp	.+126    	; 0x18ca <password_first_time+0x13a>
	else if (__tmp > 65535)
    184c:	6f 81       	ldd	r22, Y+7	; 0x07
    184e:	78 85       	ldd	r23, Y+8	; 0x08
    1850:	89 85       	ldd	r24, Y+9	; 0x09
    1852:	9a 85       	ldd	r25, Y+10	; 0x0a
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	3f ef       	ldi	r19, 0xFF	; 255
    1858:	4f e7       	ldi	r20, 0x7F	; 127
    185a:	57 e4       	ldi	r21, 0x47	; 71
    185c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1860:	18 16       	cp	r1, r24
    1862:	4c f5       	brge	.+82     	; 0x18b6 <password_first_time+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1864:	6b 85       	ldd	r22, Y+11	; 0x0b
    1866:	7c 85       	ldd	r23, Y+12	; 0x0c
    1868:	8d 85       	ldd	r24, Y+13	; 0x0d
    186a:	9e 85       	ldd	r25, Y+14	; 0x0e
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e2       	ldi	r20, 0x20	; 32
    1872:	51 e4       	ldi	r21, 0x41	; 65
    1874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	bc 01       	movw	r22, r24
    187e:	cd 01       	movw	r24, r26
    1880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	9e 83       	std	Y+6, r25	; 0x06
    188a:	8d 83       	std	Y+5, r24	; 0x05
    188c:	0f c0       	rjmp	.+30     	; 0x18ac <password_first_time+0x11c>
    188e:	89 e1       	ldi	r24, 0x19	; 25
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9c 83       	std	Y+4, r25	; 0x04
    1894:	8b 83       	std	Y+3, r24	; 0x03
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <password_first_time+0x10a>
    189e:	9c 83       	std	Y+4, r25	; 0x04
    18a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a2:	8d 81       	ldd	r24, Y+5	; 0x05
    18a4:	9e 81       	ldd	r25, Y+6	; 0x06
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	69 f7       	brne	.-38     	; 0x188e <password_first_time+0xfe>
    18b4:	14 c0       	rjmp	.+40     	; 0x18de <password_first_time+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b6:	6f 81       	ldd	r22, Y+7	; 0x07
    18b8:	78 85       	ldd	r23, Y+8	; 0x08
    18ba:	89 85       	ldd	r24, Y+9	; 0x09
    18bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8d 83       	std	Y+5, r24	; 0x05
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	9e 81       	ldd	r25, Y+6	; 0x06
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	9a 81       	ldd	r25, Y+2	; 0x02
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <password_first_time+0x146>
    18da:	9a 83       	std	Y+2, r25	; 0x02
    18dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);

	//while(correct!=0x11);
	//_delay_ms(200);
	return correct; /* correct is T or F depends on if user make password correctly or not*/
    18de:	80 91 47 01 	lds	r24, 0x0147

}
    18e2:	6e 96       	adiw	r28, 0x1e	; 30
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <key_pressed>:
/*this function is responsible for store the keys pressed on array str_written*/
void key_pressed(uint8 *str_written)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	a0 97       	sbiw	r28, 0x20	; 32
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	98 a3       	std	Y+32, r25	; 0x20
    190a:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 i=0;/*i indicate many of times you pressed on keypad when you write a password*/
    190c:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 key;
	/*this function used to determine the location of cursor on lcd to see the char on lcd
	 * 1,0  mean write on row number 1 and column number 0 on lcd
	 */
	Cursor_Location(1 , 0);
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <Cursor_Location>
	key= keypad_getPressedKey();
    1916:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <keypad_getPressedKey>
    191a:	8d 8f       	std	Y+29, r24	; 0x1d
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	aa ef       	ldi	r26, 0xFA	; 250
    1922:	b3 e4       	ldi	r27, 0x43	; 67
    1924:	89 8f       	std	Y+25, r24	; 0x19
    1926:	9a 8f       	std	Y+26, r25	; 0x1a
    1928:	ab 8f       	std	Y+27, r26	; 0x1b
    192a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192c:	69 8d       	ldd	r22, Y+25	; 0x19
    192e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1930:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1932:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	4a e7       	ldi	r20, 0x7A	; 122
    193a:	53 e4       	ldi	r21, 0x43	; 67
    193c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	8d 8b       	std	Y+21, r24	; 0x15
    1946:	9e 8b       	std	Y+22, r25	; 0x16
    1948:	af 8b       	std	Y+23, r26	; 0x17
    194a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    194c:	6d 89       	ldd	r22, Y+21	; 0x15
    194e:	7e 89       	ldd	r23, Y+22	; 0x16
    1950:	8f 89       	ldd	r24, Y+23	; 0x17
    1952:	98 8d       	ldd	r25, Y+24	; 0x18
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e8       	ldi	r20, 0x80	; 128
    195a:	5f e3       	ldi	r21, 0x3F	; 63
    195c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1960:	88 23       	and	r24, r24
    1962:	2c f4       	brge	.+10     	; 0x196e <key_pressed+0x7a>
		__ticks = 1;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9c 8b       	std	Y+20, r25	; 0x14
    196a:	8b 8b       	std	Y+19, r24	; 0x13
    196c:	3f c0       	rjmp	.+126    	; 0x19ec <key_pressed+0xf8>
	else if (__tmp > 65535)
    196e:	6d 89       	ldd	r22, Y+21	; 0x15
    1970:	7e 89       	ldd	r23, Y+22	; 0x16
    1972:	8f 89       	ldd	r24, Y+23	; 0x17
    1974:	98 8d       	ldd	r25, Y+24	; 0x18
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	3f ef       	ldi	r19, 0xFF	; 255
    197a:	4f e7       	ldi	r20, 0x7F	; 127
    197c:	57 e4       	ldi	r21, 0x47	; 71
    197e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1982:	18 16       	cp	r1, r24
    1984:	4c f5       	brge	.+82     	; 0x19d8 <key_pressed+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1986:	69 8d       	ldd	r22, Y+25	; 0x19
    1988:	7a 8d       	ldd	r23, Y+26	; 0x1a
    198a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	40 e2       	ldi	r20, 0x20	; 32
    1994:	51 e4       	ldi	r21, 0x41	; 65
    1996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	bc 01       	movw	r22, r24
    19a0:	cd 01       	movw	r24, r26
    19a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	9c 8b       	std	Y+20, r25	; 0x14
    19ac:	8b 8b       	std	Y+19, r24	; 0x13
    19ae:	0f c0       	rjmp	.+30     	; 0x19ce <key_pressed+0xda>
    19b0:	89 e1       	ldi	r24, 0x19	; 25
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	9a 8b       	std	Y+18, r25	; 0x12
    19b6:	89 8b       	std	Y+17, r24	; 0x11
    19b8:	89 89       	ldd	r24, Y+17	; 0x11
    19ba:	9a 89       	ldd	r25, Y+18	; 0x12
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	f1 f7       	brne	.-4      	; 0x19bc <key_pressed+0xc8>
    19c0:	9a 8b       	std	Y+18, r25	; 0x12
    19c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c4:	8b 89       	ldd	r24, Y+19	; 0x13
    19c6:	9c 89       	ldd	r25, Y+20	; 0x14
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	9c 8b       	std	Y+20, r25	; 0x14
    19cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ce:	8b 89       	ldd	r24, Y+19	; 0x13
    19d0:	9c 89       	ldd	r25, Y+20	; 0x14
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	69 f7       	brne	.-38     	; 0x19b0 <key_pressed+0xbc>
    19d6:	a3 c0       	rjmp	.+326    	; 0x1b1e <key_pressed+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d8:	6d 89       	ldd	r22, Y+21	; 0x15
    19da:	7e 89       	ldd	r23, Y+22	; 0x16
    19dc:	8f 89       	ldd	r24, Y+23	; 0x17
    19de:	98 8d       	ldd	r25, Y+24	; 0x18
    19e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	9c 8b       	std	Y+20, r25	; 0x14
    19ea:	8b 8b       	std	Y+19, r24	; 0x13
    19ec:	8b 89       	ldd	r24, Y+19	; 0x13
    19ee:	9c 89       	ldd	r25, Y+20	; 0x14
    19f0:	98 8b       	std	Y+16, r25	; 0x10
    19f2:	8f 87       	std	Y+15, r24	; 0x0f
    19f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f6:	98 89       	ldd	r25, Y+16	; 0x10
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <key_pressed+0x104>
    19fc:	98 8b       	std	Y+16, r25	; 0x10
    19fe:	8f 87       	std	Y+15, r24	; 0x0f
    1a00:	8e c0       	rjmp	.+284    	; 0x1b1e <key_pressed+0x22a>
	_delay_ms(500);
	while( key != '=')/*when you pressed on '=' on keypad as you pressed on enter */
	{
		if(key==13) /*if you pressed on key number 13 that cause clear character on lcd*/
    1a02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a04:	8d 30       	cpi	r24, 0x0D	; 13
    1a06:	31 f4       	brne	.+12     	; 0x1a14 <key_pressed+0x120>
		{
		    clear_char();/*this function responsible for clear a character on lcd*/
    1a08:	0e 94 88 12 	call	0x2510	; 0x2510 <clear_char>
			i--;  /*decrement i that mean the number of pressed on keypad is decremented*/
    1a0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a0e:	81 50       	subi	r24, 0x01	; 1
    1a10:	8e 8f       	std	Y+30, r24	; 0x1e
    1a12:	10 c0       	rjmp	.+32     	; 0x1a34 <key_pressed+0x140>
		}
		else
		{
			/*store keys pressed at array*/
			str_written[i]=key;
    1a14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a1e:	fc 01       	movw	r30, r24
    1a20:	e2 0f       	add	r30, r18
    1a22:	f3 1f       	adc	r31, r19
    1a24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a26:	80 83       	st	Z, r24
			/*show '*' on lcd instead of showing actual characters because we write password*/
			Lcd_Send_Data('*');
    1a28:	8a e2       	ldi	r24, 0x2A	; 42
    1a2a:	0e 94 57 10 	call	0x20ae	; 0x20ae <Lcd_Send_Data>
			//Lcd_Send_Data(key);
			i++;
    1a2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a30:	8f 5f       	subi	r24, 0xFF	; 255
    1a32:	8e 8f       	std	Y+30, r24	; 0x1e
		}
			key= keypad_getPressedKey();
    1a34:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <keypad_getPressedKey>
    1a38:	8d 8f       	std	Y+29, r24	; 0x1d
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	aa ef       	ldi	r26, 0xFA	; 250
    1a40:	b3 e4       	ldi	r27, 0x43	; 67
    1a42:	8b 87       	std	Y+11, r24	; 0x0b
    1a44:	9c 87       	std	Y+12, r25	; 0x0c
    1a46:	ad 87       	std	Y+13, r26	; 0x0d
    1a48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	4a e7       	ldi	r20, 0x7A	; 122
    1a58:	53 e4       	ldi	r21, 0x43	; 67
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	8f 83       	std	Y+7, r24	; 0x07
    1a64:	98 87       	std	Y+8, r25	; 0x08
    1a66:	a9 87       	std	Y+9, r26	; 0x09
    1a68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6c:	78 85       	ldd	r23, Y+8	; 0x08
    1a6e:	89 85       	ldd	r24, Y+9	; 0x09
    1a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	2c f4       	brge	.+10     	; 0x1a8c <key_pressed+0x198>
		__ticks = 1;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	3f c0       	rjmp	.+126    	; 0x1b0a <key_pressed+0x216>
	else if (__tmp > 65535)
    1a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8e:	78 85       	ldd	r23, Y+8	; 0x08
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	3f ef       	ldi	r19, 0xFF	; 255
    1a98:	4f e7       	ldi	r20, 0x7F	; 127
    1a9a:	57 e4       	ldi	r21, 0x47	; 71
    1a9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa0:	18 16       	cp	r1, r24
    1aa2:	4c f5       	brge	.+82     	; 0x1af6 <key_pressed+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e2       	ldi	r20, 0x20	; 32
    1ab2:	51 e4       	ldi	r21, 0x41	; 65
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	bc 01       	movw	r22, r24
    1abe:	cd 01       	movw	r24, r26
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <key_pressed+0x1f8>
    1ace:	89 e1       	ldi	r24, 0x19	; 25
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9c 83       	std	Y+4, r25	; 0x04
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <key_pressed+0x1e6>
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	69 f7       	brne	.-38     	; 0x1ace <key_pressed+0x1da>
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <key_pressed+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	9a 83       	std	Y+2, r25	; 0x02
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <key_pressed+0x222>
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	89 83       	std	Y+1, r24	; 0x01
	 * 1,0  mean write on row number 1 and column number 0 on lcd
	 */
	Cursor_Location(1 , 0);
	key= keypad_getPressedKey();
	_delay_ms(500);
	while( key != '=')/*when you pressed on '=' on keypad as you pressed on enter */
    1b1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b20:	8d 33       	cpi	r24, 0x3D	; 61
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <key_pressed+0x232>
    1b24:	6e cf       	rjmp	.-292    	; 0x1a02 <key_pressed+0x10e>
		}
			key= keypad_getPressedKey();
			_delay_ms(500);
	 }
		/*i =0 mean ..i dont press any or pressed on '=' that mean enter after press it system process if that right password or not */
		if(i==0)
    1b26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b28:	88 23       	and	r24, r24
    1b2a:	69 f4       	brne	.+26     	; 0x1b46 <key_pressed+0x252>
		{
		    str_written[i]=key;
    1b2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b34:	98 a1       	ldd	r25, Y+32	; 0x20
    1b36:	fc 01       	movw	r30, r24
    1b38:	e2 0f       	add	r30, r18
    1b3a:	f3 1f       	adc	r31, r19
    1b3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b3e:	80 83       	st	Z, r24
		    i++;
    1b40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b42:	8f 5f       	subi	r24, 0xFF	; 255
    1b44:	8e 8f       	std	Y+30, r24	; 0x1e
		}
		str_written[i]='\0';/*null is the end of any array of characters*/
    1b46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b4e:	98 a1       	ldd	r25, Y+32	; 0x20
    1b50:	fc 01       	movw	r30, r24
    1b52:	e2 0f       	add	r30, r18
    1b54:	f3 1f       	adc	r31, r19
    1b56:	10 82       	st	Z, r1
}
    1b58:	a0 96       	adiw	r28, 0x20	; 32
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <keypad_getPressedKey>:


#include"keypad.h"

uint8 keypad_getPressedKey()
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <keypad_getPressedKey+0x6>
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
 while(1)
 {
	for(uint8 col =0 ; col <N_col ; col++)
    1b74:	1a 82       	std	Y+2, r1	; 0x02
    1b76:	4b c0       	rjmp	.+150    	; 0x1c0e <keypad_getPressedKey+0xa4>
	{
		KEY_PORT_DIR= (0b00010000<<col); // the first 4 pins in porta is input and by scanning one pin (one col is output)
    1b78:	ea e3       	ldi	r30, 0x3A	; 58
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	80 e1       	ldi	r24, 0x10	; 16
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <keypad_getPressedKey+0x22>
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	2a 95       	dec	r18
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <keypad_getPressedKey+0x1e>
    1b90:	80 83       	st	Z, r24
		KEY_PORT_OUT=(~0b00010000<<col); // the first 4 pins is internal pull up every iteration and one col only will be low at each iteration
    1b92:	eb e3       	ldi	r30, 0x3B	; 59
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	8f ee       	ldi	r24, 0xEF	; 239
    1b9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <keypad_getPressedKey+0x3e>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <keypad_getPressedKey+0x3a>
    1bac:	80 83       	st	Z, r24
		for(uint8 row =0 ; row < N_row ; row++)
    1bae:	19 82       	std	Y+1, r1	; 0x01
    1bb0:	28 c0       	rjmp	.+80     	; 0x1c02 <keypad_getPressedKey+0x98>
		{
			if(IS_BIT_CLEAR(KEY_PORT_IN,row))
    1bb2:	e9 e3       	ldi	r30, 0x39	; 57
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	a9 01       	movw	r20, r18
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <keypad_getPressedKey+0x60>
    1bc6:	55 95       	asr	r21
    1bc8:	47 95       	ror	r20
    1bca:	8a 95       	dec	r24
    1bcc:	e2 f7       	brpl	.-8      	; 0x1bc6 <keypad_getPressedKey+0x5c>
    1bce:	ca 01       	movw	r24, r20
    1bd0:	81 70       	andi	r24, 0x01	; 1
    1bd2:	90 70       	andi	r25, 0x00	; 0
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	91 f4       	brne	.+36     	; 0x1bfc <keypad_getPressedKey+0x92>

					return Keypad_4x3_adjustSwitchNumber((row*N_col)+col+1);
				}
                #elif(N_col==4)
				{
					return Keypad_4x4_adjustSwitchNumber((row*N_col)+col+1);
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	88 2f       	mov	r24, r24
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	98 2f       	mov	r25, r24
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	89 0f       	add	r24, r25
    1bec:	8f 5f       	subi	r24, 0xFF	; 255
    1bee:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <Keypad_4x4_adjustSwitchNumber>
			}
		}
	}

}
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret
 {
	for(uint8 col =0 ; col <N_col ; col++)
	{
		KEY_PORT_DIR= (0b00010000<<col); // the first 4 pins in porta is input and by scanning one pin (one col is output)
		KEY_PORT_OUT=(~0b00010000<<col); // the first 4 pins is internal pull up every iteration and one col only will be low at each iteration
		for(uint8 row =0 ; row < N_row ; row++)
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	8f 5f       	subi	r24, 0xFF	; 255
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	84 30       	cpi	r24, 0x04	; 4
    1c06:	a8 f2       	brcs	.-86     	; 0x1bb2 <keypad_getPressedKey+0x48>

uint8 keypad_getPressedKey()
{
 while(1)
 {
	for(uint8 col =0 ; col <N_col ; col++)
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	8f 5f       	subi	r24, 0xFF	; 255
    1c0c:	8a 83       	std	Y+2, r24	; 0x02
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	84 30       	cpi	r24, 0x04	; 4
    1c12:	08 f4       	brcc	.+2      	; 0x1c16 <keypad_getPressedKey+0xac>
    1c14:	b1 cf       	rjmp	.-158    	; 0x1b78 <keypad_getPressedKey+0xe>
    1c16:	ae cf       	rjmp	.-164    	; 0x1b74 <keypad_getPressedKey+0xa>

00001c18 <Keypad_4x4_adjustSwitchNumber>:
	}

#elif(N_col==4)

	uint8 Keypad_4x4_adjustSwitchNumber(uint8 num)
	{
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	00 d0       	rcall	.+0      	; 0x1c1e <Keypad_4x4_adjustSwitchNumber+0x6>
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <Keypad_4x4_adjustSwitchNumber+0x8>
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	89 83       	std	Y+1, r24	; 0x01
		/*here i return a char because i want to display this number on lcd and lcd display char that is 1 byte not integer(2 byte or 4 byte)*/
		switch(num)
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	3c 83       	std	Y+4, r19	; 0x04
    1c2e:	2b 83       	std	Y+3, r18	; 0x03
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	88 30       	cpi	r24, 0x08	; 8
    1c36:	91 05       	cpc	r25, r1
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <Keypad_4x4_adjustSwitchNumber+0x24>
    1c3a:	70 c0       	rjmp	.+224    	; 0x1d1c <Keypad_4x4_adjustSwitchNumber+0x104>
    1c3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c40:	29 30       	cpi	r18, 0x09	; 9
    1c42:	31 05       	cpc	r19, r1
    1c44:	5c f5       	brge	.+86     	; 0x1c9c <Keypad_4x4_adjustSwitchNumber+0x84>
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4a:	84 30       	cpi	r24, 0x04	; 4
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <Keypad_4x4_adjustSwitchNumber+0x3a>
    1c50:	59 c0       	rjmp	.+178    	; 0x1d04 <Keypad_4x4_adjustSwitchNumber+0xec>
    1c52:	2b 81       	ldd	r18, Y+3	; 0x03
    1c54:	3c 81       	ldd	r19, Y+4	; 0x04
    1c56:	25 30       	cpi	r18, 0x05	; 5
    1c58:	31 05       	cpc	r19, r1
    1c5a:	9c f4       	brge	.+38     	; 0x1c82 <Keypad_4x4_adjustSwitchNumber+0x6a>
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	82 30       	cpi	r24, 0x02	; 2
    1c62:	91 05       	cpc	r25, r1
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <Keypad_4x4_adjustSwitchNumber+0x50>
    1c66:	48 c0       	rjmp	.+144    	; 0x1cf8 <Keypad_4x4_adjustSwitchNumber+0xe0>
    1c68:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6c:	23 30       	cpi	r18, 0x03	; 3
    1c6e:	31 05       	cpc	r19, r1
    1c70:	0c f0       	brlt	.+2      	; 0x1c74 <Keypad_4x4_adjustSwitchNumber+0x5c>
    1c72:	45 c0       	rjmp	.+138    	; 0x1cfe <Keypad_4x4_adjustSwitchNumber+0xe6>
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <Keypad_4x4_adjustSwitchNumber+0x68>
    1c7e:	39 c0       	rjmp	.+114    	; 0x1cf2 <Keypad_4x4_adjustSwitchNumber+0xda>
    1c80:	68 c0       	rjmp	.+208    	; 0x1d52 <Keypad_4x4_adjustSwitchNumber+0x13a>
    1c82:	2b 81       	ldd	r18, Y+3	; 0x03
    1c84:	3c 81       	ldd	r19, Y+4	; 0x04
    1c86:	26 30       	cpi	r18, 0x06	; 6
    1c88:	31 05       	cpc	r19, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <Keypad_4x4_adjustSwitchNumber+0x76>
    1c8c:	41 c0       	rjmp	.+130    	; 0x1d10 <Keypad_4x4_adjustSwitchNumber+0xf8>
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	87 30       	cpi	r24, 0x07	; 7
    1c94:	91 05       	cpc	r25, r1
    1c96:	0c f0       	brlt	.+2      	; 0x1c9a <Keypad_4x4_adjustSwitchNumber+0x82>
    1c98:	3e c0       	rjmp	.+124    	; 0x1d16 <Keypad_4x4_adjustSwitchNumber+0xfe>
    1c9a:	37 c0       	rjmp	.+110    	; 0x1d0a <Keypad_4x4_adjustSwitchNumber+0xf2>
    1c9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca0:	2c 30       	cpi	r18, 0x0C	; 12
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <Keypad_4x4_adjustSwitchNumber+0x90>
    1ca6:	46 c0       	rjmp	.+140    	; 0x1d34 <Keypad_4x4_adjustSwitchNumber+0x11c>
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	8d 30       	cpi	r24, 0x0D	; 13
    1cae:	91 05       	cpc	r25, r1
    1cb0:	5c f4       	brge	.+22     	; 0x1cc8 <Keypad_4x4_adjustSwitchNumber+0xb0>
    1cb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb6:	2a 30       	cpi	r18, 0x0A	; 10
    1cb8:	31 05       	cpc	r19, r1
    1cba:	b1 f1       	breq	.+108    	; 0x1d28 <Keypad_4x4_adjustSwitchNumber+0x110>
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	8b 30       	cpi	r24, 0x0B	; 11
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	a4 f5       	brge	.+104    	; 0x1d2e <Keypad_4x4_adjustSwitchNumber+0x116>
    1cc6:	2d c0       	rjmp	.+90     	; 0x1d22 <Keypad_4x4_adjustSwitchNumber+0x10a>
    1cc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ccc:	2e 30       	cpi	r18, 0x0E	; 14
    1cce:	31 05       	cpc	r19, r1
    1cd0:	b9 f1       	breq	.+110    	; 0x1d40 <Keypad_4x4_adjustSwitchNumber+0x128>
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	8e 30       	cpi	r24, 0x0E	; 14
    1cd8:	91 05       	cpc	r25, r1
    1cda:	7c f1       	brlt	.+94     	; 0x1d3a <Keypad_4x4_adjustSwitchNumber+0x122>
    1cdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cde:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce0:	2f 30       	cpi	r18, 0x0F	; 15
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	81 f1       	breq	.+96     	; 0x1d46 <Keypad_4x4_adjustSwitchNumber+0x12e>
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cea:	80 31       	cpi	r24, 0x10	; 16
    1cec:	91 05       	cpc	r25, r1
    1cee:	71 f1       	breq	.+92     	; 0x1d4c <Keypad_4x4_adjustSwitchNumber+0x134>
    1cf0:	30 c0       	rjmp	.+96     	; 0x1d52 <Keypad_4x4_adjustSwitchNumber+0x13a>
	  {
		case 1 : return '7';
    1cf2:	97 e3       	ldi	r25, 0x37	; 55
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	2f c0       	rjmp	.+94     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
				 break;
		case 2 : return '8';
    1cf8:	28 e3       	ldi	r18, 0x38	; 56
    1cfa:	2a 83       	std	Y+2, r18	; 0x02
    1cfc:	2c c0       	rjmp	.+88     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
		         break;
		case 3 : return '9';
    1cfe:	39 e3       	ldi	r19, 0x39	; 57
    1d00:	3a 83       	std	Y+2, r19	; 0x02
    1d02:	29 c0       	rjmp	.+82     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
				 break;
		case 4 : return '/'; /*return ascii / */
    1d04:	8f e2       	ldi	r24, 0x2F	; 47
    1d06:	8a 83       	std	Y+2, r24	; 0x02
    1d08:	26 c0       	rjmp	.+76     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
				 break;
		case 5 : return '4';
    1d0a:	94 e3       	ldi	r25, 0x34	; 52
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	23 c0       	rjmp	.+70     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
				 break;
		case 6 : return '5';
    1d10:	25 e3       	ldi	r18, 0x35	; 53
    1d12:	2a 83       	std	Y+2, r18	; 0x02
    1d14:	20 c0       	rjmp	.+64     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
				 break;
		case 7 : return '6';
    1d16:	36 e3       	ldi	r19, 0x36	; 54
    1d18:	3a 83       	std	Y+2, r19	; 0x02
    1d1a:	1d c0       	rjmp	.+58     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
				 break;
		case 8 : return '*';
    1d1c:	8a e2       	ldi	r24, 0x2A	; 42
    1d1e:	8a 83       	std	Y+2, r24	; 0x02
    1d20:	1a c0       	rjmp	.+52     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
				 break;
		case 9 : return '1';
    1d22:	91 e3       	ldi	r25, 0x31	; 49
    1d24:	9a 83       	std	Y+2, r25	; 0x02
    1d26:	17 c0       	rjmp	.+46     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
		         break;
		case 10: return '2';
    1d28:	22 e3       	ldi	r18, 0x32	; 50
    1d2a:	2a 83       	std	Y+2, r18	; 0x02
    1d2c:	14 c0       	rjmp	.+40     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
				 break;
		case 11: return '3';
    1d2e:	33 e3       	ldi	r19, 0x33	; 51
    1d30:	3a 83       	std	Y+2, r19	; 0x02
    1d32:	11 c0       	rjmp	.+34     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
				 break;
		case 12: return '-'; /*return ascii of - */
    1d34:	8d e2       	ldi	r24, 0x2D	; 45
    1d36:	8a 83       	std	Y+2, r24	; 0x02
    1d38:	0e c0       	rjmp	.+28     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
				 break;
		case 13: return 13;   /* its just char we will use it ..for deleting a char on lcd..look at main.c file to know how delete a char */
    1d3a:	9d e0       	ldi	r25, 0x0D	; 13
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	0b c0       	rjmp	.+22     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
				 break;
		case 14: return '0';
    1d40:	20 e3       	ldi	r18, 0x30	; 48
    1d42:	2a 83       	std	Y+2, r18	; 0x02
    1d44:	08 c0       	rjmp	.+16     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
			     break;
		case 15: return '=';
    1d46:	3d e3       	ldi	r19, 0x3D	; 61
    1d48:	3a 83       	std	Y+2, r19	; 0x02
    1d4a:	05 c0       	rjmp	.+10     	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
				 break;
		case 16: return '+';
    1d4c:	8b e2       	ldi	r24, 0x2B	; 43
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <Keypad_4x4_adjustSwitchNumber+0x13e>
				 break;

	  }
		return 1;
    1d52:	91 e0       	ldi	r25, 0x01	; 1
    1d54:	9a 83       	std	Y+2, r25	; 0x02
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <Init_Lcd>:


#include "lcd.h"

void Init_Lcd()
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
     CTRL_PORT_DIR |= (1<<RS)|(1<<RW)|(1<<E); //rs,rw,e is output pins
    1d6e:	a1 e3       	ldi	r26, 0x31	; 49
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e1 e3       	ldi	r30, 0x31	; 49
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	80 67       	ori	r24, 0x70	; 112
    1d7a:	8c 93       	st	X, r24
	     PORT_DATA_DIR=0x0f;
         #endif
	     LCD_Send_Command(0x02); /*enable 4 bit mode in lcd*/
	     LCD_Send_Command(0x28); /*use 2 line +4 bit mode*/
     #elif(bit_mode==8 ) /*if we define bit mode is 8 */
	     PORT_DATA_DIR=0xff;      /* all port of data is output*/
    1d7c:	e4 e3       	ldi	r30, 0x34	; 52
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	8f ef       	ldi	r24, 0xFF	; 255
    1d82:	80 83       	st	Z, r24
	     LCD_Send_Command(0x38);
    1d84:	88 e3       	ldi	r24, 0x38	; 56
    1d86:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_Send_Command>
     #endif

	 LCD_Send_Command(0x0c); //enable cursor but hide it
    1d8a:	8c e0       	ldi	r24, 0x0C	; 12
    1d8c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_Send_Command>
	 Clear_Lcd(); //function to clear lcd
    1d90:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
}
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <LCD_Send_Command>:

/* this function to send command to lcd to execute it ..like clear lcd ,begin cursor, using bit mode of lcd ..etc*/
void LCD_Send_Command(uint8 command)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	ab 97       	sbiw	r28, 0x2b	; 43
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	8b a7       	std	Y+43, r24	; 0x2b

	 CLEAR_BIT(CTRL_PORT,RS); //RS=0 BECAUSE I WANT LCD TO EXECUTE COMMAND
    1db0:	a2 e3       	ldi	r26, 0x32	; 50
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e2 e3       	ldi	r30, 0x32	; 50
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	8f 7e       	andi	r24, 0xEF	; 239
    1dbc:	8c 93       	st	X, r24
	 CLEAR_BIT(CTRL_PORT,RW); //I WILL WRITE NOT READ ON LCD
    1dbe:	a2 e3       	ldi	r26, 0x32	; 50
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e2 e3       	ldi	r30, 0x32	; 50
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	8f 7d       	andi	r24, 0xDF	; 223
    1dca:	8c 93       	st	X, r24
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	a0 e8       	ldi	r26, 0x80	; 128
    1dd2:	bf e3       	ldi	r27, 0x3F	; 63
    1dd4:	8f a3       	std	Y+39, r24	; 0x27
    1dd6:	98 a7       	std	Y+40, r25	; 0x28
    1dd8:	a9 a7       	std	Y+41, r26	; 0x29
    1dda:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ddc:	6f a1       	ldd	r22, Y+39	; 0x27
    1dde:	78 a5       	ldd	r23, Y+40	; 0x28
    1de0:	89 a5       	ldd	r24, Y+41	; 0x29
    1de2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	4a e7       	ldi	r20, 0x7A	; 122
    1dea:	53 e4       	ldi	r21, 0x43	; 67
    1dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	8b a3       	std	Y+35, r24	; 0x23
    1df6:	9c a3       	std	Y+36, r25	; 0x24
    1df8:	ad a3       	std	Y+37, r26	; 0x25
    1dfa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dfc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dfe:	7c a1       	ldd	r23, Y+36	; 0x24
    1e00:	8d a1       	ldd	r24, Y+37	; 0x25
    1e02:	9e a1       	ldd	r25, Y+38	; 0x26
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e8       	ldi	r20, 0x80	; 128
    1e0a:	5f e3       	ldi	r21, 0x3F	; 63
    1e0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e10:	88 23       	and	r24, r24
    1e12:	2c f4       	brge	.+10     	; 0x1e1e <LCD_Send_Command+0x84>
		__ticks = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9a a3       	std	Y+34, r25	; 0x22
    1e1a:	89 a3       	std	Y+33, r24	; 0x21
    1e1c:	3f c0       	rjmp	.+126    	; 0x1e9c <LCD_Send_Command+0x102>
	else if (__tmp > 65535)
    1e1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e20:	7c a1       	ldd	r23, Y+36	; 0x24
    1e22:	8d a1       	ldd	r24, Y+37	; 0x25
    1e24:	9e a1       	ldd	r25, Y+38	; 0x26
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	3f ef       	ldi	r19, 0xFF	; 255
    1e2a:	4f e7       	ldi	r20, 0x7F	; 127
    1e2c:	57 e4       	ldi	r21, 0x47	; 71
    1e2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e32:	18 16       	cp	r1, r24
    1e34:	4c f5       	brge	.+82     	; 0x1e88 <LCD_Send_Command+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e36:	6f a1       	ldd	r22, Y+39	; 0x27
    1e38:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e2       	ldi	r20, 0x20	; 32
    1e44:	51 e4       	ldi	r21, 0x41	; 65
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	bc 01       	movw	r22, r24
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9a a3       	std	Y+34, r25	; 0x22
    1e5c:	89 a3       	std	Y+33, r24	; 0x21
    1e5e:	0f c0       	rjmp	.+30     	; 0x1e7e <LCD_Send_Command+0xe4>
    1e60:	89 e1       	ldi	r24, 0x19	; 25
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	98 a3       	std	Y+32, r25	; 0x20
    1e66:	8f 8f       	std	Y+31, r24	; 0x1f
    1e68:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e6a:	98 a1       	ldd	r25, Y+32	; 0x20
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <LCD_Send_Command+0xd2>
    1e70:	98 a3       	std	Y+32, r25	; 0x20
    1e72:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e74:	89 a1       	ldd	r24, Y+33	; 0x21
    1e76:	9a a1       	ldd	r25, Y+34	; 0x22
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	9a a3       	std	Y+34, r25	; 0x22
    1e7c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e80:	9a a1       	ldd	r25, Y+34	; 0x22
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	69 f7       	brne	.-38     	; 0x1e60 <LCD_Send_Command+0xc6>
    1e86:	14 c0       	rjmp	.+40     	; 0x1eb0 <LCD_Send_Command+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e88:	6b a1       	ldd	r22, Y+35	; 0x23
    1e8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	9a a3       	std	Y+34, r25	; 0x22
    1e9a:	89 a3       	std	Y+33, r24	; 0x21
    1e9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ea4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ea6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <LCD_Send_Command+0x10e>
    1eac:	9e 8f       	std	Y+30, r25	; 0x1e
    1eae:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(1);
	 SET_BIT(CTRL_PORT,E); //Enable lcd
    1eb0:	a2 e3       	ldi	r26, 0x32	; 50
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e2 e3       	ldi	r30, 0x32	; 50
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	80 64       	ori	r24, 0x40	; 64
    1ebc:	8c 93       	st	X, r24
        #endif
	 _delay_ms(1);
	 CLEAR_BIT(CTRL_PORT,E);
	 _delay_ms(1);
     #elif(bit_mode==8)/* if using bit mode 8*/
	    PORT_DATA_PATH=command; /*move all bits of command to port pc0..pc7*/
    1ebe:	e5 e3       	ldi	r30, 0x35	; 53
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec4:	80 83       	st	Z, r24
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 e8       	ldi	r26, 0x80	; 128
    1ecc:	bf e3       	ldi	r27, 0x3F	; 63
    1ece:	89 8f       	std	Y+25, r24	; 0x19
    1ed0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ed2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ed4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1edc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	4a e7       	ldi	r20, 0x7A	; 122
    1ee4:	53 e4       	ldi	r21, 0x43	; 67
    1ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	8d 8b       	std	Y+21, r24	; 0x15
    1ef0:	9e 8b       	std	Y+22, r25	; 0x16
    1ef2:	af 8b       	std	Y+23, r26	; 0x17
    1ef4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ef6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef8:	7e 89       	ldd	r23, Y+22	; 0x16
    1efa:	8f 89       	ldd	r24, Y+23	; 0x17
    1efc:	98 8d       	ldd	r25, Y+24	; 0x18
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <LCD_Send_Command+0x17e>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9c 8b       	std	Y+20, r25	; 0x14
    1f14:	8b 8b       	std	Y+19, r24	; 0x13
    1f16:	3f c0       	rjmp	.+126    	; 0x1f96 <LCD_Send_Command+0x1fc>
	else if (__tmp > 65535)
    1f18:	6d 89       	ldd	r22, Y+21	; 0x15
    1f1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	3f ef       	ldi	r19, 0xFF	; 255
    1f24:	4f e7       	ldi	r20, 0x7F	; 127
    1f26:	57 e4       	ldi	r21, 0x47	; 71
    1f28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	4c f5       	brge	.+82     	; 0x1f82 <LCD_Send_Command+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f30:	69 8d       	ldd	r22, Y+25	; 0x19
    1f32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e2       	ldi	r20, 0x20	; 32
    1f3e:	51 e4       	ldi	r21, 0x41	; 65
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9c 8b       	std	Y+20, r25	; 0x14
    1f56:	8b 8b       	std	Y+19, r24	; 0x13
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <LCD_Send_Command+0x1de>
    1f5a:	89 e1       	ldi	r24, 0x19	; 25
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9a 8b       	std	Y+18, r25	; 0x12
    1f60:	89 8b       	std	Y+17, r24	; 0x11
    1f62:	89 89       	ldd	r24, Y+17	; 0x11
    1f64:	9a 89       	ldd	r25, Y+18	; 0x12
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <LCD_Send_Command+0x1cc>
    1f6a:	9a 8b       	std	Y+18, r25	; 0x12
    1f6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f70:	9c 89       	ldd	r25, Y+20	; 0x14
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	9c 8b       	std	Y+20, r25	; 0x14
    1f76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f78:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	69 f7       	brne	.-38     	; 0x1f5a <LCD_Send_Command+0x1c0>
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <LCD_Send_Command+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f82:	6d 89       	ldd	r22, Y+21	; 0x15
    1f84:	7e 89       	ldd	r23, Y+22	; 0x16
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	9c 8b       	std	Y+20, r25	; 0x14
    1f94:	8b 8b       	std	Y+19, r24	; 0x13
    1f96:	8b 89       	ldd	r24, Y+19	; 0x13
    1f98:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9a:	98 8b       	std	Y+16, r25	; 0x10
    1f9c:	8f 87       	std	Y+15, r24	; 0x0f
    1f9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fa0:	98 89       	ldd	r25, Y+16	; 0x10
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_Send_Command+0x208>
    1fa6:	98 8b       	std	Y+16, r25	; 0x10
    1fa8:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(1);
		 CLEAR_BIT(CTRL_PORT,E);
    1faa:	a2 e3       	ldi	r26, 0x32	; 50
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e2 e3       	ldi	r30, 0x32	; 50
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	8f 7b       	andi	r24, 0xBF	; 191
    1fb6:	8c 93       	st	X, r24
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a0 e8       	ldi	r26, 0x80	; 128
    1fbe:	bf e3       	ldi	r27, 0x3F	; 63
    1fc0:	8b 87       	std	Y+11, r24	; 0x0b
    1fc2:	9c 87       	std	Y+12, r25	; 0x0c
    1fc4:	ad 87       	std	Y+13, r26	; 0x0d
    1fc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	4a e7       	ldi	r20, 0x7A	; 122
    1fd6:	53 e4       	ldi	r21, 0x43	; 67
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	8f 83       	std	Y+7, r24	; 0x07
    1fe2:	98 87       	std	Y+8, r25	; 0x08
    1fe4:	a9 87       	std	Y+9, r26	; 0x09
    1fe6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fea:	78 85       	ldd	r23, Y+8	; 0x08
    1fec:	89 85       	ldd	r24, Y+9	; 0x09
    1fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	5f e3       	ldi	r21, 0x3F	; 63
    1ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffc:	88 23       	and	r24, r24
    1ffe:	2c f4       	brge	.+10     	; 0x200a <LCD_Send_Command+0x270>
		__ticks = 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9e 83       	std	Y+6, r25	; 0x06
    2006:	8d 83       	std	Y+5, r24	; 0x05
    2008:	3f c0       	rjmp	.+126    	; 0x2088 <LCD_Send_Command+0x2ee>
	else if (__tmp > 65535)
    200a:	6f 81       	ldd	r22, Y+7	; 0x07
    200c:	78 85       	ldd	r23, Y+8	; 0x08
    200e:	89 85       	ldd	r24, Y+9	; 0x09
    2010:	9a 85       	ldd	r25, Y+10	; 0x0a
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	3f ef       	ldi	r19, 0xFF	; 255
    2016:	4f e7       	ldi	r20, 0x7F	; 127
    2018:	57 e4       	ldi	r21, 0x47	; 71
    201a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201e:	18 16       	cp	r1, r24
    2020:	4c f5       	brge	.+82     	; 0x2074 <LCD_Send_Command+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2022:	6b 85       	ldd	r22, Y+11	; 0x0b
    2024:	7c 85       	ldd	r23, Y+12	; 0x0c
    2026:	8d 85       	ldd	r24, Y+13	; 0x0d
    2028:	9e 85       	ldd	r25, Y+14	; 0x0e
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e2       	ldi	r20, 0x20	; 32
    2030:	51 e4       	ldi	r21, 0x41	; 65
    2032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9e 83       	std	Y+6, r25	; 0x06
    2048:	8d 83       	std	Y+5, r24	; 0x05
    204a:	0f c0       	rjmp	.+30     	; 0x206a <LCD_Send_Command+0x2d0>
    204c:	89 e1       	ldi	r24, 0x19	; 25
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	9c 83       	std	Y+4, r25	; 0x04
    2052:	8b 83       	std	Y+3, r24	; 0x03
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <LCD_Send_Command+0x2be>
    205c:	9c 83       	std	Y+4, r25	; 0x04
    205e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	9e 83       	std	Y+6, r25	; 0x06
    2068:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	69 f7       	brne	.-38     	; 0x204c <LCD_Send_Command+0x2b2>
    2072:	14 c0       	rjmp	.+40     	; 0x209c <LCD_Send_Command+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2074:	6f 81       	ldd	r22, Y+7	; 0x07
    2076:	78 85       	ldd	r23, Y+8	; 0x08
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	9a 85       	ldd	r25, Y+10	; 0x0a
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9e 83       	std	Y+6, r25	; 0x06
    2086:	8d 83       	std	Y+5, r24	; 0x05
    2088:	8d 81       	ldd	r24, Y+5	; 0x05
    208a:	9e 81       	ldd	r25, Y+6	; 0x06
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <LCD_Send_Command+0x2fa>
    2098:	9a 83       	std	Y+2, r25	; 0x02
    209a:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(1);
     #endif

}
    209c:	ab 96       	adiw	r28, 0x2b	; 43
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <Lcd_Send_Data>:

/*lcd_send_data ..send the string to it to show the string on lcd ..string is sent char by char*/
void Lcd_Send_Data(uint8 data)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	ab 97       	sbiw	r28, 0x2b	; 43
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	8b a7       	std	Y+43, r24	; 0x2b
	SET_BIT(CTRL_PORT,RS); //RS=1 BECAUSE I WANT LCD TO show data on lcd
    20c4:	a2 e3       	ldi	r26, 0x32	; 50
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e2 e3       	ldi	r30, 0x32	; 50
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	80 61       	ori	r24, 0x10	; 16
    20d0:	8c 93       	st	X, r24
		 CLEAR_BIT(CTRL_PORT,RW); //I WILL WRITE NOT READ ON LCD
    20d2:	a2 e3       	ldi	r26, 0x32	; 50
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e2 e3       	ldi	r30, 0x32	; 50
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	8f 7d       	andi	r24, 0xDF	; 223
    20de:	8c 93       	st	X, r24
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	a0 e8       	ldi	r26, 0x80	; 128
    20e6:	bf e3       	ldi	r27, 0x3F	; 63
    20e8:	8f a3       	std	Y+39, r24	; 0x27
    20ea:	98 a7       	std	Y+40, r25	; 0x28
    20ec:	a9 a7       	std	Y+41, r26	; 0x29
    20ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f0:	6f a1       	ldd	r22, Y+39	; 0x27
    20f2:	78 a5       	ldd	r23, Y+40	; 0x28
    20f4:	89 a5       	ldd	r24, Y+41	; 0x29
    20f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	4a e7       	ldi	r20, 0x7A	; 122
    20fe:	53 e4       	ldi	r21, 0x43	; 67
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	8b a3       	std	Y+35, r24	; 0x23
    210a:	9c a3       	std	Y+36, r25	; 0x24
    210c:	ad a3       	std	Y+37, r26	; 0x25
    210e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2110:	6b a1       	ldd	r22, Y+35	; 0x23
    2112:	7c a1       	ldd	r23, Y+36	; 0x24
    2114:	8d a1       	ldd	r24, Y+37	; 0x25
    2116:	9e a1       	ldd	r25, Y+38	; 0x26
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e8       	ldi	r20, 0x80	; 128
    211e:	5f e3       	ldi	r21, 0x3F	; 63
    2120:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2124:	88 23       	and	r24, r24
    2126:	2c f4       	brge	.+10     	; 0x2132 <Lcd_Send_Data+0x84>
		__ticks = 1;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9a a3       	std	Y+34, r25	; 0x22
    212e:	89 a3       	std	Y+33, r24	; 0x21
    2130:	3f c0       	rjmp	.+126    	; 0x21b0 <Lcd_Send_Data+0x102>
	else if (__tmp > 65535)
    2132:	6b a1       	ldd	r22, Y+35	; 0x23
    2134:	7c a1       	ldd	r23, Y+36	; 0x24
    2136:	8d a1       	ldd	r24, Y+37	; 0x25
    2138:	9e a1       	ldd	r25, Y+38	; 0x26
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	3f ef       	ldi	r19, 0xFF	; 255
    213e:	4f e7       	ldi	r20, 0x7F	; 127
    2140:	57 e4       	ldi	r21, 0x47	; 71
    2142:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2146:	18 16       	cp	r1, r24
    2148:	4c f5       	brge	.+82     	; 0x219c <Lcd_Send_Data+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214a:	6f a1       	ldd	r22, Y+39	; 0x27
    214c:	78 a5       	ldd	r23, Y+40	; 0x28
    214e:	89 a5       	ldd	r24, Y+41	; 0x29
    2150:	9a a5       	ldd	r25, Y+42	; 0x2a
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e2       	ldi	r20, 0x20	; 32
    2158:	51 e4       	ldi	r21, 0x41	; 65
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9a a3       	std	Y+34, r25	; 0x22
    2170:	89 a3       	std	Y+33, r24	; 0x21
    2172:	0f c0       	rjmp	.+30     	; 0x2192 <Lcd_Send_Data+0xe4>
    2174:	89 e1       	ldi	r24, 0x19	; 25
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	98 a3       	std	Y+32, r25	; 0x20
    217a:	8f 8f       	std	Y+31, r24	; 0x1f
    217c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    217e:	98 a1       	ldd	r25, Y+32	; 0x20
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <Lcd_Send_Data+0xd2>
    2184:	98 a3       	std	Y+32, r25	; 0x20
    2186:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2188:	89 a1       	ldd	r24, Y+33	; 0x21
    218a:	9a a1       	ldd	r25, Y+34	; 0x22
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	9a a3       	std	Y+34, r25	; 0x22
    2190:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2192:	89 a1       	ldd	r24, Y+33	; 0x21
    2194:	9a a1       	ldd	r25, Y+34	; 0x22
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	69 f7       	brne	.-38     	; 0x2174 <Lcd_Send_Data+0xc6>
    219a:	14 c0       	rjmp	.+40     	; 0x21c4 <Lcd_Send_Data+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219c:	6b a1       	ldd	r22, Y+35	; 0x23
    219e:	7c a1       	ldd	r23, Y+36	; 0x24
    21a0:	8d a1       	ldd	r24, Y+37	; 0x25
    21a2:	9e a1       	ldd	r25, Y+38	; 0x26
    21a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	9a a3       	std	Y+34, r25	; 0x22
    21ae:	89 a3       	std	Y+33, r24	; 0x21
    21b0:	89 a1       	ldd	r24, Y+33	; 0x21
    21b2:	9a a1       	ldd	r25, Y+34	; 0x22
    21b4:	9e 8f       	std	Y+30, r25	; 0x1e
    21b6:	8d 8f       	std	Y+29, r24	; 0x1d
    21b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <Lcd_Send_Data+0x10e>
    21c0:	9e 8f       	std	Y+30, r25	; 0x1e
    21c2:	8d 8f       	std	Y+29, r24	; 0x1d
		 _delay_ms(1);
		 SET_BIT(CTRL_PORT,E); //Enable lcd
    21c4:	a2 e3       	ldi	r26, 0x32	; 50
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e2 e3       	ldi	r30, 0x32	; 50
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	80 64       	ori	r24, 0x40	; 64
    21d0:	8c 93       	st	X, r24
	        #endif
		 _delay_ms(1);
		 CLEAR_BIT(CTRL_PORT,E);
		 _delay_ms(1);
	     #elif(bit_mode==8)/* if using bit mode 8*/
		    PORT_DATA_PATH=data; /*move all bits of command to port pc0..pc7*/
    21d2:	e5 e3       	ldi	r30, 0x35	; 53
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    21d8:	80 83       	st	Z, r24
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e8       	ldi	r26, 0x80	; 128
    21e0:	bf e3       	ldi	r27, 0x3F	; 63
    21e2:	89 8f       	std	Y+25, r24	; 0x19
    21e4:	9a 8f       	std	Y+26, r25	; 0x1a
    21e6:	ab 8f       	std	Y+27, r26	; 0x1b
    21e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	69 8d       	ldd	r22, Y+25	; 0x19
    21ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a e7       	ldi	r20, 0x7A	; 122
    21f8:	53 e4       	ldi	r21, 0x43	; 67
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	8d 8b       	std	Y+21, r24	; 0x15
    2204:	9e 8b       	std	Y+22, r25	; 0x16
    2206:	af 8b       	std	Y+23, r26	; 0x17
    2208:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    220a:	6d 89       	ldd	r22, Y+21	; 0x15
    220c:	7e 89       	ldd	r23, Y+22	; 0x16
    220e:	8f 89       	ldd	r24, Y+23	; 0x17
    2210:	98 8d       	ldd	r25, Y+24	; 0x18
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	2c f4       	brge	.+10     	; 0x222c <Lcd_Send_Data+0x17e>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9c 8b       	std	Y+20, r25	; 0x14
    2228:	8b 8b       	std	Y+19, r24	; 0x13
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <Lcd_Send_Data+0x1fc>
	else if (__tmp > 65535)
    222c:	6d 89       	ldd	r22, Y+21	; 0x15
    222e:	7e 89       	ldd	r23, Y+22	; 0x16
    2230:	8f 89       	ldd	r24, Y+23	; 0x17
    2232:	98 8d       	ldd	r25, Y+24	; 0x18
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	4c f5       	brge	.+82     	; 0x2296 <Lcd_Send_Data+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	69 8d       	ldd	r22, Y+25	; 0x19
    2246:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2248:	8b 8d       	ldd	r24, Y+27	; 0x1b
    224a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9c 8b       	std	Y+20, r25	; 0x14
    226a:	8b 8b       	std	Y+19, r24	; 0x13
    226c:	0f c0       	rjmp	.+30     	; 0x228c <Lcd_Send_Data+0x1de>
    226e:	89 e1       	ldi	r24, 0x19	; 25
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9a 8b       	std	Y+18, r25	; 0x12
    2274:	89 8b       	std	Y+17, r24	; 0x11
    2276:	89 89       	ldd	r24, Y+17	; 0x11
    2278:	9a 89       	ldd	r25, Y+18	; 0x12
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <Lcd_Send_Data+0x1cc>
    227e:	9a 8b       	std	Y+18, r25	; 0x12
    2280:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	8b 89       	ldd	r24, Y+19	; 0x13
    2284:	9c 89       	ldd	r25, Y+20	; 0x14
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	9c 8b       	std	Y+20, r25	; 0x14
    228a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	8b 89       	ldd	r24, Y+19	; 0x13
    228e:	9c 89       	ldd	r25, Y+20	; 0x14
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	69 f7       	brne	.-38     	; 0x226e <Lcd_Send_Data+0x1c0>
    2294:	14 c0       	rjmp	.+40     	; 0x22be <Lcd_Send_Data+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2296:	6d 89       	ldd	r22, Y+21	; 0x15
    2298:	7e 89       	ldd	r23, Y+22	; 0x16
    229a:	8f 89       	ldd	r24, Y+23	; 0x17
    229c:	98 8d       	ldd	r25, Y+24	; 0x18
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9c 8b       	std	Y+20, r25	; 0x14
    22a8:	8b 8b       	std	Y+19, r24	; 0x13
    22aa:	8b 89       	ldd	r24, Y+19	; 0x13
    22ac:	9c 89       	ldd	r25, Y+20	; 0x14
    22ae:	98 8b       	std	Y+16, r25	; 0x10
    22b0:	8f 87       	std	Y+15, r24	; 0x0f
    22b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b4:	98 89       	ldd	r25, Y+16	; 0x10
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <Lcd_Send_Data+0x208>
    22ba:	98 8b       	std	Y+16, r25	; 0x10
    22bc:	8f 87       	std	Y+15, r24	; 0x0f
			 _delay_ms(1);
			 CLEAR_BIT(CTRL_PORT,E);
    22be:	a2 e3       	ldi	r26, 0x32	; 50
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e2 e3       	ldi	r30, 0x32	; 50
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	8f 7b       	andi	r24, 0xBF	; 191
    22ca:	8c 93       	st	X, r24
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a0 e8       	ldi	r26, 0x80	; 128
    22d2:	bf e3       	ldi	r27, 0x3F	; 63
    22d4:	8b 87       	std	Y+11, r24	; 0x0b
    22d6:	9c 87       	std	Y+12, r25	; 0x0c
    22d8:	ad 87       	std	Y+13, r26	; 0x0d
    22da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22de:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	4a e7       	ldi	r20, 0x7A	; 122
    22ea:	53 e4       	ldi	r21, 0x43	; 67
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	8f 83       	std	Y+7, r24	; 0x07
    22f6:	98 87       	std	Y+8, r25	; 0x08
    22f8:	a9 87       	std	Y+9, r26	; 0x09
    22fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2310:	88 23       	and	r24, r24
    2312:	2c f4       	brge	.+10     	; 0x231e <Lcd_Send_Data+0x270>
		__ticks = 1;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	3f c0       	rjmp	.+126    	; 0x239c <Lcd_Send_Data+0x2ee>
	else if (__tmp > 65535)
    231e:	6f 81       	ldd	r22, Y+7	; 0x07
    2320:	78 85       	ldd	r23, Y+8	; 0x08
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	9a 85       	ldd	r25, Y+10	; 0x0a
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	3f ef       	ldi	r19, 0xFF	; 255
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	57 e4       	ldi	r21, 0x47	; 71
    232e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2332:	18 16       	cp	r1, r24
    2334:	4c f5       	brge	.+82     	; 0x2388 <Lcd_Send_Data+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2336:	6b 85       	ldd	r22, Y+11	; 0x0b
    2338:	7c 85       	ldd	r23, Y+12	; 0x0c
    233a:	8d 85       	ldd	r24, Y+13	; 0x0d
    233c:	9e 85       	ldd	r25, Y+14	; 0x0e
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	51 e4       	ldi	r21, 0x41	; 65
    2346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	0f c0       	rjmp	.+30     	; 0x237e <Lcd_Send_Data+0x2d0>
    2360:	89 e1       	ldi	r24, 0x19	; 25
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 83       	std	Y+4, r25	; 0x04
    2366:	8b 83       	std	Y+3, r24	; 0x03
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <Lcd_Send_Data+0x2be>
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	69 f7       	brne	.-38     	; 0x2360 <Lcd_Send_Data+0x2b2>
    2386:	14 c0       	rjmp	.+40     	; 0x23b0 <Lcd_Send_Data+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <Lcd_Send_Data+0x2fa>
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
			 _delay_ms(1);
	     #endif
}
    23b0:	ab 96       	adiw	r28, 0x2b	; 43
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <Cursor_Location>:
/*to determine the position of cursor to write in the right location on lcd
 * its take two parameter the line and the column of lcd that u want to write at
 */

void Cursor_Location(uint8 row , uint8 col)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <Cursor_Location+0x6>
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <Cursor_Location+0x8>
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <Cursor_Location+0xa>
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	8b 83       	std	Y+3, r24	; 0x03
    23d2:	6c 83       	std	Y+4, r22	; 0x04
	uint8 address;
	uint8 cursor_address;
	switch(row)
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	3e 83       	std	Y+6, r19	; 0x06
    23dc:	2d 83       	std	Y+5, r18	; 0x05
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	81 30       	cpi	r24, 0x01	; 1
    23e4:	91 05       	cpc	r25, r1
    23e6:	c1 f0       	breq	.+48     	; 0x2418 <Cursor_Location+0x56>
    23e8:	2d 81       	ldd	r18, Y+5	; 0x05
    23ea:	3e 81       	ldd	r19, Y+6	; 0x06
    23ec:	22 30       	cpi	r18, 0x02	; 2
    23ee:	31 05       	cpc	r19, r1
    23f0:	2c f4       	brge	.+10     	; 0x23fc <Cursor_Location+0x3a>
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	61 f0       	breq	.+24     	; 0x2412 <Cursor_Location+0x50>
    23fa:	19 c0       	rjmp	.+50     	; 0x242e <Cursor_Location+0x6c>
    23fc:	2d 81       	ldd	r18, Y+5	; 0x05
    23fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2400:	22 30       	cpi	r18, 0x02	; 2
    2402:	31 05       	cpc	r19, r1
    2404:	69 f0       	breq	.+26     	; 0x2420 <Cursor_Location+0x5e>
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	83 30       	cpi	r24, 0x03	; 3
    240c:	91 05       	cpc	r25, r1
    240e:	61 f0       	breq	.+24     	; 0x2428 <Cursor_Location+0x66>
    2410:	0e c0       	rjmp	.+28     	; 0x242e <Cursor_Location+0x6c>
	{
	   case 0: address=col;
    2412:	8c 81       	ldd	r24, Y+4	; 0x04
    2414:	8a 83       	std	Y+2, r24	; 0x02
    2416:	0b c0       	rjmp	.+22     	; 0x242e <Cursor_Location+0x6c>
	           break;
	   case 1: address=0x40+col; /* 0x40 is the location of first col and second row in lcd ..0x40+col to get the location at this row and this coulmn*/
    2418:	8c 81       	ldd	r24, Y+4	; 0x04
    241a:	80 5c       	subi	r24, 0xC0	; 192
    241c:	8a 83       	std	Y+2, r24	; 0x02
    241e:	07 c0       	rjmp	.+14     	; 0x242e <Cursor_Location+0x6c>
	           break;
	   case 2: address=0x10+col;
    2420:	8c 81       	ldd	r24, Y+4	; 0x04
    2422:	80 5f       	subi	r24, 0xF0	; 240
    2424:	8a 83       	std	Y+2, r24	; 0x02
    2426:	03 c0       	rjmp	.+6      	; 0x242e <Cursor_Location+0x6c>
	           break;
	   case 3: address=0x50+col;
    2428:	8c 81       	ldd	r24, Y+4	; 0x04
    242a:	80 5b       	subi	r24, 0xB0	; 176
    242c:	8a 83       	std	Y+2, r24	; 0x02
	           break;
	}
	cursor_address = 0x80|address; /*0x80 is the beginning of the cursor ,we make or to get the location of cursor at this row and this col*/
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	80 68       	ori	r24, 0x80	; 128
    2432:	89 83       	std	Y+1, r24	; 0x01
	LCD_Send_Command(cursor_address);
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_Send_Command>
}
    243a:	26 96       	adiw	r28, 0x06	; 6
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <Lcd_Display_String>:

/*...Lcd_Display_String...str is pointer point to one char in the string
  using pointer to char because i will send one char to
display function one by one ..i dont send all the string(array of char) in one time*/
void Lcd_Display_String(const uint8 * str)
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <Lcd_Display_String+0x6>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	0a c0       	rjmp	.+20     	; 0x2470 <Lcd_Display_String+0x24>
	while((*str)!='\0')
	{
		Lcd_Send_Data(*str);
    245c:	e9 81       	ldd	r30, Y+1	; 0x01
    245e:	fa 81       	ldd	r31, Y+2	; 0x02
    2460:	80 81       	ld	r24, Z
    2462:	0e 94 57 10 	call	0x20ae	; 0x20ae <Lcd_Send_Data>
		 str++; // to access the locations under str pointer to get the rest of characters in string
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	9a 81       	ldd	r25, Y+2	; 0x02
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	9a 83       	std	Y+2, r25	; 0x02
    246e:	89 83       	std	Y+1, r24	; 0x01
/*...Lcd_Display_String...str is pointer point to one char in the string
  using pointer to char because i will send one char to
display function one by one ..i dont send all the string(array of char) in one time*/
void Lcd_Display_String(const uint8 * str)
{
	while((*str)!='\0')
    2470:	e9 81       	ldd	r30, Y+1	; 0x01
    2472:	fa 81       	ldd	r31, Y+2	; 0x02
    2474:	80 81       	ld	r24, Z
    2476:	88 23       	and	r24, r24
    2478:	89 f7       	brne	.-30     	; 0x245c <Lcd_Display_String+0x10>
		Lcd_Send_Data(*str);
		 str++; // to access the locations under str pointer to get the rest of characters in string

	}

}
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <Row_Col_string>:
/* row_col_string ..it recieves the location of row and column that you will write at
 * and recieve the string that will be showed on lcd
 */
void Row_Col_string(uint8 row, uint8 col , const uint8 *str)
{
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	00 d0       	rcall	.+0      	; 0x248a <Row_Col_string+0x6>
    248a:	00 d0       	rcall	.+0      	; 0x248c <Row_Col_string+0x8>
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	89 83       	std	Y+1, r24	; 0x01
    2492:	6a 83       	std	Y+2, r22	; 0x02
    2494:	5c 83       	std	Y+4, r21	; 0x04
    2496:	4b 83       	std	Y+3, r20	; 0x03
	Cursor_Location(row,col);
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	6a 81       	ldd	r22, Y+2	; 0x02
    249c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <Cursor_Location>
	Lcd_Display_String(str);
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	9c 81       	ldd	r25, Y+4	; 0x04
    24a4:	0e 94 26 12 	call	0x244c	; 0x244c <Lcd_Display_String>

}
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	08 95       	ret

000024b6 <Int_To_String>:
/*if you want to show intger on lcd ..integer must be converted to char */

void Int_To_String( int num)
{
    24b6:	df 93       	push	r29
    24b8:	cf 93       	push	r28
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	62 97       	sbiw	r28, 0x12	; 18
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
    24ca:	9a 8b       	std	Y+18, r25	; 0x12
    24cc:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buffer[16]; //lcd contains 16 column
	itoa(num,buffer,10); /*itoa is function convert the integer to character ..put the char in char of array buffer ..10 because the number is decimal not hexa not octal*/
    24ce:	89 89       	ldd	r24, Y+17	; 0x11
    24d0:	9a 89       	ldd	r25, Y+18	; 0x12
    24d2:	9e 01       	movw	r18, r28
    24d4:	2f 5f       	subi	r18, 0xFF	; 255
    24d6:	3f 4f       	sbci	r19, 0xFF	; 255
    24d8:	b9 01       	movw	r22, r18
    24da:	4a e0       	ldi	r20, 0x0A	; 10
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	0e 94 91 15 	call	0x2b22	; 0x2b22 <itoa>
	//Cursor_Location(row,col);
	Lcd_Display_String(buffer); // send the address of first array to Lcd_Display_String to show it on lcd*/
    24e2:	ce 01       	movw	r24, r28
    24e4:	01 96       	adiw	r24, 0x01	; 1
    24e6:	0e 94 26 12 	call	0x244c	; 0x244c <Lcd_Display_String>
}
    24ea:	62 96       	adiw	r28, 0x12	; 18
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <Clear_Lcd>:

void Clear_Lcd()
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Command(0x01); //0x01 for clear any words on lcd
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_Send_Command>

}
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <clear_char>:

void clear_char()
{
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	2e 97       	sbiw	r28, 0x0e	; 14
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Command(0x10); /*move cursor left by one character*/
    2524:	80 e1       	ldi	r24, 0x10	; 16
    2526:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_Send_Command>
	Lcd_Send_Data('\0 ');  /*put null on this character*/
    252a:	80 e2       	ldi	r24, 0x20	; 32
    252c:	0e 94 57 10 	call	0x20ae	; 0x20ae <Lcd_Send_Data>
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	aa ef       	ldi	r26, 0xFA	; 250
    2536:	b3 e4       	ldi	r27, 0x43	; 67
    2538:	8b 87       	std	Y+11, r24	; 0x0b
    253a:	9c 87       	std	Y+12, r25	; 0x0c
    253c:	ad 87       	std	Y+13, r26	; 0x0d
    253e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2540:	6b 85       	ldd	r22, Y+11	; 0x0b
    2542:	7c 85       	ldd	r23, Y+12	; 0x0c
    2544:	8d 85       	ldd	r24, Y+13	; 0x0d
    2546:	9e 85       	ldd	r25, Y+14	; 0x0e
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	4a e7       	ldi	r20, 0x7A	; 122
    254e:	53 e4       	ldi	r21, 0x43	; 67
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	8f 83       	std	Y+7, r24	; 0x07
    255a:	98 87       	std	Y+8, r25	; 0x08
    255c:	a9 87       	std	Y+9, r26	; 0x09
    255e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2560:	6f 81       	ldd	r22, Y+7	; 0x07
    2562:	78 85       	ldd	r23, Y+8	; 0x08
    2564:	89 85       	ldd	r24, Y+9	; 0x09
    2566:	9a 85       	ldd	r25, Y+10	; 0x0a
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e8       	ldi	r20, 0x80	; 128
    256e:	5f e3       	ldi	r21, 0x3F	; 63
    2570:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2574:	88 23       	and	r24, r24
    2576:	2c f4       	brge	.+10     	; 0x2582 <clear_char+0x72>
		__ticks = 1;
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
    2580:	3f c0       	rjmp	.+126    	; 0x2600 <clear_char+0xf0>
	else if (__tmp > 65535)
    2582:	6f 81       	ldd	r22, Y+7	; 0x07
    2584:	78 85       	ldd	r23, Y+8	; 0x08
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	9a 85       	ldd	r25, Y+10	; 0x0a
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	3f ef       	ldi	r19, 0xFF	; 255
    258e:	4f e7       	ldi	r20, 0x7F	; 127
    2590:	57 e4       	ldi	r21, 0x47	; 71
    2592:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2596:	18 16       	cp	r1, r24
    2598:	4c f5       	brge	.+82     	; 0x25ec <clear_char+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259a:	6b 85       	ldd	r22, Y+11	; 0x0b
    259c:	7c 85       	ldd	r23, Y+12	; 0x0c
    259e:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e2       	ldi	r20, 0x20	; 32
    25a8:	51 e4       	ldi	r21, 0x41	; 65
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	bc 01       	movw	r22, r24
    25b4:	cd 01       	movw	r24, r26
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
    25c2:	0f c0       	rjmp	.+30     	; 0x25e2 <clear_char+0xd2>
    25c4:	89 e1       	ldi	r24, 0x19	; 25
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	9c 83       	std	Y+4, r25	; 0x04
    25ca:	8b 83       	std	Y+3, r24	; 0x03
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	9c 81       	ldd	r25, Y+4	; 0x04
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <clear_char+0xc0>
    25d4:	9c 83       	std	Y+4, r25	; 0x04
    25d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	69 f7       	brne	.-38     	; 0x25c4 <clear_char+0xb4>
    25ea:	14 c0       	rjmp	.+40     	; 0x2614 <clear_char+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ec:	6f 81       	ldd	r22, Y+7	; 0x07
    25ee:	78 85       	ldd	r23, Y+8	; 0x08
    25f0:	89 85       	ldd	r24, Y+9	; 0x09
    25f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	9e 83       	std	Y+6, r25	; 0x06
    25fe:	8d 83       	std	Y+5, r24	; 0x05
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	9e 81       	ldd	r25, Y+6	; 0x06
    2604:	9a 83       	std	Y+2, r25	; 0x02
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <clear_char+0xfc>
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);        /*time of pressed*/
	LCD_Send_Command(0x10); /*move cursor left by one character again to enable u delete another
    2614:	80 e1       	ldi	r24, 0x10	; 16
    2616:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_Send_Command>
				                           character after deleting one or enable you to write character its
				                           position after deleting one directly*/
}
    261a:	2e 96       	adiw	r28, 0x0e	; 14
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <main>:
#include"lcd.h"
#include"uart.h"
#include "door.h"
uint8 correct;
int main()
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	6e 97       	sbiw	r28, 0x1e	; 30
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
	Timer_int();
    2640:	0e 94 52 14 	call	0x28a4	; 0x28a4 <Timer_int>
	uint8 key;
	uint8 check_word='F';
    2644:	86 e4       	ldi	r24, 0x46	; 70
    2646:	8d 8f       	std	Y+29, r24	; 0x1d
	Init_Lcd();/*initialize lcd*/
    2648:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Init_Lcd>
	init_uart();
    264c:	0e 94 91 14 	call	0x2922	; 0x2922 <init_uart>
	SET_BIT(SREG,7);/*enable global interrupt*/
    2650:	af e5       	ldi	r26, 0x5F	; 95
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	ef e5       	ldi	r30, 0x5F	; 95
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	80 68       	ori	r24, 0x80	; 128
    265c:	8c 93       	st	X, r24
	send_byte(0x11);/*MC1 is ready to synchronize the next instructions with MC2*/
    265e:	81 e1       	ldi	r24, 0x11	; 17
    2660:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
    2664:	06 c0       	rjmp	.+12     	; 0x2672 <main+0x46>
	 * if check_word still F that mean user does'nt make the right password so the system will ask him again to write
	 * password correctly. this while loop will be executed one time
	 */
	while(check_word=='F')
	{
		send_byte(0x16);
    2666:	86 e1       	ldi	r24, 0x16	; 22
    2668:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
		check_word= password_first_time();
    266c:	0e 94 c8 0b 	call	0x1790	; 0x1790 <password_first_time>
    2670:	8d 8f       	std	Y+29, r24	; 0x1d
	send_byte(0x11);/*MC1 is ready to synchronize the next instructions with MC2*/
	/*password_first_time()..> system will ask user to make a password for the door to use it when he want to open the door
	 * if check_word still F that mean user does'nt make the right password so the system will ask him again to write
	 * password correctly. this while loop will be executed one time
	 */
	while(check_word=='F')
    2672:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2674:	86 34       	cpi	r24, 0x46	; 70
    2676:	b9 f3       	breq	.-18     	; 0x2666 <main+0x3a>
	{
		send_byte(0x16);
		check_word= password_first_time();
	}
	/*when user makes password correctly , the message "success is done" will be showed on lcd*/
	Row_Col_string(0, 0 , "success is done");
    2678:	2d e0       	ldi	r18, 0x0D	; 13
    267a:	31 e0       	ldi	r19, 0x01	; 1
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	60 e0       	ldi	r22, 0x00	; 0
    2680:	a9 01       	movw	r20, r18
    2682:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	aa e7       	ldi	r26, 0x7A	; 122
    268c:	b4 e4       	ldi	r27, 0x44	; 68
    268e:	89 8f       	std	Y+25, r24	; 0x19
    2690:	9a 8f       	std	Y+26, r25	; 0x1a
    2692:	ab 8f       	std	Y+27, r26	; 0x1b
    2694:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2696:	69 8d       	ldd	r22, Y+25	; 0x19
    2698:	7a 8d       	ldd	r23, Y+26	; 0x1a
    269a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	4a e7       	ldi	r20, 0x7A	; 122
    26a4:	53 e4       	ldi	r21, 0x43	; 67
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	8d 8b       	std	Y+21, r24	; 0x15
    26b0:	9e 8b       	std	Y+22, r25	; 0x16
    26b2:	af 8b       	std	Y+23, r26	; 0x17
    26b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26b6:	6d 89       	ldd	r22, Y+21	; 0x15
    26b8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ba:	8f 89       	ldd	r24, Y+23	; 0x17
    26bc:	98 8d       	ldd	r25, Y+24	; 0x18
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e8       	ldi	r20, 0x80	; 128
    26c4:	5f e3       	ldi	r21, 0x3F	; 63
    26c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ca:	88 23       	and	r24, r24
    26cc:	2c f4       	brge	.+10     	; 0x26d8 <main+0xac>
		__ticks = 1;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9c 8b       	std	Y+20, r25	; 0x14
    26d4:	8b 8b       	std	Y+19, r24	; 0x13
    26d6:	3f c0       	rjmp	.+126    	; 0x2756 <main+0x12a>
	else if (__tmp > 65535)
    26d8:	6d 89       	ldd	r22, Y+21	; 0x15
    26da:	7e 89       	ldd	r23, Y+22	; 0x16
    26dc:	8f 89       	ldd	r24, Y+23	; 0x17
    26de:	98 8d       	ldd	r25, Y+24	; 0x18
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	3f ef       	ldi	r19, 0xFF	; 255
    26e4:	4f e7       	ldi	r20, 0x7F	; 127
    26e6:	57 e4       	ldi	r21, 0x47	; 71
    26e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ec:	18 16       	cp	r1, r24
    26ee:	4c f5       	brge	.+82     	; 0x2742 <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f0:	69 8d       	ldd	r22, Y+25	; 0x19
    26f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e2       	ldi	r20, 0x20	; 32
    26fe:	51 e4       	ldi	r21, 0x41	; 65
    2700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9c 8b       	std	Y+20, r25	; 0x14
    2716:	8b 8b       	std	Y+19, r24	; 0x13
    2718:	0f c0       	rjmp	.+30     	; 0x2738 <main+0x10c>
    271a:	89 e1       	ldi	r24, 0x19	; 25
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9a 8b       	std	Y+18, r25	; 0x12
    2720:	89 8b       	std	Y+17, r24	; 0x11
    2722:	89 89       	ldd	r24, Y+17	; 0x11
    2724:	9a 89       	ldd	r25, Y+18	; 0x12
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <main+0xfa>
    272a:	9a 8b       	std	Y+18, r25	; 0x12
    272c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272e:	8b 89       	ldd	r24, Y+19	; 0x13
    2730:	9c 89       	ldd	r25, Y+20	; 0x14
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	9c 8b       	std	Y+20, r25	; 0x14
    2736:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2738:	8b 89       	ldd	r24, Y+19	; 0x13
    273a:	9c 89       	ldd	r25, Y+20	; 0x14
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	69 f7       	brne	.-38     	; 0x271a <main+0xee>
    2740:	14 c0       	rjmp	.+40     	; 0x276a <main+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2742:	6d 89       	ldd	r22, Y+21	; 0x15
    2744:	7e 89       	ldd	r23, Y+22	; 0x16
    2746:	8f 89       	ldd	r24, Y+23	; 0x17
    2748:	98 8d       	ldd	r25, Y+24	; 0x18
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9c 8b       	std	Y+20, r25	; 0x14
    2754:	8b 8b       	std	Y+19, r24	; 0x13
    2756:	8b 89       	ldd	r24, Y+19	; 0x13
    2758:	9c 89       	ldd	r25, Y+20	; 0x14
    275a:	98 8b       	std	Y+16, r25	; 0x10
    275c:	8f 87       	std	Y+15, r24	; 0x0f
    275e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2760:	98 89       	ldd	r25, Y+16	; 0x10
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <main+0x136>
    2766:	98 8b       	std	Y+16, r25	; 0x10
    2768:	8f 87       	std	Y+15, r24	; 0x0f
    /*show the message on lcd for 1 sec*/
	_delay_ms(1000);
	/*clear any string on lcd*/
	Clear_Lcd();
    276a:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
	/*this code will be executed continuously*/
	while(1)
	{
		/*press '+' on keypad if you want to change old password , press '-' ,if you want to open door*/
		Row_Col_string(0, 0 , "'+':change pass");
    276e:	2d e1       	ldi	r18, 0x1D	; 29
    2770:	31 e0       	ldi	r19, 0x01	; 1
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	a9 01       	movw	r20, r18
    2778:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
		Row_Col_string(1, 0 , "'-':open door");
    277c:	2d e2       	ldi	r18, 0x2D	; 45
    277e:	31 e0       	ldi	r19, 0x01	; 1
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	a9 01       	movw	r20, r18
    2786:	0e 94 42 12 	call	0x2484	; 0x2484 <Row_Col_string>
		/*keypad_getPressedKey()...> return the key that is pressed by user*/
		key= keypad_getPressedKey();
    278a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <keypad_getPressedKey>
    278e:	8e 8f       	std	Y+30, r24	; 0x1e
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	aa ef       	ldi	r26, 0xFA	; 250
    2796:	b3 e4       	ldi	r27, 0x43	; 67
    2798:	8b 87       	std	Y+11, r24	; 0x0b
    279a:	9c 87       	std	Y+12, r25	; 0x0c
    279c:	ad 87       	std	Y+13, r26	; 0x0d
    279e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	4a e7       	ldi	r20, 0x7A	; 122
    27ae:	53 e4       	ldi	r21, 0x43	; 67
    27b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	8f 83       	std	Y+7, r24	; 0x07
    27ba:	98 87       	std	Y+8, r25	; 0x08
    27bc:	a9 87       	std	Y+9, r26	; 0x09
    27be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27c0:	6f 81       	ldd	r22, Y+7	; 0x07
    27c2:	78 85       	ldd	r23, Y+8	; 0x08
    27c4:	89 85       	ldd	r24, Y+9	; 0x09
    27c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e8       	ldi	r20, 0x80	; 128
    27ce:	5f e3       	ldi	r21, 0x3F	; 63
    27d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d4:	88 23       	and	r24, r24
    27d6:	2c f4       	brge	.+10     	; 0x27e2 <main+0x1b6>
		__ticks = 1;
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	9e 83       	std	Y+6, r25	; 0x06
    27de:	8d 83       	std	Y+5, r24	; 0x05
    27e0:	3f c0       	rjmp	.+126    	; 0x2860 <main+0x234>
	else if (__tmp > 65535)
    27e2:	6f 81       	ldd	r22, Y+7	; 0x07
    27e4:	78 85       	ldd	r23, Y+8	; 0x08
    27e6:	89 85       	ldd	r24, Y+9	; 0x09
    27e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	3f ef       	ldi	r19, 0xFF	; 255
    27ee:	4f e7       	ldi	r20, 0x7F	; 127
    27f0:	57 e4       	ldi	r21, 0x47	; 71
    27f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f6:	18 16       	cp	r1, r24
    27f8:	4c f5       	brge	.+82     	; 0x284c <main+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    27fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2800:	9e 85       	ldd	r25, Y+14	; 0x0e
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	40 e2       	ldi	r20, 0x20	; 32
    2808:	51 e4       	ldi	r21, 0x41	; 65
    280a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	bc 01       	movw	r22, r24
    2814:	cd 01       	movw	r24, r26
    2816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	9e 83       	std	Y+6, r25	; 0x06
    2820:	8d 83       	std	Y+5, r24	; 0x05
    2822:	0f c0       	rjmp	.+30     	; 0x2842 <main+0x216>
    2824:	89 e1       	ldi	r24, 0x19	; 25
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	9c 83       	std	Y+4, r25	; 0x04
    282a:	8b 83       	std	Y+3, r24	; 0x03
    282c:	8b 81       	ldd	r24, Y+3	; 0x03
    282e:	9c 81       	ldd	r25, Y+4	; 0x04
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <main+0x204>
    2834:	9c 83       	std	Y+4, r25	; 0x04
    2836:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2838:	8d 81       	ldd	r24, Y+5	; 0x05
    283a:	9e 81       	ldd	r25, Y+6	; 0x06
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	9e 83       	std	Y+6, r25	; 0x06
    2840:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2842:	8d 81       	ldd	r24, Y+5	; 0x05
    2844:	9e 81       	ldd	r25, Y+6	; 0x06
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	69 f7       	brne	.-38     	; 0x2824 <main+0x1f8>
    284a:	14 c0       	rjmp	.+40     	; 0x2874 <main+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284c:	6f 81       	ldd	r22, Y+7	; 0x07
    284e:	78 85       	ldd	r23, Y+8	; 0x08
    2850:	89 85       	ldd	r24, Y+9	; 0x09
    2852:	9a 85       	ldd	r25, Y+10	; 0x0a
    2854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	9e 83       	std	Y+6, r25	; 0x06
    285e:	8d 83       	std	Y+5, r24	; 0x05
    2860:	8d 81       	ldd	r24, Y+5	; 0x05
    2862:	9e 81       	ldd	r25, Y+6	; 0x06
    2864:	9a 83       	std	Y+2, r25	; 0x02
    2866:	89 83       	std	Y+1, r24	; 0x01
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	9a 81       	ldd	r25, Y+2	; 0x02
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	f1 f7       	brne	.-4      	; 0x286c <main+0x240>
    2870:	9a 83       	std	Y+2, r25	; 0x02
    2872:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);/*one press time is 500ms*/
		Clear_Lcd();
    2874:	0e 94 7e 12 	call	0x24fc	; 0x24fc <Clear_Lcd>
		send_byte('R');/*MC1 send 'R' to MC2 to tell it that is ready to synchronize together*/
    2878:	82 e5       	ldi	r24, 0x52	; 82
    287a:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
		/*if the pressed key is '+'..MC1 send '+' to MC2 to make processing on password to change it
		 * change_password()...here user write the old password and the new password
		 */
		if(key=='+')
    287e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2880:	8b 32       	cpi	r24, 0x2B	; 43
    2882:	31 f4       	brne	.+12     	; 0x2890 <main+0x264>
		{
			send_byte('+'); /*send '+' to MC2 to know that i pressed on + to process password there to change it*/
    2884:	8b e2       	ldi	r24, 0x2B	; 43
    2886:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
			change_password();
    288a:	0e 94 a3 05 	call	0xb46	; 0xb46 <change_password>
    288e:	6f cf       	rjmp	.-290    	; 0x276e <main+0x142>
		}
		/*if the pressed key is '-' ..send '-' to MC2 ..
		 * Open_Door() ..> here user will write the password to open door
		 */
		else if(key=='-')
    2890:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2892:	8d 32       	cpi	r24, 0x2D	; 45
    2894:	09 f0       	breq	.+2      	; 0x2898 <main+0x26c>
    2896:	6b cf       	rjmp	.-298    	; 0x276e <main+0x142>
		{
			send_byte('-');
    2898:	8d e2       	ldi	r24, 0x2D	; 45
    289a:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
			Open_Door();
    289e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Open_Door>
    28a2:	65 cf       	rjmp	.-310    	; 0x276e <main+0x142>

000028a4 <Timer_int>:
#include "timer.h"

uint8 Tick;
uint8 flag_o=0;
void Timer_int()
{
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
	/*enable (TIMER0)normal mode  ,Ftimer=Fcpu/1028 ..choose prescaler=1028*/
	TCCR0=(1<<FOC0)|(1<<CS02)|(1<<CS00);
    28ac:	e3 e5       	ldi	r30, 0x53	; 83
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	85 e8       	ldi	r24, 0x85	; 133
    28b2:	80 83       	st	Z, r24
	TCNT0=5; //initial value
    28b4:	e2 e5       	ldi	r30, 0x52	; 82
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	85 e0       	ldi	r24, 0x05	; 5
    28ba:	80 83       	st	Z, r24
    TIMSK|=(1<<TOIE0);// TOIE0 (Timer/Counter0 Overflow Interrupt Enable)
    28bc:	a9 e5       	ldi	r26, 0x59	; 89
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	e9 e5       	ldi	r30, 0x59	; 89
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	81 60       	ori	r24, 0x01	; 1
    28c8:	8c 93       	st	X, r24
    SET_BIT(SREG,7);
    28ca:	af e5       	ldi	r26, 0x5F	; 95
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	ef e5       	ldi	r30, 0x5F	; 95
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	80 68       	ori	r24, 0x80	; 128
    28d6:	8c 93       	st	X, r24

}
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <__vector_9>:
ISR(TIMER0_OVF_vect)
{
    28de:	1f 92       	push	r1
    28e0:	0f 92       	push	r0
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	0f 92       	push	r0
    28e6:	11 24       	eor	r1, r1
    28e8:	8f 93       	push	r24
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
	Tick++;
    28f2:	80 91 48 01 	lds	r24, 0x0148
    28f6:	8f 5f       	subi	r24, 0xFF	; 255
    28f8:	80 93 48 01 	sts	0x0148, r24
	//TIFR &=~(1<<TOV0); //Timer/Counter0 Overflow Flag(automatic flag) myzt avr hwa by3mlhabzero b3d isr ma t5ls
	if(Tick==40)
    28fc:	80 91 48 01 	lds	r24, 0x0148
    2900:	88 32       	cpi	r24, 0x28	; 40
    2902:	39 f4       	brne	.+14     	; 0x2912 <__vector_9+0x34>
	{
		//Stop_Motor();
		Tick=0;
    2904:	10 92 48 01 	sts	0x0148, r1
		Tick=0;
    2908:	10 92 48 01 	sts	0x0148, r1
		flag_o=1;
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	80 93 45 01 	sts	0x0145, r24
		//send_byte('c');
	}
}
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	8f 91       	pop	r24
    2918:	0f 90       	pop	r0
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	0f 90       	pop	r0
    291e:	1f 90       	pop	r1
    2920:	18 95       	reti

00002922 <init_uart>:
#include"uart.h"

uint8 i =0;
uint8 correct=0;
void init_uart()
{
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
	UCSRA=(1<<U2X); //use double transmission speed
    292a:	eb e2       	ldi	r30, 0x2B	; 43
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	82 e0       	ldi	r24, 0x02	; 2
    2930:	80 83       	st	Z, r24
	UCSRB=(1<<TXEN)|(1<<RXEN)|(1<<RXCIE); //enable transmit and receive..enable interrupt of receiving
    2932:	ea e2       	ldi	r30, 0x2A	; 42
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	88 e9       	ldi	r24, 0x98	; 152
    2938:	80 83       	st	Z, r24
	UCSRC=(1<<UCSZ0)|(1<<UCSZ1)|(1<<URSEL); //transmit and receive 8 bits ..ursel=1 because i write in UCSRC REG
    293a:	e0 e4       	ldi	r30, 0x40	; 64
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	86 e8       	ldi	r24, 0x86	; 134
    2940:	80 83       	st	Z, r24
	//UBRRL=(uint8)(MYUPRR); //for choose baudrate..MYUPRR IS 16 bits..first of 8 bits in REGL and laste of 8 bits in regH
	//UBRRH=(uint8)(MYUPRR>>8);
	UBRRL=0xc;
    2942:	e9 e2       	ldi	r30, 0x29	; 41
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	8c e0       	ldi	r24, 0x0C	; 12
    2948:	80 83       	st	Z, r24
	UBRRH=0x0;
    294a:	e0 e4       	ldi	r30, 0x40	; 64
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	10 82       	st	Z, r1
}
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <send_byte>:

void send_byte(uint8 data)
{
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	0f 92       	push	r0
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * when buffer of transmit data is empty , HW set UDRE in reg UCSRA
	 */
	while(IS_BIT_CLEAR(UCSRA,UDRE)); //wait until the buffer is empty..then send the new data
    2962:	eb e2       	ldi	r30, 0x2B	; 43
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	88 2f       	mov	r24, r24
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	80 72       	andi	r24, 0x20	; 32
    296e:	90 70       	andi	r25, 0x00	; 0
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	b9 f3       	breq	.-18     	; 0x2962 <send_byte+0xc>
	UDR=data;
    2974:	ec e2       	ldi	r30, 0x2C	; 44
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	80 83       	st	Z, r24

}
    297c:	0f 90       	pop	r0
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <receive_byte>:

uint8 receive_byte()
{
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * wait for complete received data when RXC=1
	 */
	while(IS_BIT_CLEAR(UCSRA,RXC));
    298c:	eb e2       	ldi	r30, 0x2B	; 43
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	88 23       	and	r24, r24
    2994:	dc f7       	brge	.-10     	; 0x298c <receive_byte+0x8>
	return UDR;
    2996:	ec e2       	ldi	r30, 0x2C	; 44
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z

}
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <send_string>:

void send_string(uint8 *str)
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <send_string+0x6>
    29a8:	0f 92       	push	r0
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	9b 83       	std	Y+3, r25	; 0x03
    29b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    29b2:	19 82       	std	Y+1, r1	; 0x01
    29b4:	0e c0       	rjmp	.+28     	; 0x29d2 <send_string+0x30>
	while(str[i] != '\0')
	{
		send_byte(str[i]);
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	9b 81       	ldd	r25, Y+3	; 0x03
    29c0:	fc 01       	movw	r30, r24
    29c2:	e2 0f       	add	r30, r18
    29c4:	f3 1f       	adc	r31, r19
    29c6:	80 81       	ld	r24, Z
    29c8:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
		i++;
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	8f 5f       	subi	r24, 0xFF	; 255
    29d0:	89 83       	std	Y+1, r24	; 0x01
}

void send_string(uint8 *str)
{
	uint8 i =0;
	while(str[i] != '\0')
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	28 2f       	mov	r18, r24
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	8a 81       	ldd	r24, Y+2	; 0x02
    29da:	9b 81       	ldd	r25, Y+3	; 0x03
    29dc:	fc 01       	movw	r30, r24
    29de:	e2 0f       	add	r30, r18
    29e0:	f3 1f       	adc	r31, r19
    29e2:	80 81       	ld	r24, Z
    29e4:	88 23       	and	r24, r24
    29e6:	39 f7       	brne	.-50     	; 0x29b6 <send_string+0x14>
	{
		send_byte(str[i]);
		i++;
	}
	send_byte(str[i]);/*to send null with characters*/
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	8a 81       	ldd	r24, Y+2	; 0x02
    29f0:	9b 81       	ldd	r25, Y+3	; 0x03
    29f2:	fc 01       	movw	r30, r24
    29f4:	e2 0f       	add	r30, r18
    29f6:	f3 1f       	adc	r31, r19
    29f8:	80 81       	ld	r24, Z
    29fa:	0e 94 ab 14 	call	0x2956	; 0x2956 <send_byte>
}
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <receive_string>:

void receive_string(uint8 *str)
{
    2a0a:	0f 93       	push	r16
    2a0c:	1f 93       	push	r17
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	00 d0       	rcall	.+0      	; 0x2a14 <receive_string+0xa>
    2a14:	0f 92       	push	r0
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	9b 83       	std	Y+3, r25	; 0x03
    2a1c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    2a1e:	19 82       	std	Y+1, r1	; 0x01
	str[i]=receive_byte();
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2a:	8c 01       	movw	r16, r24
    2a2c:	02 0f       	add	r16, r18
    2a2e:	13 1f       	adc	r17, r19
    2a30:	0e 94 c2 14 	call	0x2984	; 0x2984 <receive_byte>
    2a34:	f8 01       	movw	r30, r16
    2a36:	80 83       	st	Z, r24
    2a38:	0f c0       	rjmp	.+30     	; 0x2a58 <receive_string+0x4e>
	while(str[i] != '\0') /*'\0'is symbol for the end of string*/
	{
		i++;
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	8f 5f       	subi	r24, 0xFF	; 255
    2a3e:	89 83       	std	Y+1, r24	; 0x01
		str[i]=receive_byte();
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4a:	8c 01       	movw	r16, r24
    2a4c:	02 0f       	add	r16, r18
    2a4e:	13 1f       	adc	r17, r19
    2a50:	0e 94 c2 14 	call	0x2984	; 0x2984 <receive_byte>
    2a54:	f8 01       	movw	r30, r16
    2a56:	80 83       	st	Z, r24

void receive_string(uint8 *str)
{
	uint8 i =0;
	str[i]=receive_byte();
	while(str[i] != '\0') /*'\0'is symbol for the end of string*/
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	9b 81       	ldd	r25, Y+3	; 0x03
    2a62:	fc 01       	movw	r30, r24
    2a64:	e2 0f       	add	r30, r18
    2a66:	f3 1f       	adc	r31, r19
    2a68:	80 81       	ld	r24, Z
    2a6a:	88 23       	and	r24, r24
    2a6c:	31 f7       	brne	.-52     	; 0x2a3a <receive_string+0x30>
	{
		i++;
		str[i]=receive_byte();
	}
}
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	08 95       	ret

00002a7e <__vector_11>:
ISR(USART_RXC_vect)
{
    2a7e:	1f 92       	push	r1
    2a80:	0f 92       	push	r0
    2a82:	0f b6       	in	r0, 0x3f	; 63
    2a84:	0f 92       	push	r0
    2a86:	11 24       	eor	r1, r1
    2a88:	8f 93       	push	r24
    2a8a:	ef 93       	push	r30
    2a8c:	ff 93       	push	r31
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    correct=UDR;
    2a96:	ec e2       	ldi	r30, 0x2C	; 44
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	80 93 47 01 	sts	0x0147, r24

}
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	ff 91       	pop	r31
    2aa6:	ef 91       	pop	r30
    2aa8:	8f 91       	pop	r24
    2aaa:	0f 90       	pop	r0
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	0f 90       	pop	r0
    2ab0:	1f 90       	pop	r1
    2ab2:	18 95       	reti

00002ab4 <__prologue_saves__>:
    2ab4:	2f 92       	push	r2
    2ab6:	3f 92       	push	r3
    2ab8:	4f 92       	push	r4
    2aba:	5f 92       	push	r5
    2abc:	6f 92       	push	r6
    2abe:	7f 92       	push	r7
    2ac0:	8f 92       	push	r8
    2ac2:	9f 92       	push	r9
    2ac4:	af 92       	push	r10
    2ac6:	bf 92       	push	r11
    2ac8:	cf 92       	push	r12
    2aca:	df 92       	push	r13
    2acc:	ef 92       	push	r14
    2ace:	ff 92       	push	r15
    2ad0:	0f 93       	push	r16
    2ad2:	1f 93       	push	r17
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	ca 1b       	sub	r28, r26
    2ade:	db 0b       	sbc	r29, r27
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	09 94       	ijmp

00002aec <__epilogue_restores__>:
    2aec:	2a 88       	ldd	r2, Y+18	; 0x12
    2aee:	39 88       	ldd	r3, Y+17	; 0x11
    2af0:	48 88       	ldd	r4, Y+16	; 0x10
    2af2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2af4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2af6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2af8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2afa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2afc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2afe:	b9 84       	ldd	r11, Y+9	; 0x09
    2b00:	c8 84       	ldd	r12, Y+8	; 0x08
    2b02:	df 80       	ldd	r13, Y+7	; 0x07
    2b04:	ee 80       	ldd	r14, Y+6	; 0x06
    2b06:	fd 80       	ldd	r15, Y+5	; 0x05
    2b08:	0c 81       	ldd	r16, Y+4	; 0x04
    2b0a:	1b 81       	ldd	r17, Y+3	; 0x03
    2b0c:	aa 81       	ldd	r26, Y+2	; 0x02
    2b0e:	b9 81       	ldd	r27, Y+1	; 0x01
    2b10:	ce 0f       	add	r28, r30
    2b12:	d1 1d       	adc	r29, r1
    2b14:	0f b6       	in	r0, 0x3f	; 63
    2b16:	f8 94       	cli
    2b18:	de bf       	out	0x3e, r29	; 62
    2b1a:	0f be       	out	0x3f, r0	; 63
    2b1c:	cd bf       	out	0x3d, r28	; 61
    2b1e:	ed 01       	movw	r28, r26
    2b20:	08 95       	ret

00002b22 <itoa>:
    2b22:	fb 01       	movw	r30, r22
    2b24:	9f 01       	movw	r18, r30
    2b26:	e8 94       	clt
    2b28:	42 30       	cpi	r20, 0x02	; 2
    2b2a:	c4 f0       	brlt	.+48     	; 0x2b5c <itoa+0x3a>
    2b2c:	45 32       	cpi	r20, 0x25	; 37
    2b2e:	b4 f4       	brge	.+44     	; 0x2b5c <itoa+0x3a>
    2b30:	4a 30       	cpi	r20, 0x0A	; 10
    2b32:	29 f4       	brne	.+10     	; 0x2b3e <itoa+0x1c>
    2b34:	97 fb       	bst	r25, 7
    2b36:	1e f4       	brtc	.+6      	; 0x2b3e <itoa+0x1c>
    2b38:	90 95       	com	r25
    2b3a:	81 95       	neg	r24
    2b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3e:	64 2f       	mov	r22, r20
    2b40:	77 27       	eor	r23, r23
    2b42:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__udivmodhi4>
    2b46:	80 5d       	subi	r24, 0xD0	; 208
    2b48:	8a 33       	cpi	r24, 0x3A	; 58
    2b4a:	0c f0       	brlt	.+2      	; 0x2b4e <itoa+0x2c>
    2b4c:	89 5d       	subi	r24, 0xD9	; 217
    2b4e:	81 93       	st	Z+, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	00 97       	sbiw	r24, 0x00	; 0
    2b54:	a1 f7       	brne	.-24     	; 0x2b3e <itoa+0x1c>
    2b56:	16 f4       	brtc	.+4      	; 0x2b5c <itoa+0x3a>
    2b58:	5d e2       	ldi	r21, 0x2D	; 45
    2b5a:	51 93       	st	Z+, r21
    2b5c:	10 82       	st	Z, r1
    2b5e:	c9 01       	movw	r24, r18
    2b60:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <strrev>

00002b64 <strrev>:
    2b64:	dc 01       	movw	r26, r24
    2b66:	fc 01       	movw	r30, r24
    2b68:	67 2f       	mov	r22, r23
    2b6a:	71 91       	ld	r23, Z+
    2b6c:	77 23       	and	r23, r23
    2b6e:	e1 f7       	brne	.-8      	; 0x2b68 <strrev+0x4>
    2b70:	32 97       	sbiw	r30, 0x02	; 2
    2b72:	04 c0       	rjmp	.+8      	; 0x2b7c <strrev+0x18>
    2b74:	7c 91       	ld	r23, X
    2b76:	6d 93       	st	X+, r22
    2b78:	70 83       	st	Z, r23
    2b7a:	62 91       	ld	r22, -Z
    2b7c:	ae 17       	cp	r26, r30
    2b7e:	bf 07       	cpc	r27, r31
    2b80:	c8 f3       	brcs	.-14     	; 0x2b74 <strrev+0x10>
    2b82:	08 95       	ret

00002b84 <__udivmodhi4>:
    2b84:	aa 1b       	sub	r26, r26
    2b86:	bb 1b       	sub	r27, r27
    2b88:	51 e1       	ldi	r21, 0x11	; 17
    2b8a:	07 c0       	rjmp	.+14     	; 0x2b9a <__udivmodhi4_ep>

00002b8c <__udivmodhi4_loop>:
    2b8c:	aa 1f       	adc	r26, r26
    2b8e:	bb 1f       	adc	r27, r27
    2b90:	a6 17       	cp	r26, r22
    2b92:	b7 07       	cpc	r27, r23
    2b94:	10 f0       	brcs	.+4      	; 0x2b9a <__udivmodhi4_ep>
    2b96:	a6 1b       	sub	r26, r22
    2b98:	b7 0b       	sbc	r27, r23

00002b9a <__udivmodhi4_ep>:
    2b9a:	88 1f       	adc	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	5a 95       	dec	r21
    2ba0:	a9 f7       	brne	.-22     	; 0x2b8c <__udivmodhi4_loop>
    2ba2:	80 95       	com	r24
    2ba4:	90 95       	com	r25
    2ba6:	bc 01       	movw	r22, r24
    2ba8:	cd 01       	movw	r24, r26
    2baa:	08 95       	ret

00002bac <_exit>:
    2bac:	f8 94       	cli

00002bae <__stop_program>:
    2bae:	ff cf       	rjmp	.-2      	; 0x2bae <__stop_program>
