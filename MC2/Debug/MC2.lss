
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001d96  00001e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800068  00800068  00001e32  2**0
                  ALLOC
  3 .stab         000022d4  00000000  00000000  00001e34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c18  00000000  00000000  00004108  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006c19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000088b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000946f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 37       	cpi	r26, 0x72	; 114
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e9       	ldi	r30, 0x96	; 150
      78:	fd e1       	ldi	r31, 0x1D	; 29
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 60 07 	call	0xec0	; 0xec0 <main>
      8a:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Init_Alarm>:
 */

#include"buzzer.h"

void Init_Alarm()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*make the pin that connected to alarm is output*/
	SET_BIT(DDIR_ALARM,B1);
     b4e:	a1 e3       	ldi	r26, 0x31	; 49
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e3       	ldi	r30, 0x31	; 49
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	84 60       	ori	r24, 0x04	; 4
     b5a:	8c 93       	st	X, r24
	/*initial value of alarm is off*/
	CLEAR_BIT(PORT_ALARM,B1);
     b5c:	a2 e3       	ldi	r26, 0x32	; 50
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e2 e3       	ldi	r30, 0x32	; 50
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8b 7f       	andi	r24, 0xFB	; 251
     b68:	8c 93       	st	X, r24
}
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <Alarm_On>:

void Alarm_On()
{
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORT_ALARM,B1);
     b78:	a2 e3       	ldi	r26, 0x32	; 50
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e2 e3       	ldi	r30, 0x32	; 50
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <Alarm_Off>:

void Alarm_Off()
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(PORT_ALARM,B1);
     b94:	a2 e3       	ldi	r26, 0x32	; 50
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e2 e3       	ldi	r30, 0x32	; 50
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8b 7f       	andi	r24, 0xFB	; 251
     ba0:	8c 93       	st	X, r24
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <Init_Dc_Motor>:

#include"dc_motor.h"

/*initialize Dc motor*/
void Init_Dc_Motor()
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
	/*make 2 pins of mc that connected to 2 input of dc motor are output pins by set them*/
	 SET_BIT(DDIR_PORT_DC,Line1 );
     bb0:	a1 e3       	ldi	r26, 0x31	; 49
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e1 e3       	ldi	r30, 0x31	; 49
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 61       	ori	r24, 0x10	; 16
     bbc:	8c 93       	st	X, r24
	 SET_BIT(DDIR_PORT_DC,Line2 );
     bbe:	a1 e3       	ldi	r26, 0x31	; 49
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e1 e3       	ldi	r30, 0x31	; 49
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	80 62       	ori	r24, 0x20	; 32
     bca:	8c 93       	st	X, r24
    /*make initial operation of dc motor is to be stopped (not work) by clear 2 output pins that connected to dc motor */
	 CLEAR_BIT(PORT_DC,Line1);
     bcc:	a2 e3       	ldi	r26, 0x32	; 50
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e2 e3       	ldi	r30, 0x32	; 50
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8f 7e       	andi	r24, 0xEF	; 239
     bd8:	8c 93       	st	X, r24
	 CLEAR_BIT(PORT_DC,Line2);
     bda:	a2 e3       	ldi	r26, 0x32	; 50
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e2 e3       	ldi	r30, 0x32	; 50
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	8f 7d       	andi	r24, 0xDF	; 223
     be6:	8c 93       	st	X, r24
}
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <Clk_Wise>:

/*to make dc motor work at clock wise direction ..make first pin is low and second is high*/
void Clk_Wise()
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(PORT_DC,Line1);
     bf6:	a2 e3       	ldi	r26, 0x32	; 50
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e2 e3       	ldi	r30, 0x32	; 50
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8f 7e       	andi	r24, 0xEF	; 239
     c02:	8c 93       	st	X, r24
	SET_BIT(PORT_DC,Line2);
     c04:	a2 e3       	ldi	r26, 0x32	; 50
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e2 e3       	ldi	r30, 0x32	; 50
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 62       	ori	r24, 0x20	; 32
     c10:	8c 93       	st	X, r24
}
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <Anti_Clk_Wise>:

/*to make dc otor work at anti clock wise ..make first pin is high and second pin is low*/
void Anti_Clk_Wise()
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORT_DC,Line1);
     c20:	a2 e3       	ldi	r26, 0x32	; 50
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e2 e3       	ldi	r30, 0x32	; 50
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	80 61       	ori	r24, 0x10	; 16
     c2c:	8c 93       	st	X, r24
	CLEAR_BIT(PORT_DC,Line2);
     c2e:	a2 e3       	ldi	r26, 0x32	; 50
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e2 e3       	ldi	r30, 0x32	; 50
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8f 7d       	andi	r24, 0xDF	; 223
     c3a:	8c 93       	st	X, r24
}
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <Stop_Motor>:

/*stop motor*/
void Stop_Motor()
{
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(PORT_DC,Line1);
     c4a:	a2 e3       	ldi	r26, 0x32	; 50
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e2 e3       	ldi	r30, 0x32	; 50
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	8f 7e       	andi	r24, 0xEF	; 239
     c56:	8c 93       	st	X, r24
	CLEAR_BIT(PORT_DC,Line2);
     c58:	a2 e3       	ldi	r26, 0x32	; 50
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e2 e3       	ldi	r30, 0x32	; 50
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	8f 7d       	andi	r24, 0xDF	; 223
     c64:	8c 93       	st	X, r24
}
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <write_eeprom>:


/*this function receive the address of memory location of eeprom
  the place that data will stored at to transmit it to i2c and receive data */
uint8 write_eeprom(uint16 address,uint8 data)
{
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	00 d0       	rcall	.+0      	; 0xc72 <write_eeprom+0x6>
     c72:	00 d0       	rcall	.+0      	; 0xc74 <write_eeprom+0x8>
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	9a 83       	std	Y+2, r25	; 0x02
     c7a:	89 83       	std	Y+1, r24	; 0x01
     c7c:	6b 83       	std	Y+3, r22	; 0x03
	start_bit_i2c();
     c7e:	0e 94 f0 06 	call	0xde0	; 0xde0 <start_bit_i2c>
	if(read_status_i2c() != 0x08) /*ask if reg status =0x08 (0x08 indicate that start bit is transmitted at bus of i2c)*/
     c82:	0e 94 51 07 	call	0xea2	; 0xea2 <read_status_i2c>
     c86:	88 30       	cpi	r24, 0x08	; 8
     c88:	11 f0       	breq	.+4      	; 0xc8e <write_eeprom+0x22>
		return 0;                 /*return false*/
     c8a:	1c 82       	std	Y+4, r1	; 0x04
     c8c:	28 c0       	rjmp	.+80     	; 0xcde <write_eeprom+0x72>
	/*A is fixed the last 4 bits if address of eeprom ..(address & 0x0700)for take the bits of address number 10,9,8
	 * and transmit write bit( (1010 0000 | (0000 0111 0001 0001 & 0000 0111 0000 0000)>>7 ... 0000 1110)
	 */
	write_i2c((uint8)(0xA0 | ((address & 0x0700)>>7)));
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	80 70       	andi	r24, 0x00	; 0
     c94:	97 70       	andi	r25, 0x07	; 7
     c96:	88 0f       	add	r24, r24
     c98:	89 2f       	mov	r24, r25
     c9a:	88 1f       	adc	r24, r24
     c9c:	99 0b       	sbc	r25, r25
     c9e:	91 95       	neg	r25
     ca0:	80 6a       	ori	r24, 0xA0	; 160
     ca2:	0e 94 14 07 	call	0xe28	; 0xe28 <write_i2c>
	if(read_status_i2c() != 0x18)      /*master transmit slave address +R/W bit+ack received*/
     ca6:	0e 94 51 07 	call	0xea2	; 0xea2 <read_status_i2c>
     caa:	88 31       	cpi	r24, 0x18	; 24
     cac:	11 f0       	breq	.+4      	; 0xcb2 <write_eeprom+0x46>
		return 0;
     cae:	1c 82       	std	Y+4, r1	; 0x04
     cb0:	16 c0       	rjmp	.+44     	; 0xcde <write_eeprom+0x72>
	write_i2c((uint8)(address)); /*transmit the rest of device address to i2c*/
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	0e 94 14 07 	call	0xe28	; 0xe28 <write_i2c>
	if(read_status_i2c() != 0x28) /*master transmit data and ack has been received from slave*/
     cb8:	0e 94 51 07 	call	0xea2	; 0xea2 <read_status_i2c>
     cbc:	88 32       	cpi	r24, 0x28	; 40
     cbe:	11 f0       	breq	.+4      	; 0xcc4 <write_eeprom+0x58>
		return 0;
     cc0:	1c 82       	std	Y+4, r1	; 0x04
     cc2:	0d c0       	rjmp	.+26     	; 0xcde <write_eeprom+0x72>
	write_i2c(data); /*transmit data that will be stored at eeprom */
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	0e 94 14 07 	call	0xe28	; 0xe28 <write_i2c>
	if(read_status_i2c() != 0x28)
     cca:	0e 94 51 07 	call	0xea2	; 0xea2 <read_status_i2c>
     cce:	88 32       	cpi	r24, 0x28	; 40
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <write_eeprom+0x6a>
		return 0;
     cd2:	1c 82       	std	Y+4, r1	; 0x04
     cd4:	04 c0       	rjmp	.+8      	; 0xcde <write_eeprom+0x72>
	stop_bit_i2c();
     cd6:	0e 94 00 07 	call	0xe00	; 0xe00 <stop_bit_i2c>
	return 1; /* the task is finished*/
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	8c 83       	std	Y+4, r24	; 0x04
     cde:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <read_eeprom>:
 * 4-send repeated start
 * 5-send slave address + read bit (1)
 * 6-receive the data by using pointer
 */
uint8 read_eeprom(uint16 address,uint8 *ptr_data)
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <read_eeprom+0x6>
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <read_eeprom+0x8>
     cf6:	0f 92       	push	r0
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	9a 83       	std	Y+2, r25	; 0x02
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	7c 83       	std	Y+4, r23	; 0x04
     d02:	6b 83       	std	Y+3, r22	; 0x03
	start_bit_i2c();
     d04:	0e 94 f0 06 	call	0xde0	; 0xde0 <start_bit_i2c>
	if(read_status_i2c() != 0x08)
     d08:	0e 94 51 07 	call	0xea2	; 0xea2 <read_status_i2c>
     d0c:	88 30       	cpi	r24, 0x08	; 8
     d0e:	11 f0       	breq	.+4      	; 0xd14 <read_eeprom+0x26>
		return 0;
     d10:	1d 82       	std	Y+5, r1	; 0x05
     d12:	44 c0       	rjmp	.+136    	; 0xd9c <read_eeprom+0xae>
	write_i2c((uint8)(0xA0 | ((address & 0x0700)>>7)));
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	9a 81       	ldd	r25, Y+2	; 0x02
     d18:	80 70       	andi	r24, 0x00	; 0
     d1a:	97 70       	andi	r25, 0x07	; 7
     d1c:	88 0f       	add	r24, r24
     d1e:	89 2f       	mov	r24, r25
     d20:	88 1f       	adc	r24, r24
     d22:	99 0b       	sbc	r25, r25
     d24:	91 95       	neg	r25
     d26:	80 6a       	ori	r24, 0xA0	; 160
     d28:	0e 94 14 07 	call	0xe28	; 0xe28 <write_i2c>
	if(read_status_i2c() != 0x18)
     d2c:	0e 94 51 07 	call	0xea2	; 0xea2 <read_status_i2c>
     d30:	88 31       	cpi	r24, 0x18	; 24
     d32:	11 f0       	breq	.+4      	; 0xd38 <read_eeprom+0x4a>
		return 0;
     d34:	1d 82       	std	Y+5, r1	; 0x05
     d36:	32 c0       	rjmp	.+100    	; 0xd9c <read_eeprom+0xae>
	write_i2c((uint8)(address));
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	0e 94 14 07 	call	0xe28	; 0xe28 <write_i2c>
	if(read_status_i2c() != 0x28)
     d3e:	0e 94 51 07 	call	0xea2	; 0xea2 <read_status_i2c>
     d42:	88 32       	cpi	r24, 0x28	; 40
     d44:	11 f0       	breq	.+4      	; 0xd4a <read_eeprom+0x5c>
		return 0;
     d46:	1d 82       	std	Y+5, r1	; 0x05
     d48:	29 c0       	rjmp	.+82     	; 0xd9c <read_eeprom+0xae>
	start_bit_i2c(); /*repeated start bit*/
     d4a:	0e 94 f0 06 	call	0xde0	; 0xde0 <start_bit_i2c>
	if(read_status_i2c() != 0x10)/* 0x10 for repeated start bit*/
     d4e:	0e 94 51 07 	call	0xea2	; 0xea2 <read_status_i2c>
     d52:	80 31       	cpi	r24, 0x10	; 16
     d54:	11 f0       	breq	.+4      	; 0xd5a <read_eeprom+0x6c>
		return 0;
     d56:	1d 82       	std	Y+5, r1	; 0x05
     d58:	21 c0       	rjmp	.+66     	; 0xd9c <read_eeprom+0xae>
	write_i2c((uint8)((0xA0) | ((address & 0x0700)>>7) | 1));/*send device address that will connect with it + read bit*/
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	9a 81       	ldd	r25, Y+2	; 0x02
     d5e:	80 70       	andi	r24, 0x00	; 0
     d60:	97 70       	andi	r25, 0x07	; 7
     d62:	88 0f       	add	r24, r24
     d64:	89 2f       	mov	r24, r25
     d66:	88 1f       	adc	r24, r24
     d68:	99 0b       	sbc	r25, r25
     d6a:	91 95       	neg	r25
     d6c:	81 6a       	ori	r24, 0xA1	; 161
     d6e:	0e 94 14 07 	call	0xe28	; 0xe28 <write_i2c>
	if(read_status_i2c() != 0x40) /*0x40 for transmit data + read bit+ack received*/
     d72:	0e 94 51 07 	call	0xea2	; 0xea2 <read_status_i2c>
     d76:	80 34       	cpi	r24, 0x40	; 64
     d78:	11 f0       	breq	.+4      	; 0xd7e <read_eeprom+0x90>
		return 0;
     d7a:	1d 82       	std	Y+5, r1	; 0x05
     d7c:	0f c0       	rjmp	.+30     	; 0xd9c <read_eeprom+0xae>
	*ptr_data=read_byte_Nack_i2c(); /*the location that ptr_data point it ,it will contain data that you want to read*/
     d7e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <read_byte_Nack_i2c>
     d82:	eb 81       	ldd	r30, Y+3	; 0x03
     d84:	fc 81       	ldd	r31, Y+4	; 0x04
     d86:	80 83       	st	Z, r24
	if(read_status_i2c() != 0x58)   /*0x58 indicates master receive data and doesnt send acknowledgment*/
     d88:	0e 94 51 07 	call	0xea2	; 0xea2 <read_status_i2c>
     d8c:	88 35       	cpi	r24, 0x58	; 88
     d8e:	11 f0       	breq	.+4      	; 0xd94 <read_eeprom+0xa6>
		return 0;
     d90:	1d 82       	std	Y+5, r1	; 0x05
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <read_eeprom+0xae>
	stop_bit_i2c();
     d94:	0e 94 00 07 	call	0xe00	; 0xe00 <stop_bit_i2c>
	return 1; /*1 indicates success operation*/
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	8d 83       	std	Y+5, r24	; 0x05
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <i2c_init>:
 */

#include"i2c.h"
#include"external_eeprom.h"
void i2c_init()
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
	//TWCR = (1<<TWEN);/*enable i2c*/
	TWBR = 0x02;// to choose bit rate of i2c ..for frequency of i2c
     db6:	e0 e2       	ldi	r30, 0x20	; 32
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	80 83       	st	Z, r24
	TWSR &= 0xfc; //Prescaler Value=1 for freq clk of i2c
     dbe:	a1 e2       	ldi	r26, 0x21	; 33
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e1 e2       	ldi	r30, 0x21	; 33
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	8c 7f       	andi	r24, 0xFC	; 252
     dca:	8c 93       	st	X, r24
	TWSR = 0x00;
     dcc:	e1 e2       	ldi	r30, 0x21	; 33
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	10 82       	st	Z, r1
	TWAR=0x01;//its my address of my micro controller,if any another device want to contact me when am slave by this address
     dd2:	e2 e2       	ldi	r30, 0x22	; 34
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	80 83       	st	Z, r24


}
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <start_bit_i2c>:
void start_bit_i2c()
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62

	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWSTA);//clear flag , enable TWI and send start bit
     de8:	e6 e5       	ldi	r30, 0x56	; 86
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	84 ea       	ldi	r24, 0xA4	; 164
     dee:	80 83       	st	Z, r24
	while( IS_BIT_CLEAR(TWCR,TWINT));//wait until start bit is transmitted
     df0:	e6 e5       	ldi	r30, 0x56	; 86
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	88 23       	and	r24, r24
     df8:	dc f7       	brge	.-10     	; 0xdf0 <start_bit_i2c+0x10>

}
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <stop_bit_i2c>:

void stop_bit_i2c()
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62

	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWSTO);//clear flag , enable TWI and send stop bit
     e08:	e6 e5       	ldi	r30, 0x56	; 86
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	84 e9       	ldi	r24, 0x94	; 148
     e0e:	80 83       	st	Z, r24
	while( IS_BIT_SET(TWCR,TWSTO));//wait until stop bit is executed
     e10:	e6 e5       	ldi	r30, 0x56	; 86
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	80 71       	andi	r24, 0x10	; 16
     e1c:	90 70       	andi	r25, 0x00	; 0
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	b9 f7       	brne	.-18     	; 0xe10 <stop_bit_i2c+0x10>

}
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <write_i2c>:

void write_i2c(uint8 data)
{
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	0f 92       	push	r0
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;//for transmit data
     e34:	e3 e2       	ldi	r30, 0x23	; 35
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	80 83       	st	Z, r24
	TWCR=(1<<TWEN)|(1<<TWINT);// enable TWI and clear the TWI interrupt flag (automatic flag)
     e3c:	e6 e5       	ldi	r30, 0x56	; 86
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	84 e8       	ldi	r24, 0x84	; 132
     e42:	80 83       	st	Z, r24
	while( IS_BIT_CLEAR(TWCR,TWINT)); //wait until TWINT is set by hardware for transfer is complete
     e44:	e6 e5       	ldi	r30, 0x56	; 86
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	88 23       	and	r24, r24
     e4c:	dc f7       	brge	.-10     	; 0xe44 <write_i2c+0x1c>


}
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <read_byte_ack_i2c>:

uint8 read_byte_ack_i2c()
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);// enable TWI and clear the TWI interrupt flag (automatic flag)..enable acknowledgment
     e5e:	e6 e5       	ldi	r30, 0x56	; 86
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	84 ec       	ldi	r24, 0xC4	; 196
     e64:	80 83       	st	Z, r24
	while( IS_BIT_CLEAR(TWCR,TWINT)); //wait until receive is complete
     e66:	e6 e5       	ldi	r30, 0x56	; 86
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	88 23       	and	r24, r24
     e6e:	dc f7       	brge	.-10     	; 0xe66 <read_byte_ack_i2c+0x10>
	return TWDR;  //TWDR is the register that receive data
     e70:	e3 e2       	ldi	r30, 0x23	; 35
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
}
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <read_byte_Nack_i2c>:

uint8 read_byte_Nack_i2c()
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT);// enable TWI and clear the TWI interrupt flag (automatic flag)
     e84:	e6 e5       	ldi	r30, 0x56	; 86
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	84 e8       	ldi	r24, 0x84	; 132
     e8a:	80 83       	st	Z, r24
	while( IS_BIT_CLEAR(TWCR,TWINT));//wait until receive is complete
     e8c:	e6 e5       	ldi	r30, 0x56	; 86
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	88 23       	and	r24, r24
     e94:	dc f7       	brge	.-10     	; 0xe8c <read_byte_Nack_i2c+0x10>
	return TWDR;  //TWDR is the register that receive data
     e96:	e3 e2       	ldi	r30, 0x23	; 35
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z

}
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <read_status_i2c>:

uint8 read_status_i2c() //this function to read what happen on buses of i2c ..by read the reg TWSR
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	status= (TWSR & 0xf8); /*the last of 5 bits indicates status of the TWI logic and the Two-wire Serial Bus
     eac:	e1 e2       	ldi	r30, 0x21	; 33
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	88 7f       	andi	r24, 0xF8	; 248
     eb4:	89 83       	std	Y+1, r24	; 0x01
	                        so we make TWSR & with 1111 1000 ..write zeros on 3 first bits*/
	return status;
     eb6:	89 81       	ldd	r24, Y+1	; 0x01

}
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <main>:
uint8 recv_byte;
uint8 Tick=0;


int main()
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	eb 97       	sbiw	r28, 0x3b	; 59
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SREG,7);
     ed4:	af e5       	ldi	r26, 0x5F	; 95
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ef e5       	ldi	r30, 0x5F	; 95
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	80 68       	ori	r24, 0x80	; 128
     ee0:	8c 93       	st	X, r24
	uint8 check_word=0;
     ee2:	1b ae       	std	Y+59, r1	; 0x3b
	uint8 try =0;
     ee4:	1a ae       	std	Y+58, r1	; 0x3a
	init_uart();
     ee6:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <init_uart>
	i2c_init();/* initialize i2c*/
     eea:	0e 94 d7 06 	call	0xdae	; 0xdae <i2c_init>
	Init_Alarm();
     eee:	0e 94 a3 05 	call	0xb46	; 0xb46 <Init_Alarm>
    Timer_int();
     ef2:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <Timer_int>
	Init_Dc_Motor();
     ef6:	0e 94 d4 05 	call	0xba8	; 0xba8 <Init_Dc_Motor>
	recv_byte=receive_byte();
     efa:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
     efe:	80 93 6c 00 	sts	0x006C, r24
	while(recv_byte!=0x11);/*MC2 wait until MC1 is ready*/
     f02:	80 91 6c 00 	lds	r24, 0x006C
     f06:	81 31       	cpi	r24, 0x11	; 17
     f08:	e1 f7       	brne	.-8      	; 0xf02 <main+0x42>
     f0a:	0b c0       	rjmp	.+22     	; 0xf22 <main+0x62>
	 * this function return value ..if this value = 0 repeat this function ..if not , go out from this loop
	 * check_word is 0 when user confirm wrong password ....check_word=1 ,when user confirm right password
	 */
	while(check_word==0)
	{
		recv_byte=receive_byte();
     f0c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
     f10:	80 93 6c 00 	sts	0x006C, r24
		while(recv_byte!=0x16);
     f14:	80 91 6c 00 	lds	r24, 0x006C
     f18:	86 31       	cpi	r24, 0x16	; 22
     f1a:	e1 f7       	brne	.-8      	; 0xf14 <main+0x54>
	    check_word=password_first_time();
     f1c:	0e 94 32 0c 	call	0x1864	; 0x1864 <password_first_time>
     f20:	8b af       	std	Y+59, r24	; 0x3b
	/*this code will be done one time..password_first_time() this function will receive the password
	 * is written by user to store it at eeprom..at first loop check word is zero to use this function
	 * this function return value ..if this value = 0 repeat this function ..if not , go out from this loop
	 * check_word is 0 when user confirm wrong password ....check_word=1 ,when user confirm right password
	 */
	while(check_word==0)
     f22:	8b ad       	ldd	r24, Y+59	; 0x3b
     f24:	88 23       	and	r24, r24
     f26:	91 f3       	breq	.-28     	; 0xf0c <main+0x4c>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	aa e7       	ldi	r26, 0x7A	; 122
     f2e:	b4 e4       	ldi	r27, 0x44	; 68
     f30:	8d ab       	std	Y+53, r24	; 0x35
     f32:	9e ab       	std	Y+54, r25	; 0x36
     f34:	af ab       	std	Y+55, r26	; 0x37
     f36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f38:	6d a9       	ldd	r22, Y+53	; 0x35
     f3a:	7e a9       	ldd	r23, Y+54	; 0x36
     f3c:	8f a9       	ldd	r24, Y+55	; 0x37
     f3e:	98 ad       	ldd	r25, Y+56	; 0x38
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	4a e7       	ldi	r20, 0x7A	; 122
     f46:	53 e4       	ldi	r21, 0x43	; 67
     f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	89 ab       	std	Y+49, r24	; 0x31
     f52:	9a ab       	std	Y+50, r25	; 0x32
     f54:	ab ab       	std	Y+51, r26	; 0x33
     f56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f58:	69 a9       	ldd	r22, Y+49	; 0x31
     f5a:	7a a9       	ldd	r23, Y+50	; 0x32
     f5c:	8b a9       	ldd	r24, Y+51	; 0x33
     f5e:	9c a9       	ldd	r25, Y+52	; 0x34
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e8       	ldi	r20, 0x80	; 128
     f66:	5f e3       	ldi	r21, 0x3F	; 63
     f68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f6c:	88 23       	and	r24, r24
     f6e:	2c f4       	brge	.+10     	; 0xf7a <main+0xba>
		__ticks = 1;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	98 ab       	std	Y+48, r25	; 0x30
     f76:	8f a7       	std	Y+47, r24	; 0x2f
     f78:	3f c0       	rjmp	.+126    	; 0xff8 <main+0x138>
	else if (__tmp > 65535)
     f7a:	69 a9       	ldd	r22, Y+49	; 0x31
     f7c:	7a a9       	ldd	r23, Y+50	; 0x32
     f7e:	8b a9       	ldd	r24, Y+51	; 0x33
     f80:	9c a9       	ldd	r25, Y+52	; 0x34
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	4f e7       	ldi	r20, 0x7F	; 127
     f88:	57 e4       	ldi	r21, 0x47	; 71
     f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f8e:	18 16       	cp	r1, r24
     f90:	4c f5       	brge	.+82     	; 0xfe4 <main+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f92:	6d a9       	ldd	r22, Y+53	; 0x35
     f94:	7e a9       	ldd	r23, Y+54	; 0x36
     f96:	8f a9       	ldd	r24, Y+55	; 0x37
     f98:	98 ad       	ldd	r25, Y+56	; 0x38
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e2       	ldi	r20, 0x20	; 32
     fa0:	51 e4       	ldi	r21, 0x41	; 65
     fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	bc 01       	movw	r22, r24
     fac:	cd 01       	movw	r24, r26
     fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	98 ab       	std	Y+48, r25	; 0x30
     fb8:	8f a7       	std	Y+47, r24	; 0x2f
     fba:	0f c0       	rjmp	.+30     	; 0xfda <main+0x11a>
     fbc:	89 e1       	ldi	r24, 0x19	; 25
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	9e a7       	std	Y+46, r25	; 0x2e
     fc2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fc4:	8d a5       	ldd	r24, Y+45	; 0x2d
     fc6:	9e a5       	ldd	r25, Y+46	; 0x2e
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <main+0x108>
     fcc:	9e a7       	std	Y+46, r25	; 0x2e
     fce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd0:	8f a5       	ldd	r24, Y+47	; 0x2f
     fd2:	98 a9       	ldd	r25, Y+48	; 0x30
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	98 ab       	std	Y+48, r25	; 0x30
     fd8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fda:	8f a5       	ldd	r24, Y+47	; 0x2f
     fdc:	98 a9       	ldd	r25, Y+48	; 0x30
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	69 f7       	brne	.-38     	; 0xfbc <main+0xfc>
     fe2:	14 c0       	rjmp	.+40     	; 0x100c <main+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe4:	69 a9       	ldd	r22, Y+49	; 0x31
     fe6:	7a a9       	ldd	r23, Y+50	; 0x32
     fe8:	8b a9       	ldd	r24, Y+51	; 0x33
     fea:	9c a9       	ldd	r25, Y+52	; 0x34
     fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	98 ab       	std	Y+48, r25	; 0x30
     ff6:	8f a7       	std	Y+47, r24	; 0x2f
     ff8:	8f a5       	ldd	r24, Y+47	; 0x2f
     ffa:	98 a9       	ldd	r25, Y+48	; 0x30
     ffc:	9c a7       	std	Y+44, r25	; 0x2c
     ffe:	8b a7       	std	Y+43, r24	; 0x2b
    1000:	8b a5       	ldd	r24, Y+43	; 0x2b
    1002:	9c a5       	ldd	r25, Y+44	; 0x2c
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <main+0x144>
    1008:	9c a7       	std	Y+44, r25	; 0x2c
    100a:	8b a7       	std	Y+43, r24	; 0x2b
	}
	_delay_ms(1000);
	while(1)
	{

        recv_byte=receive_byte();
    100c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    1010:	80 93 6c 00 	sts	0x006C, r24
        while(recv_byte!='R');/*wait until MC2 is be ready then receive the key pressed '+' or '-' from MC1 */
    1014:	80 91 6c 00 	lds	r24, 0x006C
    1018:	82 35       	cpi	r24, 0x52	; 82
    101a:	e1 f7       	brne	.-8      	; 0x1014 <main+0x154>
        recv_byte=receive_byte();
    101c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    1020:	80 93 6c 00 	sts	0x006C, r24
		if(recv_byte=='+') /*if received byte is '+' ,call function that used to change password(change_password_mc2())*/
    1024:	80 91 6c 00 	lds	r24, 0x006C
    1028:	8b 32       	cpi	r24, 0x2B	; 43
    102a:	19 f4       	brne	.+6      	; 0x1032 <main+0x172>
		{
			change_password_mc2();
    102c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <change_password_mc2>
    1030:	ed cf       	rjmp	.-38     	; 0x100c <main+0x14c>
			//recv_byte=0;
		}
		/*if received byte is '-', call function that process on the password (Open_Door_Mc2())
		 * if the user enter right password ,the will be opened ...if not the door is still closed
		 */
		else if(recv_byte=='-')
    1032:	80 91 6c 00 	lds	r24, 0x006C
    1036:	8d 32       	cpi	r24, 0x2D	; 45
    1038:	49 f7       	brne	.-46     	; 0x100c <main+0x14c>
		{
			uint8 state;
			/*Open_Door_Mc2 return 0 or 1 ..if it returns 1 that mean the password is written by user is true
			 * if it returns 0 that mean the password is false
			 */
			state=Open_Door_Mc2();
    103a:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Open_Door_Mc2>
    103e:	89 af       	std	Y+57, r24	; 0x39
			recv_byte=receive_byte();
    1040:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    1044:	80 93 6c 00 	sts	0x006C, r24
			while(recv_byte !=0x14);/*wait until MC1 is ready for synchronization together at then next instructions*/
    1048:	80 91 6c 00 	lds	r24, 0x006C
    104c:	84 31       	cpi	r24, 0x14	; 20
    104e:	e1 f7       	brne	.-8      	; 0x1048 <main+0x188>
			/*if user enter right password the state will be =1 , dc motor will work for open door*/
			if(state==1)
    1050:	89 ad       	ldd	r24, Y+57	; 0x39
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	09 f0       	breq	.+2      	; 0x1058 <main+0x198>
    1056:	fe c0       	rjmp	.+508    	; 0x1254 <main+0x394>
			{
				recv_byte=receive_byte();
    1058:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    105c:	80 93 6c 00 	sts	0x006C, r24
				while(recv_byte !=0x10);/*wait until it receive 0x10 for synchronization*/
    1060:	80 91 6c 00 	lds	r24, 0x006C
    1064:	80 31       	cpi	r24, 0x10	; 16
    1066:	e1 f7       	brne	.-8      	; 0x1060 <main+0x1a0>
				try=0;/*put try = 0 here because if user  write a password wrong at first time */
    1068:	1a ae       	std	Y+58, r1	; 0x3a
				send_byte('o');
    106a:	8f e6       	ldi	r24, 0x6F	; 111
    106c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <send_byte>

				/*open door for 10 sec ..just 4 Ticks mean 1 seconds  passed ..> 40 Ticks mean 10 sec passed */
				//recv_byte=receive_byte();
				//while(recv_byte !='o');

				Clk_Wise();
    1070:	0e 94 f7 05 	call	0xbee	; 0xbee <Clk_Wise>
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e4       	ldi	r25, 0x40	; 64
    1078:	ac e1       	ldi	r26, 0x1C	; 28
    107a:	b6 e4       	ldi	r27, 0x46	; 70
    107c:	8f a3       	std	Y+39, r24	; 0x27
    107e:	98 a7       	std	Y+40, r25	; 0x28
    1080:	a9 a7       	std	Y+41, r26	; 0x29
    1082:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1084:	6f a1       	ldd	r22, Y+39	; 0x27
    1086:	78 a5       	ldd	r23, Y+40	; 0x28
    1088:	89 a5       	ldd	r24, Y+41	; 0x29
    108a:	9a a5       	ldd	r25, Y+42	; 0x2a
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	4a e7       	ldi	r20, 0x7A	; 122
    1092:	53 e4       	ldi	r21, 0x43	; 67
    1094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	8b a3       	std	Y+35, r24	; 0x23
    109e:	9c a3       	std	Y+36, r25	; 0x24
    10a0:	ad a3       	std	Y+37, r26	; 0x25
    10a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10a4:	6b a1       	ldd	r22, Y+35	; 0x23
    10a6:	7c a1       	ldd	r23, Y+36	; 0x24
    10a8:	8d a1       	ldd	r24, Y+37	; 0x25
    10aa:	9e a1       	ldd	r25, Y+38	; 0x26
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e8       	ldi	r20, 0x80	; 128
    10b2:	5f e3       	ldi	r21, 0x3F	; 63
    10b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10b8:	88 23       	and	r24, r24
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <main+0x206>
		__ticks = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	9a a3       	std	Y+34, r25	; 0x22
    10c2:	89 a3       	std	Y+33, r24	; 0x21
    10c4:	3f c0       	rjmp	.+126    	; 0x1144 <main+0x284>
	else if (__tmp > 65535)
    10c6:	6b a1       	ldd	r22, Y+35	; 0x23
    10c8:	7c a1       	ldd	r23, Y+36	; 0x24
    10ca:	8d a1       	ldd	r24, Y+37	; 0x25
    10cc:	9e a1       	ldd	r25, Y+38	; 0x26
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10da:	18 16       	cp	r1, r24
    10dc:	4c f5       	brge	.+82     	; 0x1130 <main+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10de:	6f a1       	ldd	r22, Y+39	; 0x27
    10e0:	78 a5       	ldd	r23, Y+40	; 0x28
    10e2:	89 a5       	ldd	r24, Y+41	; 0x29
    10e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e2       	ldi	r20, 0x20	; 32
    10ec:	51 e4       	ldi	r21, 0x41	; 65
    10ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	9a a3       	std	Y+34, r25	; 0x22
    1104:	89 a3       	std	Y+33, r24	; 0x21
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <main+0x266>
    1108:	89 e1       	ldi	r24, 0x19	; 25
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	98 a3       	std	Y+32, r25	; 0x20
    110e:	8f 8f       	std	Y+31, r24	; 0x1f
    1110:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1112:	98 a1       	ldd	r25, Y+32	; 0x20
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <main+0x254>
    1118:	98 a3       	std	Y+32, r25	; 0x20
    111a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111c:	89 a1       	ldd	r24, Y+33	; 0x21
    111e:	9a a1       	ldd	r25, Y+34	; 0x22
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	9a a3       	std	Y+34, r25	; 0x22
    1124:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1126:	89 a1       	ldd	r24, Y+33	; 0x21
    1128:	9a a1       	ldd	r25, Y+34	; 0x22
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	69 f7       	brne	.-38     	; 0x1108 <main+0x248>
    112e:	14 c0       	rjmp	.+40     	; 0x1158 <main+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1130:	6b a1       	ldd	r22, Y+35	; 0x23
    1132:	7c a1       	ldd	r23, Y+36	; 0x24
    1134:	8d a1       	ldd	r24, Y+37	; 0x25
    1136:	9e a1       	ldd	r25, Y+38	; 0x26
    1138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	9a a3       	std	Y+34, r25	; 0x22
    1142:	89 a3       	std	Y+33, r24	; 0x21
    1144:	89 a1       	ldd	r24, Y+33	; 0x21
    1146:	9a a1       	ldd	r25, Y+34	; 0x22
    1148:	9e 8f       	std	Y+30, r25	; 0x1e
    114a:	8d 8f       	std	Y+29, r24	; 0x1d
    114c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    114e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <main+0x290>
    1154:	9e 8f       	std	Y+30, r25	; 0x1e
    1156:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10000);
				/*close door for 10sec*/
				send_byte('c');
    1158:	83 e6       	ldi	r24, 0x63	; 99
    115a:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <send_byte>
				Anti_Clk_Wise();
    115e:	0e 94 0c 06 	call	0xc18	; 0xc18 <Anti_Clk_Wise>
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e4       	ldi	r25, 0x40	; 64
    1166:	ac e1       	ldi	r26, 0x1C	; 28
    1168:	b6 e4       	ldi	r27, 0x46	; 70
    116a:	89 8f       	std	Y+25, r24	; 0x19
    116c:	9a 8f       	std	Y+26, r25	; 0x1a
    116e:	ab 8f       	std	Y+27, r26	; 0x1b
    1170:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1172:	69 8d       	ldd	r22, Y+25	; 0x19
    1174:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1176:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1178:	9c 8d       	ldd	r25, Y+28	; 0x1c
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	4a e7       	ldi	r20, 0x7A	; 122
    1180:	53 e4       	ldi	r21, 0x43	; 67
    1182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	8d 8b       	std	Y+21, r24	; 0x15
    118c:	9e 8b       	std	Y+22, r25	; 0x16
    118e:	af 8b       	std	Y+23, r26	; 0x17
    1190:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1192:	6d 89       	ldd	r22, Y+21	; 0x15
    1194:	7e 89       	ldd	r23, Y+22	; 0x16
    1196:	8f 89       	ldd	r24, Y+23	; 0x17
    1198:	98 8d       	ldd	r25, Y+24	; 0x18
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e8       	ldi	r20, 0x80	; 128
    11a0:	5f e3       	ldi	r21, 0x3F	; 63
    11a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11a6:	88 23       	and	r24, r24
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <main+0x2f4>
		__ticks = 1;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	9c 8b       	std	Y+20, r25	; 0x14
    11b0:	8b 8b       	std	Y+19, r24	; 0x13
    11b2:	3f c0       	rjmp	.+126    	; 0x1232 <main+0x372>
	else if (__tmp > 65535)
    11b4:	6d 89       	ldd	r22, Y+21	; 0x15
    11b6:	7e 89       	ldd	r23, Y+22	; 0x16
    11b8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ba:	98 8d       	ldd	r25, Y+24	; 0x18
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	3f ef       	ldi	r19, 0xFF	; 255
    11c0:	4f e7       	ldi	r20, 0x7F	; 127
    11c2:	57 e4       	ldi	r21, 0x47	; 71
    11c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11c8:	18 16       	cp	r1, r24
    11ca:	4c f5       	brge	.+82     	; 0x121e <main+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11cc:	69 8d       	ldd	r22, Y+25	; 0x19
    11ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	40 e2       	ldi	r20, 0x20	; 32
    11da:	51 e4       	ldi	r21, 0x41	; 65
    11dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	bc 01       	movw	r22, r24
    11e6:	cd 01       	movw	r24, r26
    11e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	9c 8b       	std	Y+20, r25	; 0x14
    11f2:	8b 8b       	std	Y+19, r24	; 0x13
    11f4:	0f c0       	rjmp	.+30     	; 0x1214 <main+0x354>
    11f6:	89 e1       	ldi	r24, 0x19	; 25
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9a 8b       	std	Y+18, r25	; 0x12
    11fc:	89 8b       	std	Y+17, r24	; 0x11
    11fe:	89 89       	ldd	r24, Y+17	; 0x11
    1200:	9a 89       	ldd	r25, Y+18	; 0x12
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <main+0x342>
    1206:	9a 8b       	std	Y+18, r25	; 0x12
    1208:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120a:	8b 89       	ldd	r24, Y+19	; 0x13
    120c:	9c 89       	ldd	r25, Y+20	; 0x14
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	9c 8b       	std	Y+20, r25	; 0x14
    1212:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1214:	8b 89       	ldd	r24, Y+19	; 0x13
    1216:	9c 89       	ldd	r25, Y+20	; 0x14
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	69 f7       	brne	.-38     	; 0x11f6 <main+0x336>
    121c:	14 c0       	rjmp	.+40     	; 0x1246 <main+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121e:	6d 89       	ldd	r22, Y+21	; 0x15
    1220:	7e 89       	ldd	r23, Y+22	; 0x16
    1222:	8f 89       	ldd	r24, Y+23	; 0x17
    1224:	98 8d       	ldd	r25, Y+24	; 0x18
    1226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	9c 8b       	std	Y+20, r25	; 0x14
    1230:	8b 8b       	std	Y+19, r24	; 0x13
    1232:	8b 89       	ldd	r24, Y+19	; 0x13
    1234:	9c 89       	ldd	r25, Y+20	; 0x14
    1236:	98 8b       	std	Y+16, r25	; 0x10
    1238:	8f 87       	std	Y+15, r24	; 0x0f
    123a:	8f 85       	ldd	r24, Y+15	; 0x0f
    123c:	98 89       	ldd	r25, Y+16	; 0x10
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <main+0x37e>
    1242:	98 8b       	std	Y+16, r25	; 0x10
    1244:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10000);
				/*make dc motor is stopped*/
				send_byte('s');
    1246:	83 e7       	ldi	r24, 0x73	; 115
    1248:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <send_byte>
				Stop_Motor();
    124c:	0e 94 21 06 	call	0xc42	; 0xc42 <Stop_Motor>
				state=0;
    1250:	19 ae       	std	Y+57, r1	; 0x39
    1252:	dc ce       	rjmp	.-584    	; 0x100c <main+0x14c>
			}
			/*if user enter wrong password ,state will be =0 , and if user try enter wrong password 2 times consecutive ,alarm will work*/
			else if(state==0)
    1254:	89 ad       	ldd	r24, Y+57	; 0x39
    1256:	88 23       	and	r24, r24
    1258:	09 f0       	breq	.+2      	; 0x125c <main+0x39c>
    125a:	d8 ce       	rjmp	.-592    	; 0x100c <main+0x14c>
			{
				send_byte('x');/*MC2 is ready*/
    125c:	88 e7       	ldi	r24, 0x78	; 120
    125e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <send_byte>
				try++;
    1262:	8a ad       	ldd	r24, Y+58	; 0x3a
    1264:	8f 5f       	subi	r24, 0xFF	; 255
    1266:	8a af       	std	Y+58, r24	; 0x3a
				if(try==2)
    1268:	8a ad       	ldd	r24, Y+58	; 0x3a
    126a:	82 30       	cpi	r24, 0x02	; 2
    126c:	09 f0       	breq	.+2      	; 0x1270 <main+0x3b0>
    126e:	80 c0       	rjmp	.+256    	; 0x1370 <main+0x4b0>
				{
					try=0;
    1270:	1a ae       	std	Y+58, r1	; 0x3a
				   	recv_byte=receive_byte();
    1272:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    1276:	80 93 6c 00 	sts	0x006C, r24
					while(recv_byte!=0x10);/*wait until it receive 0x10*/
    127a:	80 91 6c 00 	lds	r24, 0x006C
    127e:	80 31       	cpi	r24, 0x10	; 16
    1280:	e1 f7       	brne	.-8      	; 0x127a <main+0x3ba>
					send_byte('A');/*send 'A' to MC1 that mean alarm will be worked here to show message on lcd that system will be locked*/
    1282:	81 e4       	ldi	r24, 0x41	; 65
    1284:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <send_byte>
					Alarm_On();/*this function responsible for work alarm*/
    1288:	0e 94 b8 05 	call	0xb70	; 0xb70 <Alarm_On>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e6       	ldi	r25, 0x60	; 96
    1290:	aa e6       	ldi	r26, 0x6A	; 106
    1292:	b7 e4       	ldi	r27, 0x47	; 71
    1294:	8b 87       	std	Y+11, r24	; 0x0b
    1296:	9c 87       	std	Y+12, r25	; 0x0c
    1298:	ad 87       	std	Y+13, r26	; 0x0d
    129a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    129c:	6b 85       	ldd	r22, Y+11	; 0x0b
    129e:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	4a e7       	ldi	r20, 0x7A	; 122
    12aa:	53 e4       	ldi	r21, 0x43	; 67
    12ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	8f 83       	std	Y+7, r24	; 0x07
    12b6:	98 87       	std	Y+8, r25	; 0x08
    12b8:	a9 87       	std	Y+9, r26	; 0x09
    12ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12bc:	6f 81       	ldd	r22, Y+7	; 0x07
    12be:	78 85       	ldd	r23, Y+8	; 0x08
    12c0:	89 85       	ldd	r24, Y+9	; 0x09
    12c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e8       	ldi	r20, 0x80	; 128
    12ca:	5f e3       	ldi	r21, 0x3F	; 63
    12cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d0:	88 23       	and	r24, r24
    12d2:	2c f4       	brge	.+10     	; 0x12de <main+0x41e>
		__ticks = 1;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9e 83       	std	Y+6, r25	; 0x06
    12da:	8d 83       	std	Y+5, r24	; 0x05
    12dc:	3f c0       	rjmp	.+126    	; 0x135c <main+0x49c>
	else if (__tmp > 65535)
    12de:	6f 81       	ldd	r22, Y+7	; 0x07
    12e0:	78 85       	ldd	r23, Y+8	; 0x08
    12e2:	89 85       	ldd	r24, Y+9	; 0x09
    12e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	3f ef       	ldi	r19, 0xFF	; 255
    12ea:	4f e7       	ldi	r20, 0x7F	; 127
    12ec:	57 e4       	ldi	r21, 0x47	; 71
    12ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12f2:	18 16       	cp	r1, r24
    12f4:	4c f5       	brge	.+82     	; 0x1348 <main+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    12fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e2       	ldi	r20, 0x20	; 32
    1304:	51 e4       	ldi	r21, 0x41	; 65
    1306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	bc 01       	movw	r22, r24
    1310:	cd 01       	movw	r24, r26
    1312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	0f c0       	rjmp	.+30     	; 0x133e <main+0x47e>
    1320:	89 e1       	ldi	r24, 0x19	; 25
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	9c 83       	std	Y+4, r25	; 0x04
    1326:	8b 83       	std	Y+3, r24	; 0x03
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <main+0x46c>
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	9e 83       	std	Y+6, r25	; 0x06
    133c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	69 f7       	brne	.-38     	; 0x1320 <main+0x460>
    1346:	14 c0       	rjmp	.+40     	; 0x1370 <main+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1348:	6f 81       	ldd	r22, Y+7	; 0x07
    134a:	78 85       	ldd	r23, Y+8	; 0x08
    134c:	89 85       	ldd	r24, Y+9	; 0x09
    134e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	9e 83       	std	Y+6, r25	; 0x06
    135a:	8d 83       	std	Y+5, r24	; 0x05
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	9a 81       	ldd	r25, Y+2	; 0x02
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <main+0x4a8>
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(60000);
				}
				Alarm_Off();/*stop working alarm*/
    1370:	0e 94 c6 05 	call	0xb8c	; 0xb8c <Alarm_Off>
    1374:	4b ce       	rjmp	.-874    	; 0x100c <main+0x14c>

00001376 <check_pass>:
 * arguments of this function 1-pointer called recv ..> it points to the received array from MC1 this array contain
 * the password that entered by user
 * 2-pointer called eeprom ..> it points to the array that is read from EEPROM that contains the true password
 */
uint8 check_pass(uint8*recv,uint8*eeprom)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <check_pass+0x6>
    137c:	00 d0       	rcall	.+0      	; 0x137e <check_pass+0x8>
    137e:	00 d0       	rcall	.+0      	; 0x1380 <check_pass+0xa>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	9c 83       	std	Y+4, r25	; 0x04
    1386:	8b 83       	std	Y+3, r24	; 0x03
    1388:	7e 83       	std	Y+6, r23	; 0x06
    138a:	6d 83       	std	Y+5, r22	; 0x05
	uint8 flag=1;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1390:	19 82       	std	Y+1, r1	; 0x01
    1392:	16 c0       	rjmp	.+44     	; 0x13c0 <check_pass+0x4a>
		/*here we compare between the value inside two arrays (received and eeprom)
		 * if the first value in received array not equal to the first value of eeprom array
		 * that mean the password that written by user not right so make flag =0
		 * if the received array is identical to the real password at eeprom flag is still = 1
		 */
		if(*recv != *eeprom)
    1394:	eb 81       	ldd	r30, Y+3	; 0x03
    1396:	fc 81       	ldd	r31, Y+4	; 0x04
    1398:	90 81       	ld	r25, Z
    139a:	ed 81       	ldd	r30, Y+5	; 0x05
    139c:	fe 81       	ldd	r31, Y+6	; 0x06
    139e:	80 81       	ld	r24, Z
    13a0:	98 17       	cp	r25, r24
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <check_pass+0x30>
		{
			flag=0;
    13a4:	1a 82       	std	Y+2, r1	; 0x02
		}
		else
		{

		}
		recv++;/*to get the addresses of next locations in array to be able to access the all values inside array*/
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	9c 83       	std	Y+4, r25	; 0x04
    13ae:	8b 83       	std	Y+3, r24	; 0x03
		eeprom++;
    13b0:	8d 81       	ldd	r24, Y+5	; 0x05
    13b2:	9e 81       	ldd	r25, Y+6	; 0x06
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	9e 83       	std	Y+6, r25	; 0x06
    13b8:	8d 83       	std	Y+5, r24	; 0x05
        i++;
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	8f 5f       	subi	r24, 0xFF	; 255
    13be:	89 83       	std	Y+1, r24	; 0x01
 */
uint8 check_pass(uint8*recv,uint8*eeprom)
{
	uint8 flag=1;
	uint8 i=0;
	while(*recv != '\0')/*when pointer points to null that mean its the end of received array and go out from this loop*/
    13c0:	eb 81       	ldd	r30, Y+3	; 0x03
    13c2:	fc 81       	ldd	r31, Y+4	; 0x04
    13c4:	80 81       	ld	r24, Z
    13c6:	88 23       	and	r24, r24
    13c8:	29 f7       	brne	.-54     	; 0x1394 <check_pass+0x1e>
		}
		recv++;/*to get the addresses of next locations in array to be able to access the all values inside array*/
		eeprom++;
        i++;
	}
	if(flag==1)/*send 'T' to MC1 as tell it that password is true*/
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	21 f4       	brne	.+8      	; 0x13d8 <check_pass+0x62>
	{
		send_byte('T');
    13d0:	84 e5       	ldi	r24, 0x54	; 84
    13d2:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <send_byte>
    13d6:	06 c0       	rjmp	.+12     	; 0x13e4 <check_pass+0x6e>
	}
	else if(flag==0)/*send 'F' to MC1 to tell it password is wrong*/
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	88 23       	and	r24, r24
    13dc:	19 f4       	brne	.+6      	; 0x13e4 <check_pass+0x6e>
	{
		send_byte('F');
    13de:	86 e4       	ldi	r24, 0x46	; 70
    13e0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <send_byte>
    }
	return flag;
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13e6:	26 96       	adiw	r28, 0x06	; 6
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <read_password>:
/*its read the true password from EEPROM
 * arguments: 1-address : is the location of the real password in EEPROM
 * 2-pass: is the pointer of empty array that will be full with the real password after reading from eeprom
 */
void read_password(uint16 address,uint8 *pass)
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	a0 97       	sbiw	r28, 0x20	; 32
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	9e 8f       	std	Y+30, r25	; 0x1e
    140e:	8d 8f       	std	Y+29, r24	; 0x1d
    1410:	78 a3       	std	Y+32, r23	; 0x20
    1412:	6f 8f       	std	Y+31, r22	; 0x1f

	read_eeprom(address,pass);
    1414:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1416:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1418:	2f 8d       	ldd	r18, Y+31	; 0x1f
    141a:	38 a1       	ldd	r19, Y+32	; 0x20
    141c:	b9 01       	movw	r22, r18
    141e:	0e 94 77 06 	call	0xcee	; 0xcee <read_eeprom>
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e2       	ldi	r26, 0x20	; 32
    1428:	b1 e4       	ldi	r27, 0x41	; 65
    142a:	89 8f       	std	Y+25, r24	; 0x19
    142c:	9a 8f       	std	Y+26, r25	; 0x1a
    142e:	ab 8f       	std	Y+27, r26	; 0x1b
    1430:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1432:	69 8d       	ldd	r22, Y+25	; 0x19
    1434:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1436:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1438:	9c 8d       	ldd	r25, Y+28	; 0x1c
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	4a e7       	ldi	r20, 0x7A	; 122
    1440:	53 e4       	ldi	r21, 0x43	; 67
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	8d 8b       	std	Y+21, r24	; 0x15
    144c:	9e 8b       	std	Y+22, r25	; 0x16
    144e:	af 8b       	std	Y+23, r26	; 0x17
    1450:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1452:	6d 89       	ldd	r22, Y+21	; 0x15
    1454:	7e 89       	ldd	r23, Y+22	; 0x16
    1456:	8f 89       	ldd	r24, Y+23	; 0x17
    1458:	98 8d       	ldd	r25, Y+24	; 0x18
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e8       	ldi	r20, 0x80	; 128
    1460:	5f e3       	ldi	r21, 0x3F	; 63
    1462:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1466:	88 23       	and	r24, r24
    1468:	2c f4       	brge	.+10     	; 0x1474 <read_password+0x7c>
		__ticks = 1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9c 8b       	std	Y+20, r25	; 0x14
    1470:	8b 8b       	std	Y+19, r24	; 0x13
    1472:	3f c0       	rjmp	.+126    	; 0x14f2 <read_password+0xfa>
	else if (__tmp > 65535)
    1474:	6d 89       	ldd	r22, Y+21	; 0x15
    1476:	7e 89       	ldd	r23, Y+22	; 0x16
    1478:	8f 89       	ldd	r24, Y+23	; 0x17
    147a:	98 8d       	ldd	r25, Y+24	; 0x18
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	3f ef       	ldi	r19, 0xFF	; 255
    1480:	4f e7       	ldi	r20, 0x7F	; 127
    1482:	57 e4       	ldi	r21, 0x47	; 71
    1484:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1488:	18 16       	cp	r1, r24
    148a:	4c f5       	brge	.+82     	; 0x14de <read_password+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148c:	69 8d       	ldd	r22, Y+25	; 0x19
    148e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	51 e4       	ldi	r21, 0x41	; 65
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9c 8b       	std	Y+20, r25	; 0x14
    14b2:	8b 8b       	std	Y+19, r24	; 0x13
    14b4:	0f c0       	rjmp	.+30     	; 0x14d4 <read_password+0xdc>
    14b6:	89 e1       	ldi	r24, 0x19	; 25
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9a 8b       	std	Y+18, r25	; 0x12
    14bc:	89 8b       	std	Y+17, r24	; 0x11
    14be:	89 89       	ldd	r24, Y+17	; 0x11
    14c0:	9a 89       	ldd	r25, Y+18	; 0x12
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <read_password+0xca>
    14c6:	9a 8b       	std	Y+18, r25	; 0x12
    14c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ca:	8b 89       	ldd	r24, Y+19	; 0x13
    14cc:	9c 89       	ldd	r25, Y+20	; 0x14
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	9c 8b       	std	Y+20, r25	; 0x14
    14d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d4:	8b 89       	ldd	r24, Y+19	; 0x13
    14d6:	9c 89       	ldd	r25, Y+20	; 0x14
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	69 f7       	brne	.-38     	; 0x14b6 <read_password+0xbe>
    14dc:	98 c0       	rjmp	.+304    	; 0x160e <read_password+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14de:	6d 89       	ldd	r22, Y+21	; 0x15
    14e0:	7e 89       	ldd	r23, Y+22	; 0x16
    14e2:	8f 89       	ldd	r24, Y+23	; 0x17
    14e4:	98 8d       	ldd	r25, Y+24	; 0x18
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9c 8b       	std	Y+20, r25	; 0x14
    14f0:	8b 8b       	std	Y+19, r24	; 0x13
    14f2:	8b 89       	ldd	r24, Y+19	; 0x13
    14f4:	9c 89       	ldd	r25, Y+20	; 0x14
    14f6:	98 8b       	std	Y+16, r25	; 0x10
    14f8:	8f 87       	std	Y+15, r24	; 0x0f
    14fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fc:	98 89       	ldd	r25, Y+16	; 0x10
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <read_password+0x106>
    1502:	98 8b       	std	Y+16, r25	; 0x10
    1504:	8f 87       	std	Y+15, r24	; 0x0f
    1506:	83 c0       	rjmp	.+262    	; 0x160e <read_password+0x216>
	_delay_ms(10);
	while(*pass != '\0')/*when you read a null from eeprom that mean its the end of the password*/
	{
		address++;
    1508:	8d 8d       	ldd	r24, Y+29	; 0x1d
    150a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	9e 8f       	std	Y+30, r25	; 0x1e
    1510:	8d 8f       	std	Y+29, r24	; 0x1d
		pass++;
    1512:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1514:	98 a1       	ldd	r25, Y+32	; 0x20
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	98 a3       	std	Y+32, r25	; 0x20
    151a:	8f 8f       	std	Y+31, r24	; 0x1f
		read_eeprom(address,pass);
    151c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    151e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1520:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1522:	38 a1       	ldd	r19, Y+32	; 0x20
    1524:	b9 01       	movw	r22, r18
    1526:	0e 94 77 06 	call	0xcee	; 0xcee <read_eeprom>
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a0 e2       	ldi	r26, 0x20	; 32
    1530:	b1 e4       	ldi	r27, 0x41	; 65
    1532:	8b 87       	std	Y+11, r24	; 0x0b
    1534:	9c 87       	std	Y+12, r25	; 0x0c
    1536:	ad 87       	std	Y+13, r26	; 0x0d
    1538:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153a:	6b 85       	ldd	r22, Y+11	; 0x0b
    153c:	7c 85       	ldd	r23, Y+12	; 0x0c
    153e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1540:	9e 85       	ldd	r25, Y+14	; 0x0e
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	4a e7       	ldi	r20, 0x7A	; 122
    1548:	53 e4       	ldi	r21, 0x43	; 67
    154a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	8f 83       	std	Y+7, r24	; 0x07
    1554:	98 87       	std	Y+8, r25	; 0x08
    1556:	a9 87       	std	Y+9, r26	; 0x09
    1558:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    155a:	6f 81       	ldd	r22, Y+7	; 0x07
    155c:	78 85       	ldd	r23, Y+8	; 0x08
    155e:	89 85       	ldd	r24, Y+9	; 0x09
    1560:	9a 85       	ldd	r25, Y+10	; 0x0a
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e8       	ldi	r20, 0x80	; 128
    1568:	5f e3       	ldi	r21, 0x3F	; 63
    156a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    156e:	88 23       	and	r24, r24
    1570:	2c f4       	brge	.+10     	; 0x157c <read_password+0x184>
		__ticks = 1;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	9e 83       	std	Y+6, r25	; 0x06
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	3f c0       	rjmp	.+126    	; 0x15fa <read_password+0x202>
	else if (__tmp > 65535)
    157c:	6f 81       	ldd	r22, Y+7	; 0x07
    157e:	78 85       	ldd	r23, Y+8	; 0x08
    1580:	89 85       	ldd	r24, Y+9	; 0x09
    1582:	9a 85       	ldd	r25, Y+10	; 0x0a
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	3f ef       	ldi	r19, 0xFF	; 255
    1588:	4f e7       	ldi	r20, 0x7F	; 127
    158a:	57 e4       	ldi	r21, 0x47	; 71
    158c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1590:	18 16       	cp	r1, r24
    1592:	4c f5       	brge	.+82     	; 0x15e6 <read_password+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1594:	6b 85       	ldd	r22, Y+11	; 0x0b
    1596:	7c 85       	ldd	r23, Y+12	; 0x0c
    1598:	8d 85       	ldd	r24, Y+13	; 0x0d
    159a:	9e 85       	ldd	r25, Y+14	; 0x0e
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e2       	ldi	r20, 0x20	; 32
    15a2:	51 e4       	ldi	r21, 0x41	; 65
    15a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	bc 01       	movw	r22, r24
    15ae:	cd 01       	movw	r24, r26
    15b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8d 83       	std	Y+5, r24	; 0x05
    15bc:	0f c0       	rjmp	.+30     	; 0x15dc <read_password+0x1e4>
    15be:	89 e1       	ldi	r24, 0x19	; 25
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	9c 83       	std	Y+4, r25	; 0x04
    15c4:	8b 83       	std	Y+3, r24	; 0x03
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <read_password+0x1d2>
    15ce:	9c 83       	std	Y+4, r25	; 0x04
    15d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d2:	8d 81       	ldd	r24, Y+5	; 0x05
    15d4:	9e 81       	ldd	r25, Y+6	; 0x06
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15dc:	8d 81       	ldd	r24, Y+5	; 0x05
    15de:	9e 81       	ldd	r25, Y+6	; 0x06
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	69 f7       	brne	.-38     	; 0x15be <read_password+0x1c6>
    15e4:	14 c0       	rjmp	.+40     	; 0x160e <read_password+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e6:	6f 81       	ldd	r22, Y+7	; 0x07
    15e8:	78 85       	ldd	r23, Y+8	; 0x08
    15ea:	89 85       	ldd	r24, Y+9	; 0x09
    15ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	9e 83       	std	Y+6, r25	; 0x06
    15f8:	8d 83       	std	Y+5, r24	; 0x05
    15fa:	8d 81       	ldd	r24, Y+5	; 0x05
    15fc:	9e 81       	ldd	r25, Y+6	; 0x06
    15fe:	9a 83       	std	Y+2, r25	; 0x02
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	9a 81       	ldd	r25, Y+2	; 0x02
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <read_password+0x20e>
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01
void read_password(uint16 address,uint8 *pass)
{

	read_eeprom(address,pass);
	_delay_ms(10);
	while(*pass != '\0')/*when you read a null from eeprom that mean its the end of the password*/
    160e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1610:	f8 a1       	ldd	r31, Y+32	; 0x20
    1612:	80 81       	ld	r24, Z
    1614:	88 23       	and	r24, r24
    1616:	09 f0       	breq	.+2      	; 0x161a <read_password+0x222>
    1618:	77 cf       	rjmp	.-274    	; 0x1508 <read_password+0x110>
		read_eeprom(address,pass);
		_delay_ms(10);
	}


}
    161a:	a0 96       	adiw	r28, 0x20	; 32
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <write_pass>:
/*store the password at EEPROM
 * arguments :1- address that you want to store password in it
 * 2-pass points to the array that is full of char of password that will be stored
 */
void write_pass(uint16 address,uint8 *pass)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	a0 97       	sbiw	r28, 0x20	; 32
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	9e 8f       	std	Y+30, r25	; 0x1e
    1642:	8d 8f       	std	Y+29, r24	; 0x1d
    1644:	78 a3       	std	Y+32, r23	; 0x20
    1646:	6f 8f       	std	Y+31, r22	; 0x1f
    1648:	84 c0       	rjmp	.+264    	; 0x1752 <write_pass+0x126>
	while(*pass!='\0')
	{
		write_eeprom(address,*pass);/*address is the memory location that you want to write at it ..0x10 is the data that will be written in 0x0311..its the password of the door*/
    164a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    164c:	f8 a1       	ldd	r31, Y+32	; 0x20
    164e:	20 81       	ld	r18, Z
    1650:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1652:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1654:	62 2f       	mov	r22, r18
    1656:	0e 94 36 06 	call	0xc6c	; 0xc6c <write_eeprom>
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a0 e2       	ldi	r26, 0x20	; 32
    1660:	b1 e4       	ldi	r27, 0x41	; 65
    1662:	89 8f       	std	Y+25, r24	; 0x19
    1664:	9a 8f       	std	Y+26, r25	; 0x1a
    1666:	ab 8f       	std	Y+27, r26	; 0x1b
    1668:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166a:	69 8d       	ldd	r22, Y+25	; 0x19
    166c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    166e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1670:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	4a e7       	ldi	r20, 0x7A	; 122
    1678:	53 e4       	ldi	r21, 0x43	; 67
    167a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	8d 8b       	std	Y+21, r24	; 0x15
    1684:	9e 8b       	std	Y+22, r25	; 0x16
    1686:	af 8b       	std	Y+23, r26	; 0x17
    1688:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    168a:	6d 89       	ldd	r22, Y+21	; 0x15
    168c:	7e 89       	ldd	r23, Y+22	; 0x16
    168e:	8f 89       	ldd	r24, Y+23	; 0x17
    1690:	98 8d       	ldd	r25, Y+24	; 0x18
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e8       	ldi	r20, 0x80	; 128
    1698:	5f e3       	ldi	r21, 0x3F	; 63
    169a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    169e:	88 23       	and	r24, r24
    16a0:	2c f4       	brge	.+10     	; 0x16ac <write_pass+0x80>
		__ticks = 1;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9c 8b       	std	Y+20, r25	; 0x14
    16a8:	8b 8b       	std	Y+19, r24	; 0x13
    16aa:	3f c0       	rjmp	.+126    	; 0x172a <write_pass+0xfe>
	else if (__tmp > 65535)
    16ac:	6d 89       	ldd	r22, Y+21	; 0x15
    16ae:	7e 89       	ldd	r23, Y+22	; 0x16
    16b0:	8f 89       	ldd	r24, Y+23	; 0x17
    16b2:	98 8d       	ldd	r25, Y+24	; 0x18
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	57 e4       	ldi	r21, 0x47	; 71
    16bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	4c f5       	brge	.+82     	; 0x1716 <write_pass+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c4:	69 8d       	ldd	r22, Y+25	; 0x19
    16c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e2       	ldi	r20, 0x20	; 32
    16d2:	51 e4       	ldi	r21, 0x41	; 65
    16d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9c 8b       	std	Y+20, r25	; 0x14
    16ea:	8b 8b       	std	Y+19, r24	; 0x13
    16ec:	0f c0       	rjmp	.+30     	; 0x170c <write_pass+0xe0>
    16ee:	89 e1       	ldi	r24, 0x19	; 25
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	9a 8b       	std	Y+18, r25	; 0x12
    16f4:	89 8b       	std	Y+17, r24	; 0x11
    16f6:	89 89       	ldd	r24, Y+17	; 0x11
    16f8:	9a 89       	ldd	r25, Y+18	; 0x12
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <write_pass+0xce>
    16fe:	9a 8b       	std	Y+18, r25	; 0x12
    1700:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1702:	8b 89       	ldd	r24, Y+19	; 0x13
    1704:	9c 89       	ldd	r25, Y+20	; 0x14
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	9c 8b       	std	Y+20, r25	; 0x14
    170a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170c:	8b 89       	ldd	r24, Y+19	; 0x13
    170e:	9c 89       	ldd	r25, Y+20	; 0x14
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	69 f7       	brne	.-38     	; 0x16ee <write_pass+0xc2>
    1714:	14 c0       	rjmp	.+40     	; 0x173e <write_pass+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1716:	6d 89       	ldd	r22, Y+21	; 0x15
    1718:	7e 89       	ldd	r23, Y+22	; 0x16
    171a:	8f 89       	ldd	r24, Y+23	; 0x17
    171c:	98 8d       	ldd	r25, Y+24	; 0x18
    171e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	9c 8b       	std	Y+20, r25	; 0x14
    1728:	8b 8b       	std	Y+19, r24	; 0x13
    172a:	8b 89       	ldd	r24, Y+19	; 0x13
    172c:	9c 89       	ldd	r25, Y+20	; 0x14
    172e:	98 8b       	std	Y+16, r25	; 0x10
    1730:	8f 87       	std	Y+15, r24	; 0x0f
    1732:	8f 85       	ldd	r24, Y+15	; 0x0f
    1734:	98 89       	ldd	r25, Y+16	; 0x10
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <write_pass+0x10a>
    173a:	98 8b       	std	Y+16, r25	; 0x10
    173c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		address++; /*to get the next address to save the password in it*/
    173e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1740:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	9e 8f       	std	Y+30, r25	; 0x1e
    1746:	8d 8f       	std	Y+29, r24	; 0x1d
		pass++;    /*to make the pointer point to the next location in array of password*/
    1748:	8f 8d       	ldd	r24, Y+31	; 0x1f
    174a:	98 a1       	ldd	r25, Y+32	; 0x20
    174c:	01 96       	adiw	r24, 0x01	; 1
    174e:	98 a3       	std	Y+32, r25	; 0x20
    1750:	8f 8f       	std	Y+31, r24	; 0x1f
 * arguments :1- address that you want to store password in it
 * 2-pass points to the array that is full of char of password that will be stored
 */
void write_pass(uint16 address,uint8 *pass)
{
	while(*pass!='\0')
    1752:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1754:	f8 a1       	ldd	r31, Y+32	; 0x20
    1756:	80 81       	ld	r24, Z
    1758:	88 23       	and	r24, r24
    175a:	09 f0       	breq	.+2      	; 0x175e <write_pass+0x132>
    175c:	76 cf       	rjmp	.-276    	; 0x164a <write_pass+0x1e>
		write_eeprom(address,*pass);/*address is the memory location that you want to write at it ..0x10 is the data that will be written in 0x0311..its the password of the door*/
		_delay_ms(10);
		address++; /*to get the next address to save the password in it*/
		pass++;    /*to make the pointer point to the next location in array of password*/
	}
	write_eeprom(address,*pass);/*to write null at last of string*/
    175e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1760:	f8 a1       	ldd	r31, Y+32	; 0x20
    1762:	20 81       	ld	r18, Z
    1764:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1766:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1768:	62 2f       	mov	r22, r18
    176a:	0e 94 36 06 	call	0xc6c	; 0xc6c <write_eeprom>
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a0 e2       	ldi	r26, 0x20	; 32
    1774:	b1 e4       	ldi	r27, 0x41	; 65
    1776:	8b 87       	std	Y+11, r24	; 0x0b
    1778:	9c 87       	std	Y+12, r25	; 0x0c
    177a:	ad 87       	std	Y+13, r26	; 0x0d
    177c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1780:	7c 85       	ldd	r23, Y+12	; 0x0c
    1782:	8d 85       	ldd	r24, Y+13	; 0x0d
    1784:	9e 85       	ldd	r25, Y+14	; 0x0e
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	4a e7       	ldi	r20, 0x7A	; 122
    178c:	53 e4       	ldi	r21, 0x43	; 67
    178e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	8f 83       	std	Y+7, r24	; 0x07
    1798:	98 87       	std	Y+8, r25	; 0x08
    179a:	a9 87       	std	Y+9, r26	; 0x09
    179c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    179e:	6f 81       	ldd	r22, Y+7	; 0x07
    17a0:	78 85       	ldd	r23, Y+8	; 0x08
    17a2:	89 85       	ldd	r24, Y+9	; 0x09
    17a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e8       	ldi	r20, 0x80	; 128
    17ac:	5f e3       	ldi	r21, 0x3F	; 63
    17ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b2:	88 23       	and	r24, r24
    17b4:	2c f4       	brge	.+10     	; 0x17c0 <write_pass+0x194>
		__ticks = 1;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	9e 83       	std	Y+6, r25	; 0x06
    17bc:	8d 83       	std	Y+5, r24	; 0x05
    17be:	3f c0       	rjmp	.+126    	; 0x183e <write_pass+0x212>
	else if (__tmp > 65535)
    17c0:	6f 81       	ldd	r22, Y+7	; 0x07
    17c2:	78 85       	ldd	r23, Y+8	; 0x08
    17c4:	89 85       	ldd	r24, Y+9	; 0x09
    17c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	3f ef       	ldi	r19, 0xFF	; 255
    17cc:	4f e7       	ldi	r20, 0x7F	; 127
    17ce:	57 e4       	ldi	r21, 0x47	; 71
    17d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d4:	18 16       	cp	r1, r24
    17d6:	4c f5       	brge	.+82     	; 0x182a <write_pass+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17da:	7c 85       	ldd	r23, Y+12	; 0x0c
    17dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17de:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e2       	ldi	r20, 0x20	; 32
    17e6:	51 e4       	ldi	r21, 0x41	; 65
    17e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	bc 01       	movw	r22, r24
    17f2:	cd 01       	movw	r24, r26
    17f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	9e 83       	std	Y+6, r25	; 0x06
    17fe:	8d 83       	std	Y+5, r24	; 0x05
    1800:	0f c0       	rjmp	.+30     	; 0x1820 <write_pass+0x1f4>
    1802:	89 e1       	ldi	r24, 0x19	; 25
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <write_pass+0x1e2>
    1812:	9c 83       	std	Y+4, r25	; 0x04
    1814:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	9e 81       	ldd	r25, Y+6	; 0x06
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	69 f7       	brne	.-38     	; 0x1802 <write_pass+0x1d6>
    1828:	14 c0       	rjmp	.+40     	; 0x1852 <write_pass+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182a:	6f 81       	ldd	r22, Y+7	; 0x07
    182c:	78 85       	ldd	r23, Y+8	; 0x08
    182e:	89 85       	ldd	r24, Y+9	; 0x09
    1830:	9a 85       	ldd	r25, Y+10	; 0x0a
    1832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	8d 83       	std	Y+5, r24	; 0x05
    183e:	8d 81       	ldd	r24, Y+5	; 0x05
    1840:	9e 81       	ldd	r25, Y+6	; 0x06
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <write_pass+0x21e>
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    1852:	a0 96       	adiw	r28, 0x20	; 32
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <password_first_time>:

/*its executed only one time in code
 * its received array from MC1 , this array is the password that user want to use it to open door
 */
uint8 password_first_time()
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	a1 97       	sbiw	r28, 0x21	; 33
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61

	uint8 check;
	uint8 str_recv[16];
	uint8 read_eeprom[16];
	recv_byte=receive_byte();
    1878:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    187c:	80 93 6c 00 	sts	0x006C, r24
	while(recv_byte!=0x11);/*if you receive it , you can receive the string from MC1*/
    1880:	80 91 6c 00 	lds	r24, 0x006C
    1884:	81 31       	cpi	r24, 0x11	; 17
    1886:	e1 f7       	brne	.-8      	; 0x1880 <password_first_time+0x1c>
	receive_string(str_recv);/*receive the password from user*/
    1888:	ce 01       	movw	r24, r28
    188a:	02 96       	adiw	r24, 0x02	; 2
    188c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <receive_string>
	write_pass(0x0001,str_recv);/*store the password at address 0x0001 in EEPROM*/
    1890:	9e 01       	movw	r18, r28
    1892:	2e 5f       	subi	r18, 0xFE	; 254
    1894:	3f 4f       	sbci	r19, 0xFF	; 255
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	b9 01       	movw	r22, r18
    189c:	0e 94 16 0b 	call	0x162c	; 0x162c <write_pass>
	recv_byte=receive_byte();
    18a0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    18a4:	80 93 6c 00 	sts	0x006C, r24
	while(recv_byte!=0x11);/*if you receive it , you can receive the string from another mc*/
    18a8:	80 91 6c 00 	lds	r24, 0x006C
    18ac:	81 31       	cpi	r24, 0x11	; 17
    18ae:	e1 f7       	brne	.-8      	; 0x18a8 <password_first_time+0x44>
	receive_string(str_recv);/*receive the password (retype password) from user again*/
    18b0:	ce 01       	movw	r24, r28
    18b2:	02 96       	adiw	r24, 0x02	; 2
    18b4:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <receive_string>
	read_password(0x0001,read_eeprom);/*read the first password that written by user at first time from EEPROM*/
    18b8:	9e 01       	movw	r18, r28
    18ba:	2e 5e       	subi	r18, 0xEE	; 238
    18bc:	3f 4f       	sbci	r19, 0xFF	; 255
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	b9 01       	movw	r22, r18
    18c4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <read_password>
	recv_byte=receive_byte();
    18c8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    18cc:	80 93 6c 00 	sts	0x006C, r24
	while(recv_byte!=0x15);
    18d0:	80 91 6c 00 	lds	r24, 0x006C
    18d4:	85 31       	cpi	r24, 0x15	; 21
    18d6:	e1 f7       	brne	.-8      	; 0x18d0 <password_first_time+0x6c>
	//send_byte(0x11);
	check=check_pass(str_recv,read_eeprom);/*check if the first password is identical to the retype password*/
    18d8:	ce 01       	movw	r24, r28
    18da:	02 96       	adiw	r24, 0x02	; 2
    18dc:	9e 01       	movw	r18, r28
    18de:	2e 5e       	subi	r18, 0xEE	; 238
    18e0:	3f 4f       	sbci	r19, 0xFF	; 255
    18e2:	b9 01       	movw	r22, r18
    18e4:	0e 94 bb 09 	call	0x1376	; 0x1376 <check_pass>
    18e8:	89 83       	std	Y+1, r24	; 0x01
	return check;
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ec:	a1 96       	adiw	r28, 0x21	; 33
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <change_password_mc2>:
 * firstly , MC2 receive the current password from user and check if its identical to the real password
 * secondly, if the password that written by user is true ,MC2 will receive the new password and retype of new password
 * then store it in EEPROM at address 0x0001
 */
void change_password_mc2()
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	af 97       	sbiw	r28, 0x2f	; 47
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
	uint8 check;
	uint8 str_recv[16];/*this array that will receive the characters that are sent from MC1*/
	uint8 str_read_eeprom[16];/*this array will be contain the real password that stored at EEPROM*/
	recv_byte=receive_byte();
    1912:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    1916:	80 93 6c 00 	sts	0x006C, r24
	while(recv_byte!=0x01);/*if you receive it (to be ready to recv string ), you can receive the string from MC1*/
    191a:	80 91 6c 00 	lds	r24, 0x006C
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	e1 f7       	brne	.-8      	; 0x191a <change_password_mc2+0x1c>
	receive_string(str_recv); /*receive a string(current password that written by user) from MC1*/
    1922:	ce 01       	movw	r24, r28
    1924:	40 96       	adiw	r24, 0x10	; 16
    1926:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <receive_string>
	/*this function read the password that stored at address 0x0001..and store it in array str_read_eeprom*/
	read_password(0x0001,str_read_eeprom);
    192a:	9e 01       	movw	r18, r28
    192c:	20 5e       	subi	r18, 0xE0	; 224
    192e:	3f 4f       	sbci	r19, 0xFF	; 255
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	b9 01       	movw	r22, r18
    1936:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <read_password>
	recv_byte=receive_byte();
    193a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    193e:	80 93 6c 00 	sts	0x006C, r24
	while(recv_byte!=0x11);
    1942:	80 91 6c 00 	lds	r24, 0x006C
    1946:	81 31       	cpi	r24, 0x11	; 17
    1948:	e1 f7       	brne	.-8      	; 0x1942 <change_password_mc2+0x44>
	check=check_pass(str_recv,str_read_eeprom); /*check if user write the right password*/
    194a:	ce 01       	movw	r24, r28
    194c:	40 96       	adiw	r24, 0x10	; 16
    194e:	9e 01       	movw	r18, r28
    1950:	20 5e       	subi	r18, 0xE0	; 224
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
    1954:	b9 01       	movw	r22, r18
    1956:	0e 94 bb 09 	call	0x1376	; 0x1376 <check_pass>
    195a:	8f 87       	std	Y+15, r24	; 0x0f
	if(check==1) /*if the current password that written by user now is right */
    195c:	8f 85       	ldd	r24, Y+15	; 0x0f
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	09 f0       	breq	.+2      	; 0x1964 <change_password_mc2+0x66>
    1962:	b6 c0       	rjmp	.+364    	; 0x1ad0 <change_password_mc2+0x1d2>
	{

		recv_byte=receive_byte();
    1964:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    1968:	80 93 6c 00 	sts	0x006C, r24
	    while(recv_byte!=0x11);/*wait untill MC1 is be ready*/
    196c:	80 91 6c 00 	lds	r24, 0x006C
    1970:	81 31       	cpi	r24, 0x11	; 17
    1972:	e1 f7       	brne	.-8      	; 0x196c <change_password_mc2+0x6e>
		receive_string(str_recv);/*receive the new password from user*/
    1974:	ce 01       	movw	r24, r28
    1976:	40 96       	adiw	r24, 0x10	; 16
    1978:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <receive_string>
		/*store a new password into EEPROM at address 0x0311*/
		write_pass(0x0311,str_recv);
    197c:	9e 01       	movw	r18, r28
    197e:	20 5f       	subi	r18, 0xF0	; 240
    1980:	3f 4f       	sbci	r19, 0xFF	; 255
    1982:	81 e1       	ldi	r24, 0x11	; 17
    1984:	93 e0       	ldi	r25, 0x03	; 3
    1986:	b9 01       	movw	r22, r18
    1988:	0e 94 16 0b 	call	0x162c	; 0x162c <write_pass>
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a0 e2       	ldi	r26, 0x20	; 32
    1992:	b1 e4       	ldi	r27, 0x41	; 65
    1994:	8b 87       	std	Y+11, r24	; 0x0b
    1996:	9c 87       	std	Y+12, r25	; 0x0c
    1998:	ad 87       	std	Y+13, r26	; 0x0d
    199a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199c:	6b 85       	ldd	r22, Y+11	; 0x0b
    199e:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	4a e7       	ldi	r20, 0x7A	; 122
    19aa:	53 e4       	ldi	r21, 0x43	; 67
    19ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8f 83       	std	Y+7, r24	; 0x07
    19b6:	98 87       	std	Y+8, r25	; 0x08
    19b8:	a9 87       	std	Y+9, r26	; 0x09
    19ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19bc:	6f 81       	ldd	r22, Y+7	; 0x07
    19be:	78 85       	ldd	r23, Y+8	; 0x08
    19c0:	89 85       	ldd	r24, Y+9	; 0x09
    19c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e8       	ldi	r20, 0x80	; 128
    19ca:	5f e3       	ldi	r21, 0x3F	; 63
    19cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d0:	88 23       	and	r24, r24
    19d2:	2c f4       	brge	.+10     	; 0x19de <change_password_mc2+0xe0>
		__ticks = 1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9e 83       	std	Y+6, r25	; 0x06
    19da:	8d 83       	std	Y+5, r24	; 0x05
    19dc:	3f c0       	rjmp	.+126    	; 0x1a5c <change_password_mc2+0x15e>
	else if (__tmp > 65535)
    19de:	6f 81       	ldd	r22, Y+7	; 0x07
    19e0:	78 85       	ldd	r23, Y+8	; 0x08
    19e2:	89 85       	ldd	r24, Y+9	; 0x09
    19e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	3f ef       	ldi	r19, 0xFF	; 255
    19ea:	4f e7       	ldi	r20, 0x7F	; 127
    19ec:	57 e4       	ldi	r21, 0x47	; 71
    19ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f2:	18 16       	cp	r1, r24
    19f4:	4c f5       	brge	.+82     	; 0x1a48 <change_password_mc2+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e2       	ldi	r20, 0x20	; 32
    1a04:	51 e4       	ldi	r21, 0x41	; 65
    1a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	bc 01       	movw	r22, r24
    1a10:	cd 01       	movw	r24, r26
    1a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	0f c0       	rjmp	.+30     	; 0x1a3e <change_password_mc2+0x140>
    1a20:	89 e1       	ldi	r24, 0x19	; 25
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9c 83       	std	Y+4, r25	; 0x04
    1a26:	8b 83       	std	Y+3, r24	; 0x03
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <change_password_mc2+0x12e>
    1a30:	9c 83       	std	Y+4, r25	; 0x04
    1a32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	9e 83       	std	Y+6, r25	; 0x06
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a40:	9e 81       	ldd	r25, Y+6	; 0x06
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	69 f7       	brne	.-38     	; 0x1a20 <change_password_mc2+0x122>
    1a46:	14 c0       	rjmp	.+40     	; 0x1a70 <change_password_mc2+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a48:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4a:	78 85       	ldd	r23, Y+8	; 0x08
    1a4c:	89 85       	ldd	r24, Y+9	; 0x09
    1a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <change_password_mc2+0x16a>
    1a6c:	9a 83       	std	Y+2, r25	; 0x02
    1a6e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		/*receive again (retype password)the new password to check if its identical to the previous password in previous step */
		recv_byte=receive_byte();
    1a70:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    1a74:	80 93 6c 00 	sts	0x006C, r24
		while(recv_byte!=0x02);
    1a78:	80 91 6c 00 	lds	r24, 0x006C
    1a7c:	82 30       	cpi	r24, 0x02	; 2
    1a7e:	e1 f7       	brne	.-8      	; 0x1a78 <change_password_mc2+0x17a>
		receive_string(str_recv);
    1a80:	ce 01       	movw	r24, r28
    1a82:	40 96       	adiw	r24, 0x10	; 16
    1a84:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <receive_string>
		/*read the new password that written at first time that stored at 0x0311*/
		read_password(0x0311,str_read_eeprom);
    1a88:	9e 01       	movw	r18, r28
    1a8a:	20 5e       	subi	r18, 0xE0	; 224
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	81 e1       	ldi	r24, 0x11	; 17
    1a90:	93 e0       	ldi	r25, 0x03	; 3
    1a92:	b9 01       	movw	r22, r18
    1a94:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <read_password>
		recv_byte=receive_byte();
    1a98:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    1a9c:	80 93 6c 00 	sts	0x006C, r24
		while(recv_byte!=0x11);
    1aa0:	80 91 6c 00 	lds	r24, 0x006C
    1aa4:	81 31       	cpi	r24, 0x11	; 17
    1aa6:	e1 f7       	brne	.-8      	; 0x1aa0 <change_password_mc2+0x1a2>
		/*check if the retype password  is identical to the first password
		 * and send the result to MC1 ..if its identical system not ask user to repeat the step
		 * if its not identical system will ask user to repeat again
		 */
		check=check_pass(str_recv,str_read_eeprom);
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	40 96       	adiw	r24, 0x10	; 16
    1aac:	9e 01       	movw	r18, r28
    1aae:	20 5e       	subi	r18, 0xE0	; 224
    1ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab2:	b9 01       	movw	r22, r18
    1ab4:	0e 94 bb 09 	call	0x1376	; 0x1376 <check_pass>
    1ab8:	8f 87       	std	Y+15, r24	; 0x0f
		/*if check = 1 that mean the success is done ..then store the new password at 0x0001 in EEPROM*/
		if(check==1)
    1aba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	41 f4       	brne	.+16     	; 0x1ad0 <change_password_mc2+0x1d2>
		{
			write_pass(0x0001,str_read_eeprom);
    1ac0:	9e 01       	movw	r18, r28
    1ac2:	20 5e       	subi	r18, 0xE0	; 224
    1ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	b9 01       	movw	r22, r18
    1acc:	0e 94 16 0b 	call	0x162c	; 0x162c <write_pass>
		}
	}
}
    1ad0:	af 96       	adiw	r28, 0x2f	; 47
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <Open_Door_Mc2>:
/*its used when user want to open the door
 * user enter the current password then MC2 proccess if its true password or not to open door or not
 */
uint8 Open_Door_Mc2()
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	a1 97       	sbiw	r28, 0x21	; 33
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
	uint8 check;
	uint8 str_recv[16];/*this receive the characters that are sent from another mc*/
	uint8 str_read_eeprom[16];
	recv_byte=receive_byte();
    1af6:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    1afa:	80 93 6c 00 	sts	0x006C, r24
	while(recv_byte!=0x12);/*if you receive it (to be ready to recv string ), you can receive the string from another mc*/
    1afe:	80 91 6c 00 	lds	r24, 0x006C
    1b02:	82 31       	cpi	r24, 0x12	; 18
    1b04:	e1 f7       	brne	.-8      	; 0x1afe <Open_Door_Mc2+0x1c>
	receive_string(str_recv); /*receive a string(password that written by user) from MC1*/
    1b06:	ce 01       	movw	r24, r28
    1b08:	02 96       	adiw	r24, 0x02	; 2
    1b0a:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <receive_string>
	/*this function read the password that stored at address 0x0001..and locate it in array str_read_eeprom*/
	read_password(0x0001,str_read_eeprom);
    1b0e:	9e 01       	movw	r18, r28
    1b10:	2e 5e       	subi	r18, 0xEE	; 238
    1b12:	3f 4f       	sbci	r19, 0xFF	; 255
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	b9 01       	movw	r22, r18
    1b1a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <read_password>
	recv_byte=receive_byte();
    1b1e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    1b22:	80 93 6c 00 	sts	0x006C, r24
	while(recv_byte!=0x13);
    1b26:	80 91 6c 00 	lds	r24, 0x006C
    1b2a:	83 31       	cpi	r24, 0x13	; 19
    1b2c:	e1 f7       	brne	.-8      	; 0x1b26 <Open_Door_Mc2+0x44>
	check=check_pass(str_recv,str_read_eeprom); /*check if user enter the right password*/
    1b2e:	ce 01       	movw	r24, r28
    1b30:	02 96       	adiw	r24, 0x02	; 2
    1b32:	9e 01       	movw	r18, r28
    1b34:	2e 5e       	subi	r18, 0xEE	; 238
    1b36:	3f 4f       	sbci	r19, 0xFF	; 255
    1b38:	b9 01       	movw	r22, r18
    1b3a:	0e 94 bb 09 	call	0x1376	; 0x1376 <check_pass>
    1b3e:	89 83       	std	Y+1, r24	; 0x01
	return check;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b42:	a1 96       	adiw	r28, 0x21	; 33
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <Timer_int>:
#include"dc_motor.h"
uint8 Tick;
uint8 flag_o=0;
uint8 flag_c=0;
void Timer_int()
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
	/*enable (TIMER0)normal mode  ,Ftimer=Fcpu/1028 ..choose prescaler=1028*/
	TCCR0=(1<<FOC0)|(1<<CS02)|(1<<CS00);
    1b5c:	e3 e5       	ldi	r30, 0x53	; 83
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	85 e8       	ldi	r24, 0x85	; 133
    1b62:	80 83       	st	Z, r24
	TCNT0=5; //initial value
    1b64:	e2 e5       	ldi	r30, 0x52	; 82
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	85 e0       	ldi	r24, 0x05	; 5
    1b6a:	80 83       	st	Z, r24
    TIMSK|=(1<<TOIE0);// TOIE0 (Timer/Counter0 Overflow Interrupt Enable)
    1b6c:	a9 e5       	ldi	r26, 0x59	; 89
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e9 e5       	ldi	r30, 0x59	; 89
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	81 60       	ori	r24, 0x01	; 1
    1b78:	8c 93       	st	X, r24

}
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
    1b80:	1f 92       	push	r1
    1b82:	0f 92       	push	r0
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	0f 92       	push	r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	8f 93       	push	r24
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
	Tick++;
    1b94:	80 91 68 00 	lds	r24, 0x0068
    1b98:	8f 5f       	subi	r24, 0xFF	; 255
    1b9a:	80 93 68 00 	sts	0x0068, r24
	//TIFR &=~(1<<TOV0); //Timer/Counter0 Overflow Flag(automatic flag) myzt avr hwa by3mlhabzero b3d isr ma t5ls
	if(Tick==40)
    1b9e:	80 91 68 00 	lds	r24, 0x0068
    1ba2:	88 32       	cpi	r24, 0x28	; 40
    1ba4:	29 f4       	brne	.+10     	; 0x1bb0 <__vector_9+0x30>
	{
		//Stop_Motor();
		Tick=0;
    1ba6:	10 92 68 00 	sts	0x0068, r1
		flag_o=1;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	80 93 69 00 	sts	0x0069, r24
		//send_byte('c');

	}
}
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	8f 91       	pop	r24
    1bb6:	0f 90       	pop	r0
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	0f 90       	pop	r0
    1bbc:	1f 90       	pop	r1
    1bbe:	18 95       	reti

00001bc0 <init_uart>:
#include"uart.h"
uint8 i =0;
uint8 str_recv[5];
uint8 recv_byte;
void init_uart()
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
	UCSRA=(1<<U2X); //use double transmission speed
    1bc8:	eb e2       	ldi	r30, 0x2B	; 43
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	80 83       	st	Z, r24
	UCSRB=(1<<TXEN)|(1<<RXEN); //enable transmit and receive
    1bd0:	ea e2       	ldi	r30, 0x2A	; 42
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	88 e1       	ldi	r24, 0x18	; 24
    1bd6:	80 83       	st	Z, r24
	UCSRC=(1<<UCSZ0)|(1<<UCSZ1)|(1<<URSEL); //transmit and receive 8 bits ..ursel=1 because i write in UCSRC REG
    1bd8:	e0 e4       	ldi	r30, 0x40	; 64
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	86 e8       	ldi	r24, 0x86	; 134
    1bde:	80 83       	st	Z, r24
	/*for determine baud rate to  send data ..put 8 bits in UBRRL and the other 8 bits in UBRRH*/
	UBRRL=0xc;
    1be0:	e9 e2       	ldi	r30, 0x29	; 41
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	8c e0       	ldi	r24, 0x0C	; 12
    1be6:	80 83       	st	Z, r24
	UBRRH=0x0;
    1be8:	e0 e4       	ldi	r30, 0x40	; 64
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	10 82       	st	Z, r1
}
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <send_byte>:

void send_byte(uint8 data)
{
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	0f 92       	push	r0
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * when buffer of transmit data is empty , HW set UDRE in reg UCSRA
	 */
	while(IS_BIT_CLEAR(UCSRA,UDRE)); //wait until the buffer is empty..then send the new data
    1c00:	eb e2       	ldi	r30, 0x2B	; 43
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	88 2f       	mov	r24, r24
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	80 72       	andi	r24, 0x20	; 32
    1c0c:	90 70       	andi	r25, 0x00	; 0
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	b9 f3       	breq	.-18     	; 0x1c00 <send_byte+0xc>
	UDR=data;
    1c12:	ec e2       	ldi	r30, 0x2C	; 44
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	80 83       	st	Z, r24

}
    1c1a:	0f 90       	pop	r0
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <receive_byte>:

uint8 receive_byte()
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
	/*
	 * wait for complete received data when RXC=1
	 */
	while(IS_BIT_CLEAR(UCSRA,RXC));
    1c2a:	eb e2       	ldi	r30, 0x2B	; 43
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	88 23       	and	r24, r24
    1c32:	dc f7       	brge	.-10     	; 0x1c2a <receive_byte+0x8>
	//return UDR;
	recv_byte=UDR;
    1c34:	ec e2       	ldi	r30, 0x2C	; 44
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	80 93 6c 00 	sts	0x006C, r24
	return recv_byte;
    1c3e:	80 91 6c 00 	lds	r24, 0x006C

}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <send_string>:

void send_string(uint8 *str)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <send_string+0x6>
    1c4e:	0f 92       	push	r0
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	9b 83       	std	Y+3, r25	; 0x03
    1c56:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    1c58:	19 82       	std	Y+1, r1	; 0x01
    1c5a:	0e c0       	rjmp	.+28     	; 0x1c78 <send_string+0x30>
	while(str[i] != '\0')
	{
		send_byte(str[i]);
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	9b 81       	ldd	r25, Y+3	; 0x03
    1c66:	fc 01       	movw	r30, r24
    1c68:	e2 0f       	add	r30, r18
    1c6a:	f3 1f       	adc	r31, r19
    1c6c:	80 81       	ld	r24, Z
    1c6e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <send_byte>
		i++;
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	8f 5f       	subi	r24, 0xFF	; 255
    1c76:	89 83       	std	Y+1, r24	; 0x01
}

void send_string(uint8 *str)
{
	uint8 i =0;
	while(str[i] != '\0')
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	9b 81       	ldd	r25, Y+3	; 0x03
    1c82:	fc 01       	movw	r30, r24
    1c84:	e2 0f       	add	r30, r18
    1c86:	f3 1f       	adc	r31, r19
    1c88:	80 81       	ld	r24, Z
    1c8a:	88 23       	and	r24, r24
    1c8c:	39 f7       	brne	.-50     	; 0x1c5c <send_string+0x14>
	{
		send_byte(str[i]);
		i++;
	}
	send_byte(str[i]); /*to send the null*/
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	9b 81       	ldd	r25, Y+3	; 0x03
    1c98:	fc 01       	movw	r30, r24
    1c9a:	e2 0f       	add	r30, r18
    1c9c:	f3 1f       	adc	r31, r19
    1c9e:	80 81       	ld	r24, Z
    1ca0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <send_byte>
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <receive_string>:

void receive_string(uint8 *str)
{
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <receive_string+0xa>
    1cba:	0f 92       	push	r0
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	9b 83       	std	Y+3, r25	; 0x03
    1cc2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    1cc4:	19 82       	std	Y+1, r1	; 0x01
	str[i]=receive_byte();
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd0:	8c 01       	movw	r16, r24
    1cd2:	02 0f       	add	r16, r18
    1cd4:	13 1f       	adc	r17, r19
    1cd6:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    1cda:	f8 01       	movw	r30, r16
    1cdc:	80 83       	st	Z, r24
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <receive_string+0x4e>
	while(str[i] != '\0') /*'\0' is symbol for the end of string*/
	{
		i++;
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	8f 5f       	subi	r24, 0xFF	; 255
    1ce4:	89 83       	std	Y+1, r24	; 0x01
		str[i]=receive_byte();
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf0:	8c 01       	movw	r16, r24
    1cf2:	02 0f       	add	r16, r18
    1cf4:	13 1f       	adc	r17, r19
    1cf6:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <receive_byte>
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	80 83       	st	Z, r24

void receive_string(uint8 *str)
{
	uint8 i =0;
	str[i]=receive_byte();
	while(str[i] != '\0') /*'\0' is symbol for the end of string*/
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	9b 81       	ldd	r25, Y+3	; 0x03
    1d08:	fc 01       	movw	r30, r24
    1d0a:	e2 0f       	add	r30, r18
    1d0c:	f3 1f       	adc	r31, r19
    1d0e:	80 81       	ld	r24, Z
    1d10:	88 23       	and	r24, r24
    1d12:	31 f7       	brne	.-52     	; 0x1ce0 <receive_string+0x30>
	{
		i++;
		str[i]=receive_byte();
	}
}
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	08 95       	ret

00001d24 <__prologue_saves__>:
    1d24:	2f 92       	push	r2
    1d26:	3f 92       	push	r3
    1d28:	4f 92       	push	r4
    1d2a:	5f 92       	push	r5
    1d2c:	6f 92       	push	r6
    1d2e:	7f 92       	push	r7
    1d30:	8f 92       	push	r8
    1d32:	9f 92       	push	r9
    1d34:	af 92       	push	r10
    1d36:	bf 92       	push	r11
    1d38:	cf 92       	push	r12
    1d3a:	df 92       	push	r13
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	ca 1b       	sub	r28, r26
    1d4e:	db 0b       	sbc	r29, r27
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
    1d5a:	09 94       	ijmp

00001d5c <__epilogue_restores__>:
    1d5c:	2a 88       	ldd	r2, Y+18	; 0x12
    1d5e:	39 88       	ldd	r3, Y+17	; 0x11
    1d60:	48 88       	ldd	r4, Y+16	; 0x10
    1d62:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d64:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d66:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d68:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d6e:	b9 84       	ldd	r11, Y+9	; 0x09
    1d70:	c8 84       	ldd	r12, Y+8	; 0x08
    1d72:	df 80       	ldd	r13, Y+7	; 0x07
    1d74:	ee 80       	ldd	r14, Y+6	; 0x06
    1d76:	fd 80       	ldd	r15, Y+5	; 0x05
    1d78:	0c 81       	ldd	r16, Y+4	; 0x04
    1d7a:	1b 81       	ldd	r17, Y+3	; 0x03
    1d7c:	aa 81       	ldd	r26, Y+2	; 0x02
    1d7e:	b9 81       	ldd	r27, Y+1	; 0x01
    1d80:	ce 0f       	add	r28, r30
    1d82:	d1 1d       	adc	r29, r1
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	ed 01       	movw	r28, r26
    1d90:	08 95       	ret

00001d92 <_exit>:
    1d92:	f8 94       	cli

00001d94 <__stop_program>:
    1d94:	ff cf       	rjmp	.-2      	; 0x1d94 <__stop_program>
